
I2c Comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002ec8  08002ec8  00003ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f74  08002f74  00004078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002f74  08002f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f7c  08002f7c  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f7c  08002f7c  00003f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f80  08002f80  00003f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08002f84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004078  2**0
                  CONTENTS
 10 .bss          000001c8  20000078  20000078  00004078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  00004078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007098  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001564  00000000  00000000  0000b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  0000c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005cb  00000000  00000000  0000ce48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c62  00000000  00000000  0000d413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000099d3  00000000  00000000  0002e075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4692  00000000  00000000  00037a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc0da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024f0  00000000  00000000  000fc120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000fe610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eb0 	.word	0x08002eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08002eb0 	.word	0x08002eb0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fa8d 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f855 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f8eb 	bl	800072c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000556:	f000 f8bb 	bl	80006d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady( &hi2c1, DevAddress,Trials,Timeout);
 800055a:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <main+0x88>)
 800055c:	8819      	ldrh	r1, [r3, #0]
 800055e:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <main+0x8c>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <main+0x90>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <main+0x94>)
 8000568:	f000 ffd4 	bl	8001514 <HAL_I2C_IsDeviceReady>
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
  if (ret == HAL_OK)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d103      	bne.n	800057e <main+0x3a>
  {
	  printf("The Device is Ready \n");
 8000576:	4819      	ldr	r0, [pc, #100]	@ (80005dc <main+0x98>)
 8000578:	f002 f906 	bl	8002788 <puts>
 800057c:	e002      	b.n	8000584 <main+0x40>
  }
  else
  {
	  printf("The Device is not ready. Check Cables \n");
 800057e:	4818      	ldr	r0, [pc, #96]	@ (80005e0 <main+0x9c>)
 8000580:	f002 f902 	bl	8002788 <puts>

  }

  ret = HAL_I2C_Mem_Write(&hi2c1, DevAddress, MemAddress, MemAddSize, Data, 2 , 100);
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <main+0x88>)
 8000586:	8819      	ldrh	r1, [r3, #0]
 8000588:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <main+0xa0>)
 800058a:	881a      	ldrh	r2, [r3, #0]
 800058c:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <main+0xa4>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	2064      	movs	r0, #100	@ 0x64
 8000592:	9002      	str	r0, [sp, #8]
 8000594:	2002      	movs	r0, #2
 8000596:	9001      	str	r0, [sp, #4]
 8000598:	4814      	ldr	r0, [pc, #80]	@ (80005ec <main+0xa8>)
 800059a:	9000      	str	r0, [sp, #0]
 800059c:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <main+0x94>)
 800059e:	f000 febf 	bl	8001320 <HAL_I2C_Mem_Write>
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if (ret == HAL_OK)
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d103      	bne.n	80005b4 <main+0x70>
  {
	  printf("WRITING TO REGISTER 27 \n");
 80005ac:	4810      	ldr	r0, [pc, #64]	@ (80005f0 <main+0xac>)
 80005ae:	f002 f8eb 	bl	8002788 <puts>
 80005b2:	e002      	b.n	80005ba <main+0x76>
  }
  else
  {
	  printf("Writing to Register Not getting Response \n");
 80005b4:	480f      	ldr	r0, [pc, #60]	@ (80005f4 <main+0xb0>)
 80005b6:	f002 f8e7 	bl	8002788 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World \n");
 80005ba:	480f      	ldr	r0, [pc, #60]	@ (80005f8 <main+0xb4>)
 80005bc:	f002 f8e4 	bl	8002788 <puts>
	  HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c4:	f000 fac2 	bl	8000b4c <HAL_Delay>
  {
 80005c8:	bf00      	nop
 80005ca:	e7f6      	b.n	80005ba <main+0x76>
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000098 	.word	0x20000098
 80005dc:	08002ec8 	.word	0x08002ec8
 80005e0:	08002ee0 	.word	0x08002ee0
 80005e4:	2000000c 	.word	0x2000000c
 80005e8:	2000000e 	.word	0x2000000e
 80005ec:	20000094 	.word	0x20000094
 80005f0:	08002f08 	.word	0x08002f08
 80005f4:	08002f20 	.word	0x08002f20
 80005f8:	08002f4c 	.word	0x08002f4c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f99c 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000670:	2350      	movs	r3, #80	@ 0x50
 8000672:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fae5 	bl	8001c50 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 f884 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fd46 	bl	8002140 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 f86d 	bl	8000798 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f000 fcc3 	bl	8001098 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f83e 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000098 	.word	0x20000098
 8000724:	40005400 	.word	0x40005400
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_GPIO_Init+0x30>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <MX_GPIO_Init+0x30>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_GPIO_Init+0x30>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e009      	b.n	8000786 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	60ba      	str	r2, [r7, #8]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff feba 	bl	80004f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3301      	adds	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	429a      	cmp	r2, r3
 800078c:	dbf1      	blt.n	8000772 <_write+0x12>
  }
  return len;
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	@ (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007e2:	2007      	movs	r0, #7
 80007e4:	f000 fa88 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a19      	ldr	r2, [pc, #100]	@ (8000878 <HAL_I2C_MspInit+0x84>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d12b      	bne.n	800086e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <HAL_I2C_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	@ (800087c <HAL_I2C_MspInit+0x88>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_I2C_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000832:	23c0      	movs	r3, #192	@ 0xc0
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000836:	2312      	movs	r3, #18
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000842:	2304      	movs	r3, #4
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <HAL_I2C_MspInit+0x8c>)
 800084e:	f000 fa87 	bl	8000d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_I2C_MspInit+0x88>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_I2C_MspInit+0x88>)
 800085c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_I2C_MspInit+0x88>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40005400 	.word	0x40005400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <UsageFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008da:	f000 f917 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e00a      	b.n	800090a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f4:	f3af 8000 	nop.w
 80008f8:	4601      	mov	r1, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	60ba      	str	r2, [r7, #8]
 8000900:	b2ca      	uxtb	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbf0      	blt.n	80008f4 <_read+0x12>
  }

  return len;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_close>:
  }
  return len;
}

int _close(int file)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000944:	605a      	str	r2, [r3, #4]
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_isatty>:

int _isatty(int file)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095c:	2301      	movs	r3, #1
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f002 f816 	bl	80029e4 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20020000 	.word	0x20020000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200000ec 	.word	0x200000ec
 80009ec:	20000240 	.word	0x20000240

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	@ (8000a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	@ (8000a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f001 ffd5 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fd7d 	bl	8000544 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a58:	08002f84 	.word	0x08002f84
  ldr r2, =_sbss
 8000a5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a60:	20000240 	.word	0x20000240

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f931 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fe82 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f93b 	bl	8000d46 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f911 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000010 	.word	0x20000010
 8000b04:	20000018 	.word	0x20000018
 8000b08:	20000014 	.word	0x20000014

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000018 	.word	0x20000018
 8000b30:	200000f0 	.word	0x200000f0

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200000f0 	.word	0x200000f0

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff ffee 	bl	8000b34 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffde 	bl	8000b34 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000018 	.word	0x20000018

08000b94 <__NVIC_SetPriorityGrouping>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_SetPriority>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff47 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff5c 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffb0 	bl	8000cb4 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	e16b      	b.n	8001054 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	f040 815a 	bne.w	800104e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d005      	beq.n	8000db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d130      	bne.n	8000e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0201 	and.w	r2, r3, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d017      	beq.n	8000e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d123      	bne.n	8000ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	69b9      	ldr	r1, [r7, #24]
 8000ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0203 	and.w	r2, r3, #3
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80b4 	beq.w	800104e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b60      	ldr	r3, [pc, #384]	@ (800106c <HAL_GPIO_Init+0x30c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	4a5f      	ldr	r2, [pc, #380]	@ (800106c <HAL_GPIO_Init+0x30c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800106c <HAL_GPIO_Init+0x30c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f02:	4a5b      	ldr	r2, [pc, #364]	@ (8001070 <HAL_GPIO_Init+0x310>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a52      	ldr	r2, [pc, #328]	@ (8001074 <HAL_GPIO_Init+0x314>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d02b      	beq.n	8000f86 <HAL_GPIO_Init+0x226>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a51      	ldr	r2, [pc, #324]	@ (8001078 <HAL_GPIO_Init+0x318>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x222>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a50      	ldr	r2, [pc, #320]	@ (800107c <HAL_GPIO_Init+0x31c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x21e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4f      	ldr	r2, [pc, #316]	@ (8001080 <HAL_GPIO_Init+0x320>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x21a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4e      	ldr	r2, [pc, #312]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x216>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4d      	ldr	r2, [pc, #308]	@ (8001088 <HAL_GPIO_Init+0x328>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x212>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	@ (800108c <HAL_GPIO_Init+0x32c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x20e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4b      	ldr	r2, [pc, #300]	@ (8001090 <HAL_GPIO_Init+0x330>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x20a>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00e      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	e00c      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f6e:	2306      	movs	r3, #6
 8000f70:	e00a      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f72:	2305      	movs	r3, #5
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f86:	2300      	movs	r3, #0
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	@ (8001070 <HAL_GPIO_Init+0x310>)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101e:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <HAL_GPIO_Init+0x334>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	f67f ae90 	bls.w	8000d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40021400 	.word	0x40021400
 800108c:	40021800 	.word	0x40021800
 8001090:	40021c00 	.word	0x40021c00
 8001094:	40013c00 	.word	0x40013c00

08001098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e12b      	b.n	8001302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fb98 	bl	80007f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	@ 0x24
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010fc:	f001 fa18 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4a81      	ldr	r2, [pc, #516]	@ (800130c <HAL_I2C_Init+0x274>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d807      	bhi.n	800111c <HAL_I2C_Init+0x84>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a80      	ldr	r2, [pc, #512]	@ (8001310 <HAL_I2C_Init+0x278>)
 8001110:	4293      	cmp	r3, r2
 8001112:	bf94      	ite	ls
 8001114:	2301      	movls	r3, #1
 8001116:	2300      	movhi	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	e006      	b.n	800112a <HAL_I2C_Init+0x92>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a7d      	ldr	r2, [pc, #500]	@ (8001314 <HAL_I2C_Init+0x27c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	bf94      	ite	ls
 8001124:	2301      	movls	r3, #1
 8001126:	2300      	movhi	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0e7      	b.n	8001302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4a78      	ldr	r2, [pc, #480]	@ (8001318 <HAL_I2C_Init+0x280>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a6a      	ldr	r2, [pc, #424]	@ (800130c <HAL_I2C_Init+0x274>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d802      	bhi.n	800116c <HAL_I2C_Init+0xd4>
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	e009      	b.n	8001180 <HAL_I2C_Init+0xe8>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	4a69      	ldr	r2, [pc, #420]	@ (800131c <HAL_I2C_Init+0x284>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	3301      	adds	r3, #1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	430b      	orrs	r3, r1
 8001186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001192:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	495c      	ldr	r1, [pc, #368]	@ (800130c <HAL_I2C_Init+0x274>)
 800119c:	428b      	cmp	r3, r1
 800119e:	d819      	bhi.n	80011d4 <HAL_I2C_Init+0x13c>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e59      	subs	r1, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ae:	1c59      	adds	r1, r3, #1
 80011b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011b4:	400b      	ands	r3, r1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <HAL_I2C_Init+0x138>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1e59      	subs	r1, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ce:	e051      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e04f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <HAL_I2C_Init+0x168>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	440b      	add	r3, r1
 80011ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ee:	3301      	adds	r3, #1
 80011f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	e012      	b.n	8001226 <HAL_I2C_Init+0x18e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	0099      	lsls	r1, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	3301      	adds	r3, #1
 8001218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_Init+0x196>
 800122a:	2301      	movs	r3, #1
 800122c:	e022      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10e      	bne.n	8001254 <HAL_I2C_Init+0x1bc>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1e58      	subs	r0, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6859      	ldr	r1, [r3, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	440b      	add	r3, r1
 8001244:	fbb0 f3f3 	udiv	r3, r0, r3
 8001248:	3301      	adds	r3, #1
 800124a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001252:	e00f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	0099      	lsls	r1, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	6809      	ldr	r1, [r1, #0]
 8001278:	4313      	orrs	r3, r2
 800127a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6911      	ldr	r1, [r2, #16]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	4311      	orrs	r1, r2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2220      	movs	r2, #32
 80012ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	000186a0 	.word	0x000186a0
 8001310:	001e847f 	.word	0x001e847f
 8001314:	003d08ff 	.word	0x003d08ff
 8001318:	431bde83 	.word	0x431bde83
 800131c:	10624dd3 	.word	0x10624dd3

08001320 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af02      	add	r7, sp, #8
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4603      	mov	r3, r0
 8001330:	817b      	strh	r3, [r7, #10]
 8001332:	460b      	mov	r3, r1
 8001334:	813b      	strh	r3, [r7, #8]
 8001336:	4613      	mov	r3, r2
 8001338:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800133a:	f7ff fbfb 	bl	8000b34 <HAL_GetTick>
 800133e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b20      	cmp	r3, #32
 800134a:	f040 80d9 	bne.w	8001500 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2319      	movs	r3, #25
 8001354:	2201      	movs	r2, #1
 8001356:	496d      	ldr	r1, [pc, #436]	@ (800150c <HAL_I2C_Mem_Write+0x1ec>)
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fa9f 	bl	800189c <I2C_WaitOnFlagUntilTimeout>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001364:	2302      	movs	r3, #2
 8001366:	e0cc      	b.n	8001502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <HAL_I2C_Mem_Write+0x56>
 8001372:	2302      	movs	r3, #2
 8001374:	e0c5      	b.n	8001502 <HAL_I2C_Mem_Write+0x1e2>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d007      	beq.n	800139c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2221      	movs	r2, #33	@ 0x21
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2240      	movs	r2, #64	@ 0x40
 80013b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a3a      	ldr	r2, [r7, #32]
 80013c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4a4d      	ldr	r2, [pc, #308]	@ (8001510 <HAL_I2C_Mem_Write+0x1f0>)
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013de:	88f8      	ldrh	r0, [r7, #6]
 80013e0:	893a      	ldrh	r2, [r7, #8]
 80013e2:	8979      	ldrh	r1, [r7, #10]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4603      	mov	r3, r0
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f9be 	bl	8001770 <I2C_RequestMemoryWrite>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d052      	beq.n	80014a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e081      	b.n	8001502 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fb64 	bl	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00d      	beq.n	800142a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	2b04      	cmp	r3, #4
 8001414:	d107      	bne.n	8001426 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06b      	b.n	8001502 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001450:	b29b      	uxth	r3, r3
 8001452:	3b01      	subs	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b04      	cmp	r3, #4
 8001466:	d11b      	bne.n	80014a0 <HAL_I2C_Mem_Write+0x180>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	d017      	beq.n	80014a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1aa      	bne.n	80013fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fb57 	bl	8001b60 <I2C_WaitOnBTFFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00d      	beq.n	80014d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d107      	bne.n	80014d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e016      	b.n	8001502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2220      	movs	r2, #32
 80014e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001500:	2302      	movs	r3, #2
  }
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	00100002 	.word	0x00100002
 8001510:	ffff0000 	.word	0xffff0000

08001514 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	460b      	mov	r3, r1
 8001522:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fb06 	bl	8000b34 <HAL_GetTick>
 8001528:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b20      	cmp	r3, #32
 8001538:	f040 8111 	bne.w	800175e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2319      	movs	r3, #25
 8001542:	2201      	movs	r2, #1
 8001544:	4988      	ldr	r1, [pc, #544]	@ (8001768 <HAL_I2C_IsDeviceReady+0x254>)
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9a8 	bl	800189c <I2C_WaitOnFlagUntilTimeout>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001552:	2302      	movs	r3, #2
 8001554:	e104      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_I2C_IsDeviceReady+0x50>
 8001560:	2302      	movs	r3, #2
 8001562:	e0fd      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x24c>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d007      	beq.n	800158a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001598:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2224      	movs	r2, #36	@ 0x24
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a70      	ldr	r2, [pc, #448]	@ (800176c <HAL_I2C_IsDeviceReady+0x258>)
 80015ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f966 	bl	800189c <I2C_WaitOnFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00d      	beq.n	80015f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e4:	d103      	bne.n	80015ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0b6      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001600:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fa97 	bl	8000b34 <HAL_GetTick>
 8001606:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b02      	cmp	r3, #2
 8001614:	bf0c      	ite	eq
 8001616:	2301      	moveq	r3, #1
 8001618:	2300      	movne	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001636:	e025      	b.n	8001684 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001638:	f7ff fa7c 	bl	8000b34 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d302      	bcc.n	800164e <HAL_I2C_IsDeviceReady+0x13a>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	22a0      	movs	r2, #160	@ 0xa0
 8001652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b02      	cmp	r3, #2
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2ba0      	cmp	r3, #160	@ 0xa0
 800168e:	d005      	beq.n	800169c <HAL_I2C_IsDeviceReady+0x188>
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_I2C_IsDeviceReady+0x188>
 8001696:	7dbb      	ldrb	r3, [r7, #22]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0cd      	beq.n	8001638 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2220      	movs	r2, #32
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d129      	bne.n	8001706 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2319      	movs	r3, #25
 80016de:	2201      	movs	r2, #1
 80016e0:	4921      	ldr	r1, [pc, #132]	@ (8001768 <HAL_I2C_IsDeviceReady+0x254>)
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f8da 	bl	800189c <I2C_WaitOnFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e036      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2220      	movs	r2, #32
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e02c      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001714:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800171e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2319      	movs	r3, #25
 8001726:	2201      	movs	r2, #1
 8001728:	490f      	ldr	r1, [pc, #60]	@ (8001768 <HAL_I2C_IsDeviceReady+0x254>)
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f8b6 	bl	800189c <I2C_WaitOnFlagUntilTimeout>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e012      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3301      	adds	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	f4ff af32 	bcc.w	80015ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2220      	movs	r2, #32
 800174e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800175e:	2302      	movs	r3, #2
  }
}
 8001760:	4618      	mov	r0, r3
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	00100002 	.word	0x00100002
 800176c:	ffff0000 	.word	0xffff0000

08001770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af02      	add	r7, sp, #8
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4603      	mov	r3, r0
 8001780:	817b      	strh	r3, [r7, #10]
 8001782:	460b      	mov	r3, r1
 8001784:	813b      	strh	r3, [r7, #8]
 8001786:	4613      	mov	r3, r2
 8001788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f878 	bl	800189c <I2C_WaitOnFlagUntilTimeout>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017c0:	d103      	bne.n	80017ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e05f      	b.n	800188e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ce:	897b      	ldrh	r3, [r7, #10]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	492d      	ldr	r1, [pc, #180]	@ (8001898 <I2C_RequestMemoryWrite+0x128>)
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f8d3 	bl	8001990 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e04c      	b.n	800188e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f95e 	bl	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2b04      	cmp	r3, #4
 8001820:	d107      	bne.n	8001832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e02b      	b.n	800188e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800183c:	893b      	ldrh	r3, [r7, #8]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	e021      	b.n	800188c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001848:	893b      	ldrh	r3, [r7, #8]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f938 	bl	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b04      	cmp	r3, #4
 800186c:	d107      	bne.n	800187e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e005      	b.n	800188e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001882:	893b      	ldrh	r3, [r7, #8]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	00010002 	.word	0x00010002

0800189c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ac:	e048      	b.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d044      	beq.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b6:	f7ff f93d 	bl	8000b34 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d302      	bcc.n	80018cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d139      	bne.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d10d      	bne.n	80018f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	43da      	mvns	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4013      	ands	r3, r2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	e00c      	b.n	800190c <I2C_WaitOnFlagUntilTimeout+0x70>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	43da      	mvns	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4013      	ands	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	429a      	cmp	r2, r3
 8001910:	d116      	bne.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f043 0220 	orr.w	r2, r3, #32
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e023      	b.n	8001988 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10d      	bne.n	8001966 <I2C_WaitOnFlagUntilTimeout+0xca>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	43da      	mvns	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4013      	ands	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	e00c      	b.n	8001980 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	43da      	mvns	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4013      	ands	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	429a      	cmp	r2, r3
 8001984:	d093      	beq.n	80018ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800199e:	e071      	b.n	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ae:	d123      	bne.n	80019f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f043 0204 	orr.w	r2, r3, #4
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e067      	b.n	8001ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fe:	d041      	beq.n	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a00:	f7ff f898 	bl	8000b34 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d302      	bcc.n	8001a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d136      	bne.n	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10c      	bne.n	8001a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	e00b      	b.n	8001a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4013      	ands	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e021      	b.n	8001ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d10c      	bne.n	8001aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	e00b      	b.n	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f47f af6d 	bne.w	80019a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001adc:	e034      	b.n	8001b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f886 	bl	8001bf0 <I2C_IsAcknowledgeFailed>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e034      	b.n	8001b58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d028      	beq.n	8001b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af6:	f7ff f81d 	bl	8000b34 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d302      	bcc.n	8001b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d11d      	bne.n	8001b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b16:	2b80      	cmp	r3, #128	@ 0x80
 8001b18:	d016      	beq.n	8001b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e007      	b.n	8001b58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b52:	2b80      	cmp	r3, #128	@ 0x80
 8001b54:	d1c3      	bne.n	8001ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b6c:	e034      	b.n	8001bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f83e 	bl	8001bf0 <I2C_IsAcknowledgeFailed>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e034      	b.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d028      	beq.n	8001bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7fe ffd5 	bl	8000b34 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11d      	bne.n	8001bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d016      	beq.n	8001bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e007      	b.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d1c3      	bne.n	8001b6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c06:	d11b      	bne.n	8001c40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f043 0204 	orr.w	r2, r3, #4
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e267      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d075      	beq.n	8001d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c6e:	4b88      	ldr	r3, [pc, #544]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d00c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7a:	4b85      	ldr	r3, [pc, #532]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d112      	bne.n	8001cac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b82      	ldr	r3, [pc, #520]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c92:	d10b      	bne.n	8001cac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	4b7e      	ldr	r3, [pc, #504]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d05b      	beq.n	8001d58 <HAL_RCC_OscConfig+0x108>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d157      	bne.n	8001d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e242      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x74>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a75      	ldr	r2, [pc, #468]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xb0>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x98>
 8001cce:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b6d      	ldr	r3, [pc, #436]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6c      	ldr	r2, [pc, #432]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xb0>
 8001ce8:	4b69      	ldr	r3, [pc, #420]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a68      	ldr	r2, [pc, #416]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b66      	ldr	r3, [pc, #408]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a65      	ldr	r2, [pc, #404]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe ff14 	bl	8000b34 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe ff10 	bl	8000b34 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e207      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b5b      	ldr	r3, [pc, #364]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xc0>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe ff00 	bl	8000b34 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7fe fefc 	bl	8000b34 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	@ 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1f3      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b51      	ldr	r3, [pc, #324]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0xe8>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d66:	4b4a      	ldr	r3, [pc, #296]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d72:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b44      	ldr	r3, [pc, #272]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b41      	ldr	r3, [pc, #260]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x152>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1c7      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b3b      	ldr	r3, [pc, #236]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4937      	ldr	r1, [pc, #220]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <HAL_RCC_OscConfig+0x244>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7fe feb5 	bl	8000b34 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7fe feb1 	bl	8000b34 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1a8      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4925      	ldr	r1, [pc, #148]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <HAL_RCC_OscConfig+0x244>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fe94 	bl	8000b34 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7fe fe90 	bl	8000b34 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e187      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d036      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_RCC_OscConfig+0x248>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7fe fe74 	bl	8000b34 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7fe fe70 	bl	8000b34 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e167      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x200>
 8001e6e:	e01b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_RCC_OscConfig+0x248>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7fe fe5d 	bl	8000b34 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	e00e      	b.n	8001e9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7fe fe59 	bl	8000b34 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d907      	bls.n	8001e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e150      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	42470000 	.word	0x42470000
 8001e98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	4b88      	ldr	r3, [pc, #544]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ea      	bne.n	8001e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 8097 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b81      	ldr	r3, [pc, #516]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b7d      	ldr	r3, [pc, #500]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a7c      	ldr	r2, [pc, #496]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b7a      	ldr	r3, [pc, #488]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b77      	ldr	r3, [pc, #476]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b74      	ldr	r3, [pc, #464]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a73      	ldr	r2, [pc, #460]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7fe fe19 	bl	8000b34 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7fe fe15 	bl	8000b34 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e10c      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b6a      	ldr	r3, [pc, #424]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2ea>
 8001f2c:	4b64      	ldr	r3, [pc, #400]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f30:	4a63      	ldr	r2, [pc, #396]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f38:	e01c      	b.n	8001f74 <HAL_RCC_OscConfig+0x324>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x30c>
 8001f42:	4b5f      	ldr	r3, [pc, #380]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	4a5e      	ldr	r2, [pc, #376]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	4a5b      	ldr	r2, [pc, #364]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0x324>
 8001f5c:	4b58      	ldr	r3, [pc, #352]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a57      	ldr	r2, [pc, #348]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	4b55      	ldr	r3, [pc, #340]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a54      	ldr	r2, [pc, #336]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7fe fdda 	bl	8000b34 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7fe fdd6 	bl	8000b34 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e0cb      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	4b49      	ldr	r3, [pc, #292]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCC_OscConfig+0x334>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fdc4 	bl	8000b34 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7fe fdc0 	bl	8000b34 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0b5      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ee      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd8:	4b39      	ldr	r3, [pc, #228]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	4a38      	ldr	r2, [pc, #224]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001fde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80a1 	beq.w	8002130 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fee:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d05c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d141      	bne.n	8002086 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_RCC_OscConfig+0x478>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe fd94 	bl	8000b34 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe fd90 	bl	8000b34 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e087      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	491b      	ldr	r1, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_RCC_OscConfig+0x478>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7fe fd69 	bl	8000b34 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7fe fd65 	bl	8000b34 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e05c      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x416>
 8002084:	e054      	b.n	8002130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_RCC_OscConfig+0x478>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fd52 	bl	8000b34 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fd4e 	bl	8000b34 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e045      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x444>
 80020b2:	e03d      	b.n	8002130 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e038      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000
 80020c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x4ec>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d028      	beq.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d121      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d11a      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002104:	4293      	cmp	r3, r2
 8002106:	d111      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0cc      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b68      	ldr	r3, [pc, #416]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d90c      	bls.n	800217c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b65      	ldr	r3, [pc, #404]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b63      	ldr	r3, [pc, #396]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b8      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002194:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a58      	ldr	r2, [pc, #352]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800219e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ac:	4b53      	ldr	r3, [pc, #332]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a52      	ldr	r2, [pc, #328]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b50      	ldr	r3, [pc, #320]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	494d      	ldr	r1, [pc, #308]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d044      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b47      	ldr	r3, [pc, #284]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d119      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b3f      	ldr	r3, [pc, #252]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3b      	ldr	r3, [pc, #236]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e067      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4934      	ldr	r1, [pc, #208]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7fe fc80 	bl	8000b34 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe fc7c 	bl	8000b34 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d20c      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b22      	ldr	r3, [pc, #136]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e032      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4916      	ldr	r1, [pc, #88]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b2:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	490e      	ldr	r1, [pc, #56]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022c6:	f000 f821 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	490a      	ldr	r1, [pc, #40]	@ (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a09      	ldr	r2, [pc, #36]	@ (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fbe0 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023c00 	.word	0x40023c00
 80022fc:	40023800 	.word	0x40023800
 8002300:	08002f5c 	.word	0x08002f5c
 8002304:	20000010 	.word	0x20000010
 8002308:	20000014 	.word	0x20000014

0800230c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002310:	b094      	sub	sp, #80	@ 0x50
 8002312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002324:	4b79      	ldr	r3, [pc, #484]	@ (800250c <HAL_RCC_GetSysClockFreq+0x200>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d00d      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x40>
 8002330:	2b08      	cmp	r3, #8
 8002332:	f200 80e1 	bhi.w	80024f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x34>
 800233a:	2b04      	cmp	r3, #4
 800233c:	d003      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x3a>
 800233e:	e0db      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b73      	ldr	r3, [pc, #460]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x204>)
 8002342:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002344:	e0db      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002346:	4b73      	ldr	r3, [pc, #460]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x208>)
 8002348:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800234a:	e0d8      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800234c:	4b6f      	ldr	r3, [pc, #444]	@ (800250c <HAL_RCC_GetSysClockFreq+0x200>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002354:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002356:	4b6d      	ldr	r3, [pc, #436]	@ (800250c <HAL_RCC_GetSysClockFreq+0x200>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d063      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002362:	4b6a      	ldr	r3, [pc, #424]	@ (800250c <HAL_RCC_GetSysClockFreq+0x200>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	099b      	lsrs	r3, r3, #6
 8002368:	2200      	movs	r2, #0
 800236a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800236c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800236e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002374:	633b      	str	r3, [r7, #48]	@ 0x30
 8002376:	2300      	movs	r3, #0
 8002378:	637b      	str	r3, [r7, #52]	@ 0x34
 800237a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800237e:	4622      	mov	r2, r4
 8002380:	462b      	mov	r3, r5
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	0159      	lsls	r1, r3, #5
 800238c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002390:	0150      	lsls	r0, r2, #5
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4621      	mov	r1, r4
 8002398:	1a51      	subs	r1, r2, r1
 800239a:	6139      	str	r1, [r7, #16]
 800239c:	4629      	mov	r1, r5
 800239e:	eb63 0301 	sbc.w	r3, r3, r1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023b0:	4659      	mov	r1, fp
 80023b2:	018b      	lsls	r3, r1, #6
 80023b4:	4651      	mov	r1, sl
 80023b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ba:	4651      	mov	r1, sl
 80023bc:	018a      	lsls	r2, r1, #6
 80023be:	4651      	mov	r1, sl
 80023c0:	ebb2 0801 	subs.w	r8, r2, r1
 80023c4:	4659      	mov	r1, fp
 80023c6:	eb63 0901 	sbc.w	r9, r3, r1
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023de:	4690      	mov	r8, r2
 80023e0:	4699      	mov	r9, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	eb18 0303 	adds.w	r3, r8, r3
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	462b      	mov	r3, r5
 80023ec:	eb49 0303 	adc.w	r3, r9, r3
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023fe:	4629      	mov	r1, r5
 8002400:	024b      	lsls	r3, r1, #9
 8002402:	4621      	mov	r1, r4
 8002404:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002408:	4621      	mov	r1, r4
 800240a:	024a      	lsls	r2, r1, #9
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002412:	2200      	movs	r2, #0
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002418:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800241c:	f7fd fed4 	bl	80001c8 <__aeabi_uldivmod>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4613      	mov	r3, r2
 8002426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002428:	e058      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	4b38      	ldr	r3, [pc, #224]	@ (800250c <HAL_RCC_GetSysClockFreq+0x200>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	2200      	movs	r2, #0
 8002432:	4618      	mov	r0, r3
 8002434:	4611      	mov	r1, r2
 8002436:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002444:	4642      	mov	r2, r8
 8002446:	464b      	mov	r3, r9
 8002448:	f04f 0000 	mov.w	r0, #0
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	0159      	lsls	r1, r3, #5
 8002452:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002456:	0150      	lsls	r0, r2, #5
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4641      	mov	r1, r8
 800245e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002462:	4649      	mov	r1, r9
 8002464:	eb63 0b01 	sbc.w	fp, r3, r1
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002474:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002478:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800247c:	ebb2 040a 	subs.w	r4, r2, sl
 8002480:	eb63 050b 	sbc.w	r5, r3, fp
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	00eb      	lsls	r3, r5, #3
 800248e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002492:	00e2      	lsls	r2, r4, #3
 8002494:	4614      	mov	r4, r2
 8002496:	461d      	mov	r5, r3
 8002498:	4643      	mov	r3, r8
 800249a:	18e3      	adds	r3, r4, r3
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	464b      	mov	r3, r9
 80024a0:	eb45 0303 	adc.w	r3, r5, r3
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024b2:	4629      	mov	r1, r5
 80024b4:	028b      	lsls	r3, r1, #10
 80024b6:	4621      	mov	r1, r4
 80024b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024bc:	4621      	mov	r1, r4
 80024be:	028a      	lsls	r2, r1, #10
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c6:	2200      	movs	r2, #0
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	61fa      	str	r2, [r7, #28]
 80024cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d0:	f7fd fe7a 	bl	80001c8 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4613      	mov	r3, r2
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <HAL_RCC_GetSysClockFreq+0x200>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	3301      	adds	r3, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x204>)
 80024fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002500:	4618      	mov	r0, r3
 8002502:	3750      	adds	r7, #80	@ 0x50
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	00f42400 	.word	0x00f42400
 8002514:	007a1200 	.word	0x007a1200

08002518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_RCC_GetHCLKFreq+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000010 	.word	0x20000010

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff0 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	@ (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	08002f6c 	.word	0x08002f6c

08002558 <std>:
 8002558:	2300      	movs	r3, #0
 800255a:	b510      	push	{r4, lr}
 800255c:	4604      	mov	r4, r0
 800255e:	e9c0 3300 	strd	r3, r3, [r0]
 8002562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002566:	6083      	str	r3, [r0, #8]
 8002568:	8181      	strh	r1, [r0, #12]
 800256a:	6643      	str	r3, [r0, #100]	@ 0x64
 800256c:	81c2      	strh	r2, [r0, #14]
 800256e:	6183      	str	r3, [r0, #24]
 8002570:	4619      	mov	r1, r3
 8002572:	2208      	movs	r2, #8
 8002574:	305c      	adds	r0, #92	@ 0x5c
 8002576:	f000 f9e7 	bl	8002948 <memset>
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <std+0x58>)
 800257c:	6263      	str	r3, [r4, #36]	@ 0x24
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <std+0x5c>)
 8002580:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <std+0x60>)
 8002584:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <std+0x64>)
 8002588:	6323      	str	r3, [r4, #48]	@ 0x30
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <std+0x68>)
 800258c:	6224      	str	r4, [r4, #32]
 800258e:	429c      	cmp	r4, r3
 8002590:	d006      	beq.n	80025a0 <std+0x48>
 8002592:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002596:	4294      	cmp	r4, r2
 8002598:	d002      	beq.n	80025a0 <std+0x48>
 800259a:	33d0      	adds	r3, #208	@ 0xd0
 800259c:	429c      	cmp	r4, r3
 800259e:	d105      	bne.n	80025ac <std+0x54>
 80025a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a8:	f000 ba46 	b.w	8002a38 <__retarget_lock_init_recursive>
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	bf00      	nop
 80025b0:	08002799 	.word	0x08002799
 80025b4:	080027bb 	.word	0x080027bb
 80025b8:	080027f3 	.word	0x080027f3
 80025bc:	08002817 	.word	0x08002817
 80025c0:	200000f4 	.word	0x200000f4

080025c4 <stdio_exit_handler>:
 80025c4:	4a02      	ldr	r2, [pc, #8]	@ (80025d0 <stdio_exit_handler+0xc>)
 80025c6:	4903      	ldr	r1, [pc, #12]	@ (80025d4 <stdio_exit_handler+0x10>)
 80025c8:	4803      	ldr	r0, [pc, #12]	@ (80025d8 <stdio_exit_handler+0x14>)
 80025ca:	f000 b869 	b.w	80026a0 <_fwalk_sglue>
 80025ce:	bf00      	nop
 80025d0:	2000001c 	.word	0x2000001c
 80025d4:	08002d39 	.word	0x08002d39
 80025d8:	2000002c 	.word	0x2000002c

080025dc <cleanup_stdio>:
 80025dc:	6841      	ldr	r1, [r0, #4]
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <cleanup_stdio+0x34>)
 80025e0:	4299      	cmp	r1, r3
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4604      	mov	r4, r0
 80025e6:	d001      	beq.n	80025ec <cleanup_stdio+0x10>
 80025e8:	f000 fba6 	bl	8002d38 <_fflush_r>
 80025ec:	68a1      	ldr	r1, [r4, #8]
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <cleanup_stdio+0x38>)
 80025f0:	4299      	cmp	r1, r3
 80025f2:	d002      	beq.n	80025fa <cleanup_stdio+0x1e>
 80025f4:	4620      	mov	r0, r4
 80025f6:	f000 fb9f 	bl	8002d38 <_fflush_r>
 80025fa:	68e1      	ldr	r1, [r4, #12]
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <cleanup_stdio+0x3c>)
 80025fe:	4299      	cmp	r1, r3
 8002600:	d004      	beq.n	800260c <cleanup_stdio+0x30>
 8002602:	4620      	mov	r0, r4
 8002604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002608:	f000 bb96 	b.w	8002d38 <_fflush_r>
 800260c:	bd10      	pop	{r4, pc}
 800260e:	bf00      	nop
 8002610:	200000f4 	.word	0x200000f4
 8002614:	2000015c 	.word	0x2000015c
 8002618:	200001c4 	.word	0x200001c4

0800261c <global_stdio_init.part.0>:
 800261c:	b510      	push	{r4, lr}
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <global_stdio_init.part.0+0x30>)
 8002620:	4c0b      	ldr	r4, [pc, #44]	@ (8002650 <global_stdio_init.part.0+0x34>)
 8002622:	4a0c      	ldr	r2, [pc, #48]	@ (8002654 <global_stdio_init.part.0+0x38>)
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4620      	mov	r0, r4
 8002628:	2200      	movs	r2, #0
 800262a:	2104      	movs	r1, #4
 800262c:	f7ff ff94 	bl	8002558 <std>
 8002630:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002634:	2201      	movs	r2, #1
 8002636:	2109      	movs	r1, #9
 8002638:	f7ff ff8e 	bl	8002558 <std>
 800263c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002640:	2202      	movs	r2, #2
 8002642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002646:	2112      	movs	r1, #18
 8002648:	f7ff bf86 	b.w	8002558 <std>
 800264c:	2000022c 	.word	0x2000022c
 8002650:	200000f4 	.word	0x200000f4
 8002654:	080025c5 	.word	0x080025c5

08002658 <__sfp_lock_acquire>:
 8002658:	4801      	ldr	r0, [pc, #4]	@ (8002660 <__sfp_lock_acquire+0x8>)
 800265a:	f000 b9ee 	b.w	8002a3a <__retarget_lock_acquire_recursive>
 800265e:	bf00      	nop
 8002660:	20000235 	.word	0x20000235

08002664 <__sfp_lock_release>:
 8002664:	4801      	ldr	r0, [pc, #4]	@ (800266c <__sfp_lock_release+0x8>)
 8002666:	f000 b9e9 	b.w	8002a3c <__retarget_lock_release_recursive>
 800266a:	bf00      	nop
 800266c:	20000235 	.word	0x20000235

08002670 <__sinit>:
 8002670:	b510      	push	{r4, lr}
 8002672:	4604      	mov	r4, r0
 8002674:	f7ff fff0 	bl	8002658 <__sfp_lock_acquire>
 8002678:	6a23      	ldr	r3, [r4, #32]
 800267a:	b11b      	cbz	r3, 8002684 <__sinit+0x14>
 800267c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002680:	f7ff bff0 	b.w	8002664 <__sfp_lock_release>
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__sinit+0x28>)
 8002686:	6223      	str	r3, [r4, #32]
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <__sinit+0x2c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f5      	bne.n	800267c <__sinit+0xc>
 8002690:	f7ff ffc4 	bl	800261c <global_stdio_init.part.0>
 8002694:	e7f2      	b.n	800267c <__sinit+0xc>
 8002696:	bf00      	nop
 8002698:	080025dd 	.word	0x080025dd
 800269c:	2000022c 	.word	0x2000022c

080026a0 <_fwalk_sglue>:
 80026a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026a4:	4607      	mov	r7, r0
 80026a6:	4688      	mov	r8, r1
 80026a8:	4614      	mov	r4, r2
 80026aa:	2600      	movs	r6, #0
 80026ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026b0:	f1b9 0901 	subs.w	r9, r9, #1
 80026b4:	d505      	bpl.n	80026c2 <_fwalk_sglue+0x22>
 80026b6:	6824      	ldr	r4, [r4, #0]
 80026b8:	2c00      	cmp	r4, #0
 80026ba:	d1f7      	bne.n	80026ac <_fwalk_sglue+0xc>
 80026bc:	4630      	mov	r0, r6
 80026be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026c2:	89ab      	ldrh	r3, [r5, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d907      	bls.n	80026d8 <_fwalk_sglue+0x38>
 80026c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026cc:	3301      	adds	r3, #1
 80026ce:	d003      	beq.n	80026d8 <_fwalk_sglue+0x38>
 80026d0:	4629      	mov	r1, r5
 80026d2:	4638      	mov	r0, r7
 80026d4:	47c0      	blx	r8
 80026d6:	4306      	orrs	r6, r0
 80026d8:	3568      	adds	r5, #104	@ 0x68
 80026da:	e7e9      	b.n	80026b0 <_fwalk_sglue+0x10>

080026dc <_puts_r>:
 80026dc:	6a03      	ldr	r3, [r0, #32]
 80026de:	b570      	push	{r4, r5, r6, lr}
 80026e0:	6884      	ldr	r4, [r0, #8]
 80026e2:	4605      	mov	r5, r0
 80026e4:	460e      	mov	r6, r1
 80026e6:	b90b      	cbnz	r3, 80026ec <_puts_r+0x10>
 80026e8:	f7ff ffc2 	bl	8002670 <__sinit>
 80026ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026ee:	07db      	lsls	r3, r3, #31
 80026f0:	d405      	bmi.n	80026fe <_puts_r+0x22>
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	0598      	lsls	r0, r3, #22
 80026f6:	d402      	bmi.n	80026fe <_puts_r+0x22>
 80026f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026fa:	f000 f99e 	bl	8002a3a <__retarget_lock_acquire_recursive>
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	0719      	lsls	r1, r3, #28
 8002702:	d502      	bpl.n	800270a <_puts_r+0x2e>
 8002704:	6923      	ldr	r3, [r4, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d135      	bne.n	8002776 <_puts_r+0x9a>
 800270a:	4621      	mov	r1, r4
 800270c:	4628      	mov	r0, r5
 800270e:	f000 f8c5 	bl	800289c <__swsetup_r>
 8002712:	b380      	cbz	r0, 8002776 <_puts_r+0x9a>
 8002714:	f04f 35ff 	mov.w	r5, #4294967295
 8002718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800271a:	07da      	lsls	r2, r3, #31
 800271c:	d405      	bmi.n	800272a <_puts_r+0x4e>
 800271e:	89a3      	ldrh	r3, [r4, #12]
 8002720:	059b      	lsls	r3, r3, #22
 8002722:	d402      	bmi.n	800272a <_puts_r+0x4e>
 8002724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002726:	f000 f989 	bl	8002a3c <__retarget_lock_release_recursive>
 800272a:	4628      	mov	r0, r5
 800272c:	bd70      	pop	{r4, r5, r6, pc}
 800272e:	2b00      	cmp	r3, #0
 8002730:	da04      	bge.n	800273c <_puts_r+0x60>
 8002732:	69a2      	ldr	r2, [r4, #24]
 8002734:	429a      	cmp	r2, r3
 8002736:	dc17      	bgt.n	8002768 <_puts_r+0x8c>
 8002738:	290a      	cmp	r1, #10
 800273a:	d015      	beq.n	8002768 <_puts_r+0x8c>
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	6022      	str	r2, [r4, #0]
 8002742:	7019      	strb	r1, [r3, #0]
 8002744:	68a3      	ldr	r3, [r4, #8]
 8002746:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800274a:	3b01      	subs	r3, #1
 800274c:	60a3      	str	r3, [r4, #8]
 800274e:	2900      	cmp	r1, #0
 8002750:	d1ed      	bne.n	800272e <_puts_r+0x52>
 8002752:	2b00      	cmp	r3, #0
 8002754:	da11      	bge.n	800277a <_puts_r+0x9e>
 8002756:	4622      	mov	r2, r4
 8002758:	210a      	movs	r1, #10
 800275a:	4628      	mov	r0, r5
 800275c:	f000 f85f 	bl	800281e <__swbuf_r>
 8002760:	3001      	adds	r0, #1
 8002762:	d0d7      	beq.n	8002714 <_puts_r+0x38>
 8002764:	250a      	movs	r5, #10
 8002766:	e7d7      	b.n	8002718 <_puts_r+0x3c>
 8002768:	4622      	mov	r2, r4
 800276a:	4628      	mov	r0, r5
 800276c:	f000 f857 	bl	800281e <__swbuf_r>
 8002770:	3001      	adds	r0, #1
 8002772:	d1e7      	bne.n	8002744 <_puts_r+0x68>
 8002774:	e7ce      	b.n	8002714 <_puts_r+0x38>
 8002776:	3e01      	subs	r6, #1
 8002778:	e7e4      	b.n	8002744 <_puts_r+0x68>
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	6022      	str	r2, [r4, #0]
 8002780:	220a      	movs	r2, #10
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e7ee      	b.n	8002764 <_puts_r+0x88>
	...

08002788 <puts>:
 8002788:	4b02      	ldr	r3, [pc, #8]	@ (8002794 <puts+0xc>)
 800278a:	4601      	mov	r1, r0
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	f7ff bfa5 	b.w	80026dc <_puts_r>
 8002792:	bf00      	nop
 8002794:	20000028 	.word	0x20000028

08002798 <__sread>:
 8002798:	b510      	push	{r4, lr}
 800279a:	460c      	mov	r4, r1
 800279c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a0:	f000 f8fc 	bl	800299c <_read_r>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	bfab      	itete	ge
 80027a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80027aa:	89a3      	ldrhlt	r3, [r4, #12]
 80027ac:	181b      	addge	r3, r3, r0
 80027ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027b2:	bfac      	ite	ge
 80027b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027b6:	81a3      	strhlt	r3, [r4, #12]
 80027b8:	bd10      	pop	{r4, pc}

080027ba <__swrite>:
 80027ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027be:	461f      	mov	r7, r3
 80027c0:	898b      	ldrh	r3, [r1, #12]
 80027c2:	05db      	lsls	r3, r3, #23
 80027c4:	4605      	mov	r5, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	4616      	mov	r6, r2
 80027ca:	d505      	bpl.n	80027d8 <__swrite+0x1e>
 80027cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d0:	2302      	movs	r3, #2
 80027d2:	2200      	movs	r2, #0
 80027d4:	f000 f8d0 	bl	8002978 <_lseek_r>
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027e2:	81a3      	strh	r3, [r4, #12]
 80027e4:	4632      	mov	r2, r6
 80027e6:	463b      	mov	r3, r7
 80027e8:	4628      	mov	r0, r5
 80027ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027ee:	f000 b8e7 	b.w	80029c0 <_write_r>

080027f2 <__sseek>:
 80027f2:	b510      	push	{r4, lr}
 80027f4:	460c      	mov	r4, r1
 80027f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027fa:	f000 f8bd 	bl	8002978 <_lseek_r>
 80027fe:	1c43      	adds	r3, r0, #1
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	bf15      	itete	ne
 8002804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800280a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800280e:	81a3      	strheq	r3, [r4, #12]
 8002810:	bf18      	it	ne
 8002812:	81a3      	strhne	r3, [r4, #12]
 8002814:	bd10      	pop	{r4, pc}

08002816 <__sclose>:
 8002816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800281a:	f000 b89d 	b.w	8002958 <_close_r>

0800281e <__swbuf_r>:
 800281e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002820:	460e      	mov	r6, r1
 8002822:	4614      	mov	r4, r2
 8002824:	4605      	mov	r5, r0
 8002826:	b118      	cbz	r0, 8002830 <__swbuf_r+0x12>
 8002828:	6a03      	ldr	r3, [r0, #32]
 800282a:	b90b      	cbnz	r3, 8002830 <__swbuf_r+0x12>
 800282c:	f7ff ff20 	bl	8002670 <__sinit>
 8002830:	69a3      	ldr	r3, [r4, #24]
 8002832:	60a3      	str	r3, [r4, #8]
 8002834:	89a3      	ldrh	r3, [r4, #12]
 8002836:	071a      	lsls	r2, r3, #28
 8002838:	d501      	bpl.n	800283e <__swbuf_r+0x20>
 800283a:	6923      	ldr	r3, [r4, #16]
 800283c:	b943      	cbnz	r3, 8002850 <__swbuf_r+0x32>
 800283e:	4621      	mov	r1, r4
 8002840:	4628      	mov	r0, r5
 8002842:	f000 f82b 	bl	800289c <__swsetup_r>
 8002846:	b118      	cbz	r0, 8002850 <__swbuf_r+0x32>
 8002848:	f04f 37ff 	mov.w	r7, #4294967295
 800284c:	4638      	mov	r0, r7
 800284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	6922      	ldr	r2, [r4, #16]
 8002854:	1a98      	subs	r0, r3, r2
 8002856:	6963      	ldr	r3, [r4, #20]
 8002858:	b2f6      	uxtb	r6, r6
 800285a:	4283      	cmp	r3, r0
 800285c:	4637      	mov	r7, r6
 800285e:	dc05      	bgt.n	800286c <__swbuf_r+0x4e>
 8002860:	4621      	mov	r1, r4
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fa68 	bl	8002d38 <_fflush_r>
 8002868:	2800      	cmp	r0, #0
 800286a:	d1ed      	bne.n	8002848 <__swbuf_r+0x2a>
 800286c:	68a3      	ldr	r3, [r4, #8]
 800286e:	3b01      	subs	r3, #1
 8002870:	60a3      	str	r3, [r4, #8]
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	6022      	str	r2, [r4, #0]
 8002878:	701e      	strb	r6, [r3, #0]
 800287a:	6962      	ldr	r2, [r4, #20]
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	429a      	cmp	r2, r3
 8002880:	d004      	beq.n	800288c <__swbuf_r+0x6e>
 8002882:	89a3      	ldrh	r3, [r4, #12]
 8002884:	07db      	lsls	r3, r3, #31
 8002886:	d5e1      	bpl.n	800284c <__swbuf_r+0x2e>
 8002888:	2e0a      	cmp	r6, #10
 800288a:	d1df      	bne.n	800284c <__swbuf_r+0x2e>
 800288c:	4621      	mov	r1, r4
 800288e:	4628      	mov	r0, r5
 8002890:	f000 fa52 	bl	8002d38 <_fflush_r>
 8002894:	2800      	cmp	r0, #0
 8002896:	d0d9      	beq.n	800284c <__swbuf_r+0x2e>
 8002898:	e7d6      	b.n	8002848 <__swbuf_r+0x2a>
	...

0800289c <__swsetup_r>:
 800289c:	b538      	push	{r3, r4, r5, lr}
 800289e:	4b29      	ldr	r3, [pc, #164]	@ (8002944 <__swsetup_r+0xa8>)
 80028a0:	4605      	mov	r5, r0
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	460c      	mov	r4, r1
 80028a6:	b118      	cbz	r0, 80028b0 <__swsetup_r+0x14>
 80028a8:	6a03      	ldr	r3, [r0, #32]
 80028aa:	b90b      	cbnz	r3, 80028b0 <__swsetup_r+0x14>
 80028ac:	f7ff fee0 	bl	8002670 <__sinit>
 80028b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028b4:	0719      	lsls	r1, r3, #28
 80028b6:	d422      	bmi.n	80028fe <__swsetup_r+0x62>
 80028b8:	06da      	lsls	r2, r3, #27
 80028ba:	d407      	bmi.n	80028cc <__swsetup_r+0x30>
 80028bc:	2209      	movs	r2, #9
 80028be:	602a      	str	r2, [r5, #0]
 80028c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c4:	81a3      	strh	r3, [r4, #12]
 80028c6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ca:	e033      	b.n	8002934 <__swsetup_r+0x98>
 80028cc:	0758      	lsls	r0, r3, #29
 80028ce:	d512      	bpl.n	80028f6 <__swsetup_r+0x5a>
 80028d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80028d2:	b141      	cbz	r1, 80028e6 <__swsetup_r+0x4a>
 80028d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80028d8:	4299      	cmp	r1, r3
 80028da:	d002      	beq.n	80028e2 <__swsetup_r+0x46>
 80028dc:	4628      	mov	r0, r5
 80028de:	f000 f8af 	bl	8002a40 <_free_r>
 80028e2:	2300      	movs	r3, #0
 80028e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80028ec:	81a3      	strh	r3, [r4, #12]
 80028ee:	2300      	movs	r3, #0
 80028f0:	6063      	str	r3, [r4, #4]
 80028f2:	6923      	ldr	r3, [r4, #16]
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	89a3      	ldrh	r3, [r4, #12]
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	81a3      	strh	r3, [r4, #12]
 80028fe:	6923      	ldr	r3, [r4, #16]
 8002900:	b94b      	cbnz	r3, 8002916 <__swsetup_r+0x7a>
 8002902:	89a3      	ldrh	r3, [r4, #12]
 8002904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800290c:	d003      	beq.n	8002916 <__swsetup_r+0x7a>
 800290e:	4621      	mov	r1, r4
 8002910:	4628      	mov	r0, r5
 8002912:	f000 fa5f 	bl	8002dd4 <__smakebuf_r>
 8002916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800291a:	f013 0201 	ands.w	r2, r3, #1
 800291e:	d00a      	beq.n	8002936 <__swsetup_r+0x9a>
 8002920:	2200      	movs	r2, #0
 8002922:	60a2      	str	r2, [r4, #8]
 8002924:	6962      	ldr	r2, [r4, #20]
 8002926:	4252      	negs	r2, r2
 8002928:	61a2      	str	r2, [r4, #24]
 800292a:	6922      	ldr	r2, [r4, #16]
 800292c:	b942      	cbnz	r2, 8002940 <__swsetup_r+0xa4>
 800292e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002932:	d1c5      	bne.n	80028c0 <__swsetup_r+0x24>
 8002934:	bd38      	pop	{r3, r4, r5, pc}
 8002936:	0799      	lsls	r1, r3, #30
 8002938:	bf58      	it	pl
 800293a:	6962      	ldrpl	r2, [r4, #20]
 800293c:	60a2      	str	r2, [r4, #8]
 800293e:	e7f4      	b.n	800292a <__swsetup_r+0x8e>
 8002940:	2000      	movs	r0, #0
 8002942:	e7f7      	b.n	8002934 <__swsetup_r+0x98>
 8002944:	20000028 	.word	0x20000028

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <_close_r>:
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	4d06      	ldr	r5, [pc, #24]	@ (8002974 <_close_r+0x1c>)
 800295c:	2300      	movs	r3, #0
 800295e:	4604      	mov	r4, r0
 8002960:	4608      	mov	r0, r1
 8002962:	602b      	str	r3, [r5, #0]
 8002964:	f7fd ffda 	bl	800091c <_close>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_close_r+0x1a>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b103      	cbz	r3, 8002972 <_close_r+0x1a>
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	20000230 	.word	0x20000230

08002978 <_lseek_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4d07      	ldr	r5, [pc, #28]	@ (8002998 <_lseek_r+0x20>)
 800297c:	4604      	mov	r4, r0
 800297e:	4608      	mov	r0, r1
 8002980:	4611      	mov	r1, r2
 8002982:	2200      	movs	r2, #0
 8002984:	602a      	str	r2, [r5, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	f7fd ffef 	bl	800096a <_lseek>
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	d102      	bne.n	8002996 <_lseek_r+0x1e>
 8002990:	682b      	ldr	r3, [r5, #0]
 8002992:	b103      	cbz	r3, 8002996 <_lseek_r+0x1e>
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	20000230 	.word	0x20000230

0800299c <_read_r>:
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	4d07      	ldr	r5, [pc, #28]	@ (80029bc <_read_r+0x20>)
 80029a0:	4604      	mov	r4, r0
 80029a2:	4608      	mov	r0, r1
 80029a4:	4611      	mov	r1, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	602a      	str	r2, [r5, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f7fd ff99 	bl	80008e2 <_read>
 80029b0:	1c43      	adds	r3, r0, #1
 80029b2:	d102      	bne.n	80029ba <_read_r+0x1e>
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	b103      	cbz	r3, 80029ba <_read_r+0x1e>
 80029b8:	6023      	str	r3, [r4, #0]
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
 80029bc:	20000230 	.word	0x20000230

080029c0 <_write_r>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4d07      	ldr	r5, [pc, #28]	@ (80029e0 <_write_r+0x20>)
 80029c4:	4604      	mov	r4, r0
 80029c6:	4608      	mov	r0, r1
 80029c8:	4611      	mov	r1, r2
 80029ca:	2200      	movs	r2, #0
 80029cc:	602a      	str	r2, [r5, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7fd fec6 	bl	8000760 <_write>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d102      	bne.n	80029de <_write_r+0x1e>
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	b103      	cbz	r3, 80029de <_write_r+0x1e>
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	20000230 	.word	0x20000230

080029e4 <__errno>:
 80029e4:	4b01      	ldr	r3, [pc, #4]	@ (80029ec <__errno+0x8>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000028 	.word	0x20000028

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002a28 <__libc_init_array+0x38>)
 80029f4:	4c0d      	ldr	r4, [pc, #52]	@ (8002a2c <__libc_init_array+0x3c>)
 80029f6:	1b64      	subs	r4, r4, r5
 80029f8:	10a4      	asrs	r4, r4, #2
 80029fa:	2600      	movs	r6, #0
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	4d0b      	ldr	r5, [pc, #44]	@ (8002a30 <__libc_init_array+0x40>)
 8002a02:	4c0c      	ldr	r4, [pc, #48]	@ (8002a34 <__libc_init_array+0x44>)
 8002a04:	f000 fa54 	bl	8002eb0 <_init>
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08002f7c 	.word	0x08002f7c
 8002a2c:	08002f7c 	.word	0x08002f7c
 8002a30:	08002f7c 	.word	0x08002f7c
 8002a34:	08002f80 	.word	0x08002f80

08002a38 <__retarget_lock_init_recursive>:
 8002a38:	4770      	bx	lr

08002a3a <__retarget_lock_acquire_recursive>:
 8002a3a:	4770      	bx	lr

08002a3c <__retarget_lock_release_recursive>:
 8002a3c:	4770      	bx	lr
	...

08002a40 <_free_r>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4605      	mov	r5, r0
 8002a44:	2900      	cmp	r1, #0
 8002a46:	d041      	beq.n	8002acc <_free_r+0x8c>
 8002a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a4c:	1f0c      	subs	r4, r1, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bfb8      	it	lt
 8002a52:	18e4      	addlt	r4, r4, r3
 8002a54:	f000 f8e0 	bl	8002c18 <__malloc_lock>
 8002a58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad0 <_free_r+0x90>)
 8002a5a:	6813      	ldr	r3, [r2, #0]
 8002a5c:	b933      	cbnz	r3, 8002a6c <_free_r+0x2c>
 8002a5e:	6063      	str	r3, [r4, #4]
 8002a60:	6014      	str	r4, [r2, #0]
 8002a62:	4628      	mov	r0, r5
 8002a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a68:	f000 b8dc 	b.w	8002c24 <__malloc_unlock>
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	d908      	bls.n	8002a82 <_free_r+0x42>
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	1821      	adds	r1, r4, r0
 8002a74:	428b      	cmp	r3, r1
 8002a76:	bf01      	itttt	eq
 8002a78:	6819      	ldreq	r1, [r3, #0]
 8002a7a:	685b      	ldreq	r3, [r3, #4]
 8002a7c:	1809      	addeq	r1, r1, r0
 8002a7e:	6021      	streq	r1, [r4, #0]
 8002a80:	e7ed      	b.n	8002a5e <_free_r+0x1e>
 8002a82:	461a      	mov	r2, r3
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	b10b      	cbz	r3, 8002a8c <_free_r+0x4c>
 8002a88:	42a3      	cmp	r3, r4
 8002a8a:	d9fa      	bls.n	8002a82 <_free_r+0x42>
 8002a8c:	6811      	ldr	r1, [r2, #0]
 8002a8e:	1850      	adds	r0, r2, r1
 8002a90:	42a0      	cmp	r0, r4
 8002a92:	d10b      	bne.n	8002aac <_free_r+0x6c>
 8002a94:	6820      	ldr	r0, [r4, #0]
 8002a96:	4401      	add	r1, r0
 8002a98:	1850      	adds	r0, r2, r1
 8002a9a:	4283      	cmp	r3, r0
 8002a9c:	6011      	str	r1, [r2, #0]
 8002a9e:	d1e0      	bne.n	8002a62 <_free_r+0x22>
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	6053      	str	r3, [r2, #4]
 8002aa6:	4408      	add	r0, r1
 8002aa8:	6010      	str	r0, [r2, #0]
 8002aaa:	e7da      	b.n	8002a62 <_free_r+0x22>
 8002aac:	d902      	bls.n	8002ab4 <_free_r+0x74>
 8002aae:	230c      	movs	r3, #12
 8002ab0:	602b      	str	r3, [r5, #0]
 8002ab2:	e7d6      	b.n	8002a62 <_free_r+0x22>
 8002ab4:	6820      	ldr	r0, [r4, #0]
 8002ab6:	1821      	adds	r1, r4, r0
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	bf04      	itt	eq
 8002abc:	6819      	ldreq	r1, [r3, #0]
 8002abe:	685b      	ldreq	r3, [r3, #4]
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	bf04      	itt	eq
 8002ac4:	1809      	addeq	r1, r1, r0
 8002ac6:	6021      	streq	r1, [r4, #0]
 8002ac8:	6054      	str	r4, [r2, #4]
 8002aca:	e7ca      	b.n	8002a62 <_free_r+0x22>
 8002acc:	bd38      	pop	{r3, r4, r5, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000023c 	.word	0x2000023c

08002ad4 <sbrk_aligned>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8002b14 <sbrk_aligned+0x40>)
 8002ad8:	460c      	mov	r4, r1
 8002ada:	6831      	ldr	r1, [r6, #0]
 8002adc:	4605      	mov	r5, r0
 8002ade:	b911      	cbnz	r1, 8002ae6 <sbrk_aligned+0x12>
 8002ae0:	f000 f9d6 	bl	8002e90 <_sbrk_r>
 8002ae4:	6030      	str	r0, [r6, #0]
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	4628      	mov	r0, r5
 8002aea:	f000 f9d1 	bl	8002e90 <_sbrk_r>
 8002aee:	1c43      	adds	r3, r0, #1
 8002af0:	d103      	bne.n	8002afa <sbrk_aligned+0x26>
 8002af2:	f04f 34ff 	mov.w	r4, #4294967295
 8002af6:	4620      	mov	r0, r4
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
 8002afa:	1cc4      	adds	r4, r0, #3
 8002afc:	f024 0403 	bic.w	r4, r4, #3
 8002b00:	42a0      	cmp	r0, r4
 8002b02:	d0f8      	beq.n	8002af6 <sbrk_aligned+0x22>
 8002b04:	1a21      	subs	r1, r4, r0
 8002b06:	4628      	mov	r0, r5
 8002b08:	f000 f9c2 	bl	8002e90 <_sbrk_r>
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	d1f2      	bne.n	8002af6 <sbrk_aligned+0x22>
 8002b10:	e7ef      	b.n	8002af2 <sbrk_aligned+0x1e>
 8002b12:	bf00      	nop
 8002b14:	20000238 	.word	0x20000238

08002b18 <_malloc_r>:
 8002b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b1c:	1ccd      	adds	r5, r1, #3
 8002b1e:	f025 0503 	bic.w	r5, r5, #3
 8002b22:	3508      	adds	r5, #8
 8002b24:	2d0c      	cmp	r5, #12
 8002b26:	bf38      	it	cc
 8002b28:	250c      	movcc	r5, #12
 8002b2a:	2d00      	cmp	r5, #0
 8002b2c:	4606      	mov	r6, r0
 8002b2e:	db01      	blt.n	8002b34 <_malloc_r+0x1c>
 8002b30:	42a9      	cmp	r1, r5
 8002b32:	d904      	bls.n	8002b3e <_malloc_r+0x26>
 8002b34:	230c      	movs	r3, #12
 8002b36:	6033      	str	r3, [r6, #0]
 8002b38:	2000      	movs	r0, #0
 8002b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c14 <_malloc_r+0xfc>
 8002b42:	f000 f869 	bl	8002c18 <__malloc_lock>
 8002b46:	f8d8 3000 	ldr.w	r3, [r8]
 8002b4a:	461c      	mov	r4, r3
 8002b4c:	bb44      	cbnz	r4, 8002ba0 <_malloc_r+0x88>
 8002b4e:	4629      	mov	r1, r5
 8002b50:	4630      	mov	r0, r6
 8002b52:	f7ff ffbf 	bl	8002ad4 <sbrk_aligned>
 8002b56:	1c43      	adds	r3, r0, #1
 8002b58:	4604      	mov	r4, r0
 8002b5a:	d158      	bne.n	8002c0e <_malloc_r+0xf6>
 8002b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8002b60:	4627      	mov	r7, r4
 8002b62:	2f00      	cmp	r7, #0
 8002b64:	d143      	bne.n	8002bee <_malloc_r+0xd6>
 8002b66:	2c00      	cmp	r4, #0
 8002b68:	d04b      	beq.n	8002c02 <_malloc_r+0xea>
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	4639      	mov	r1, r7
 8002b6e:	4630      	mov	r0, r6
 8002b70:	eb04 0903 	add.w	r9, r4, r3
 8002b74:	f000 f98c 	bl	8002e90 <_sbrk_r>
 8002b78:	4581      	cmp	r9, r0
 8002b7a:	d142      	bne.n	8002c02 <_malloc_r+0xea>
 8002b7c:	6821      	ldr	r1, [r4, #0]
 8002b7e:	1a6d      	subs	r5, r5, r1
 8002b80:	4629      	mov	r1, r5
 8002b82:	4630      	mov	r0, r6
 8002b84:	f7ff ffa6 	bl	8002ad4 <sbrk_aligned>
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d03a      	beq.n	8002c02 <_malloc_r+0xea>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	442b      	add	r3, r5
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	f8d8 3000 	ldr.w	r3, [r8]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	bb62      	cbnz	r2, 8002bf4 <_malloc_r+0xdc>
 8002b9a:	f8c8 7000 	str.w	r7, [r8]
 8002b9e:	e00f      	b.n	8002bc0 <_malloc_r+0xa8>
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	1b52      	subs	r2, r2, r5
 8002ba4:	d420      	bmi.n	8002be8 <_malloc_r+0xd0>
 8002ba6:	2a0b      	cmp	r2, #11
 8002ba8:	d917      	bls.n	8002bda <_malloc_r+0xc2>
 8002baa:	1961      	adds	r1, r4, r5
 8002bac:	42a3      	cmp	r3, r4
 8002bae:	6025      	str	r5, [r4, #0]
 8002bb0:	bf18      	it	ne
 8002bb2:	6059      	strne	r1, [r3, #4]
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	bf08      	it	eq
 8002bb8:	f8c8 1000 	streq.w	r1, [r8]
 8002bbc:	5162      	str	r2, [r4, r5]
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	f000 f82f 	bl	8002c24 <__malloc_unlock>
 8002bc6:	f104 000b 	add.w	r0, r4, #11
 8002bca:	1d23      	adds	r3, r4, #4
 8002bcc:	f020 0007 	bic.w	r0, r0, #7
 8002bd0:	1ac2      	subs	r2, r0, r3
 8002bd2:	bf1c      	itt	ne
 8002bd4:	1a1b      	subne	r3, r3, r0
 8002bd6:	50a3      	strne	r3, [r4, r2]
 8002bd8:	e7af      	b.n	8002b3a <_malloc_r+0x22>
 8002bda:	6862      	ldr	r2, [r4, #4]
 8002bdc:	42a3      	cmp	r3, r4
 8002bde:	bf0c      	ite	eq
 8002be0:	f8c8 2000 	streq.w	r2, [r8]
 8002be4:	605a      	strne	r2, [r3, #4]
 8002be6:	e7eb      	b.n	8002bc0 <_malloc_r+0xa8>
 8002be8:	4623      	mov	r3, r4
 8002bea:	6864      	ldr	r4, [r4, #4]
 8002bec:	e7ae      	b.n	8002b4c <_malloc_r+0x34>
 8002bee:	463c      	mov	r4, r7
 8002bf0:	687f      	ldr	r7, [r7, #4]
 8002bf2:	e7b6      	b.n	8002b62 <_malloc_r+0x4a>
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	42a3      	cmp	r3, r4
 8002bfa:	d1fb      	bne.n	8002bf4 <_malloc_r+0xdc>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	6053      	str	r3, [r2, #4]
 8002c00:	e7de      	b.n	8002bc0 <_malloc_r+0xa8>
 8002c02:	230c      	movs	r3, #12
 8002c04:	6033      	str	r3, [r6, #0]
 8002c06:	4630      	mov	r0, r6
 8002c08:	f000 f80c 	bl	8002c24 <__malloc_unlock>
 8002c0c:	e794      	b.n	8002b38 <_malloc_r+0x20>
 8002c0e:	6005      	str	r5, [r0, #0]
 8002c10:	e7d6      	b.n	8002bc0 <_malloc_r+0xa8>
 8002c12:	bf00      	nop
 8002c14:	2000023c 	.word	0x2000023c

08002c18 <__malloc_lock>:
 8002c18:	4801      	ldr	r0, [pc, #4]	@ (8002c20 <__malloc_lock+0x8>)
 8002c1a:	f7ff bf0e 	b.w	8002a3a <__retarget_lock_acquire_recursive>
 8002c1e:	bf00      	nop
 8002c20:	20000234 	.word	0x20000234

08002c24 <__malloc_unlock>:
 8002c24:	4801      	ldr	r0, [pc, #4]	@ (8002c2c <__malloc_unlock+0x8>)
 8002c26:	f7ff bf09 	b.w	8002a3c <__retarget_lock_release_recursive>
 8002c2a:	bf00      	nop
 8002c2c:	20000234 	.word	0x20000234

08002c30 <__sflush_r>:
 8002c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c38:	0716      	lsls	r6, r2, #28
 8002c3a:	4605      	mov	r5, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	d454      	bmi.n	8002cea <__sflush_r+0xba>
 8002c40:	684b      	ldr	r3, [r1, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	dc02      	bgt.n	8002c4c <__sflush_r+0x1c>
 8002c46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dd48      	ble.n	8002cde <__sflush_r+0xae>
 8002c4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c4e:	2e00      	cmp	r6, #0
 8002c50:	d045      	beq.n	8002cde <__sflush_r+0xae>
 8002c52:	2300      	movs	r3, #0
 8002c54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002c58:	682f      	ldr	r7, [r5, #0]
 8002c5a:	6a21      	ldr	r1, [r4, #32]
 8002c5c:	602b      	str	r3, [r5, #0]
 8002c5e:	d030      	beq.n	8002cc2 <__sflush_r+0x92>
 8002c60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	0759      	lsls	r1, r3, #29
 8002c66:	d505      	bpl.n	8002c74 <__sflush_r+0x44>
 8002c68:	6863      	ldr	r3, [r4, #4]
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c6e:	b10b      	cbz	r3, 8002c74 <__sflush_r+0x44>
 8002c70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c72:	1ad2      	subs	r2, r2, r3
 8002c74:	2300      	movs	r3, #0
 8002c76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c78:	6a21      	ldr	r1, [r4, #32]
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	47b0      	blx	r6
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	d106      	bne.n	8002c92 <__sflush_r+0x62>
 8002c84:	6829      	ldr	r1, [r5, #0]
 8002c86:	291d      	cmp	r1, #29
 8002c88:	d82b      	bhi.n	8002ce2 <__sflush_r+0xb2>
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d34 <__sflush_r+0x104>)
 8002c8c:	40ca      	lsrs	r2, r1
 8002c8e:	07d6      	lsls	r6, r2, #31
 8002c90:	d527      	bpl.n	8002ce2 <__sflush_r+0xb2>
 8002c92:	2200      	movs	r2, #0
 8002c94:	6062      	str	r2, [r4, #4]
 8002c96:	04d9      	lsls	r1, r3, #19
 8002c98:	6922      	ldr	r2, [r4, #16]
 8002c9a:	6022      	str	r2, [r4, #0]
 8002c9c:	d504      	bpl.n	8002ca8 <__sflush_r+0x78>
 8002c9e:	1c42      	adds	r2, r0, #1
 8002ca0:	d101      	bne.n	8002ca6 <__sflush_r+0x76>
 8002ca2:	682b      	ldr	r3, [r5, #0]
 8002ca4:	b903      	cbnz	r3, 8002ca8 <__sflush_r+0x78>
 8002ca6:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002caa:	602f      	str	r7, [r5, #0]
 8002cac:	b1b9      	cbz	r1, 8002cde <__sflush_r+0xae>
 8002cae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cb2:	4299      	cmp	r1, r3
 8002cb4:	d002      	beq.n	8002cbc <__sflush_r+0x8c>
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f7ff fec2 	bl	8002a40 <_free_r>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cc0:	e00d      	b.n	8002cde <__sflush_r+0xae>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	47b0      	blx	r6
 8002cc8:	4602      	mov	r2, r0
 8002cca:	1c50      	adds	r0, r2, #1
 8002ccc:	d1c9      	bne.n	8002c62 <__sflush_r+0x32>
 8002cce:	682b      	ldr	r3, [r5, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0c6      	beq.n	8002c62 <__sflush_r+0x32>
 8002cd4:	2b1d      	cmp	r3, #29
 8002cd6:	d001      	beq.n	8002cdc <__sflush_r+0xac>
 8002cd8:	2b16      	cmp	r3, #22
 8002cda:	d11e      	bne.n	8002d1a <__sflush_r+0xea>
 8002cdc:	602f      	str	r7, [r5, #0]
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e022      	b.n	8002d28 <__sflush_r+0xf8>
 8002ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	e01b      	b.n	8002d22 <__sflush_r+0xf2>
 8002cea:	690f      	ldr	r7, [r1, #16]
 8002cec:	2f00      	cmp	r7, #0
 8002cee:	d0f6      	beq.n	8002cde <__sflush_r+0xae>
 8002cf0:	0793      	lsls	r3, r2, #30
 8002cf2:	680e      	ldr	r6, [r1, #0]
 8002cf4:	bf08      	it	eq
 8002cf6:	694b      	ldreq	r3, [r1, #20]
 8002cf8:	600f      	str	r7, [r1, #0]
 8002cfa:	bf18      	it	ne
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	eba6 0807 	sub.w	r8, r6, r7
 8002d02:	608b      	str	r3, [r1, #8]
 8002d04:	f1b8 0f00 	cmp.w	r8, #0
 8002d08:	dde9      	ble.n	8002cde <__sflush_r+0xae>
 8002d0a:	6a21      	ldr	r1, [r4, #32]
 8002d0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002d0e:	4643      	mov	r3, r8
 8002d10:	463a      	mov	r2, r7
 8002d12:	4628      	mov	r0, r5
 8002d14:	47b0      	blx	r6
 8002d16:	2800      	cmp	r0, #0
 8002d18:	dc08      	bgt.n	8002d2c <__sflush_r+0xfc>
 8002d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d2c:	4407      	add	r7, r0
 8002d2e:	eba8 0800 	sub.w	r8, r8, r0
 8002d32:	e7e7      	b.n	8002d04 <__sflush_r+0xd4>
 8002d34:	20400001 	.word	0x20400001

08002d38 <_fflush_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	690b      	ldr	r3, [r1, #16]
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	b913      	cbnz	r3, 8002d48 <_fflush_r+0x10>
 8002d42:	2500      	movs	r5, #0
 8002d44:	4628      	mov	r0, r5
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	b118      	cbz	r0, 8002d52 <_fflush_r+0x1a>
 8002d4a:	6a03      	ldr	r3, [r0, #32]
 8002d4c:	b90b      	cbnz	r3, 8002d52 <_fflush_r+0x1a>
 8002d4e:	f7ff fc8f 	bl	8002670 <__sinit>
 8002d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f3      	beq.n	8002d42 <_fflush_r+0xa>
 8002d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d5c:	07d0      	lsls	r0, r2, #31
 8002d5e:	d404      	bmi.n	8002d6a <_fflush_r+0x32>
 8002d60:	0599      	lsls	r1, r3, #22
 8002d62:	d402      	bmi.n	8002d6a <_fflush_r+0x32>
 8002d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d66:	f7ff fe68 	bl	8002a3a <__retarget_lock_acquire_recursive>
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	f7ff ff5f 	bl	8002c30 <__sflush_r>
 8002d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d74:	07da      	lsls	r2, r3, #31
 8002d76:	4605      	mov	r5, r0
 8002d78:	d4e4      	bmi.n	8002d44 <_fflush_r+0xc>
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	059b      	lsls	r3, r3, #22
 8002d7e:	d4e1      	bmi.n	8002d44 <_fflush_r+0xc>
 8002d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d82:	f7ff fe5b 	bl	8002a3c <__retarget_lock_release_recursive>
 8002d86:	e7dd      	b.n	8002d44 <_fflush_r+0xc>

08002d88 <__swhatbuf_r>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	460c      	mov	r4, r1
 8002d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d90:	2900      	cmp	r1, #0
 8002d92:	b096      	sub	sp, #88	@ 0x58
 8002d94:	4615      	mov	r5, r2
 8002d96:	461e      	mov	r6, r3
 8002d98:	da0d      	bge.n	8002db6 <__swhatbuf_r+0x2e>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	bf14      	ite	ne
 8002da6:	2340      	movne	r3, #64	@ 0x40
 8002da8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002dac:	2000      	movs	r0, #0
 8002dae:	6031      	str	r1, [r6, #0]
 8002db0:	602b      	str	r3, [r5, #0]
 8002db2:	b016      	add	sp, #88	@ 0x58
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	466a      	mov	r2, sp
 8002db8:	f000 f848 	bl	8002e4c <_fstat_r>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	dbec      	blt.n	8002d9a <__swhatbuf_r+0x12>
 8002dc0:	9901      	ldr	r1, [sp, #4]
 8002dc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002dc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002dca:	4259      	negs	r1, r3
 8002dcc:	4159      	adcs	r1, r3
 8002dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd2:	e7eb      	b.n	8002dac <__swhatbuf_r+0x24>

08002dd4 <__smakebuf_r>:
 8002dd4:	898b      	ldrh	r3, [r1, #12]
 8002dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dd8:	079d      	lsls	r5, r3, #30
 8002dda:	4606      	mov	r6, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	d507      	bpl.n	8002df0 <__smakebuf_r+0x1c>
 8002de0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	6123      	str	r3, [r4, #16]
 8002de8:	2301      	movs	r3, #1
 8002dea:	6163      	str	r3, [r4, #20]
 8002dec:	b003      	add	sp, #12
 8002dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df0:	ab01      	add	r3, sp, #4
 8002df2:	466a      	mov	r2, sp
 8002df4:	f7ff ffc8 	bl	8002d88 <__swhatbuf_r>
 8002df8:	9f00      	ldr	r7, [sp, #0]
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	4639      	mov	r1, r7
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f7ff fe8a 	bl	8002b18 <_malloc_r>
 8002e04:	b948      	cbnz	r0, 8002e1a <__smakebuf_r+0x46>
 8002e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e0a:	059a      	lsls	r2, r3, #22
 8002e0c:	d4ee      	bmi.n	8002dec <__smakebuf_r+0x18>
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	81a3      	strh	r3, [r4, #12]
 8002e18:	e7e2      	b.n	8002de0 <__smakebuf_r+0xc>
 8002e1a:	89a3      	ldrh	r3, [r4, #12]
 8002e1c:	6020      	str	r0, [r4, #0]
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e22:	81a3      	strh	r3, [r4, #12]
 8002e24:	9b01      	ldr	r3, [sp, #4]
 8002e26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e2a:	b15b      	cbz	r3, 8002e44 <__smakebuf_r+0x70>
 8002e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e30:	4630      	mov	r0, r6
 8002e32:	f000 f81d 	bl	8002e70 <_isatty_r>
 8002e36:	b128      	cbz	r0, 8002e44 <__smakebuf_r+0x70>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	431d      	orrs	r5, r3
 8002e48:	81a5      	strh	r5, [r4, #12]
 8002e4a:	e7cf      	b.n	8002dec <__smakebuf_r+0x18>

08002e4c <_fstat_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4d07      	ldr	r5, [pc, #28]	@ (8002e6c <_fstat_r+0x20>)
 8002e50:	2300      	movs	r3, #0
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	602b      	str	r3, [r5, #0]
 8002e5a:	f7fd fd6b 	bl	8000934 <_fstat>
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	d102      	bne.n	8002e68 <_fstat_r+0x1c>
 8002e62:	682b      	ldr	r3, [r5, #0]
 8002e64:	b103      	cbz	r3, 8002e68 <_fstat_r+0x1c>
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	bd38      	pop	{r3, r4, r5, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000230 	.word	0x20000230

08002e70 <_isatty_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4d06      	ldr	r5, [pc, #24]	@ (8002e8c <_isatty_r+0x1c>)
 8002e74:	2300      	movs	r3, #0
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	602b      	str	r3, [r5, #0]
 8002e7c:	f7fd fd6a 	bl	8000954 <_isatty>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d102      	bne.n	8002e8a <_isatty_r+0x1a>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	b103      	cbz	r3, 8002e8a <_isatty_r+0x1a>
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	20000230 	.word	0x20000230

08002e90 <_sbrk_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4d06      	ldr	r5, [pc, #24]	@ (8002eac <_sbrk_r+0x1c>)
 8002e94:	2300      	movs	r3, #0
 8002e96:	4604      	mov	r4, r0
 8002e98:	4608      	mov	r0, r1
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	f7fd fd72 	bl	8000984 <_sbrk>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d102      	bne.n	8002eaa <_sbrk_r+0x1a>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	b103      	cbz	r3, 8002eaa <_sbrk_r+0x1a>
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	20000230 	.word	0x20000230

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
