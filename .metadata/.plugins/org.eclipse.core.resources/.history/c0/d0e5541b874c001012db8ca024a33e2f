/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "u8g2.h"
#include "u8g2_stm32.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
#define RX_BUFFER_SIZE 64
volatile uint8_t rx_buffer[RX_BUFFER_SIZE];
volatile uint8_t rx_index = 0;
volatile uint8_t g_command_received_flag = 0; // A flag to signal the main loop

// Let's also add a state variable for our test
volatile uint8_t g_test_is_running = 0;

#define NUM_PARAMETERS 24
float parameters[NUM_PARAMETERS] = {0.0f};

const char* parameter_names_for_reference[NUM_PARAMETERS] = {
    "X1 Time Min->Max", "X1 Time Max->Min", "X2 Time Min->Max", "X2 Time Max->Min",
    "X1 +15V I Min->Max", "X1 -15V I Min->Max", "X1 +24V I Min->Max",
    "X1 +15V I Max->Min", "X1 -15V I Max->Min", "X1 +24V I Max->Min",
    "X2 +15V I Min->Max", "X2 -15V I Min->Max", "X2 +24V I Min->Max",
    "X2 +15V I Max->Min", "X2 -15V I Max->Min", "X2 +24V I Max->Min",
    "X1 Min Pos V", "X1 Max Pos V", "X2 Min Pos V", "X2 Max Pos V",
    "X1 Step Min->Max", "X1 Step Max->Min", "X2 Step Min->Max", "X2 Step Max->Min"
};
static u8g2_t u8g2;
#define DATA_LOG_LENGTH 32

uint32_t data_log[DATA_LOG_LENGTH] = {
    101,
    255,
    1024,
    7,
    33000,
    65535,
    12345,
    9876,
    5,
    4095,
    8192,
    16384,
    32768,
    64001,
    128,
    2048,
    99999,
    1,
    0,
    123,
    4567,
    891011,
    121314,
    555,
    7777,
    88,
    42,
    1000000,
    2500,
    1337,
    54321,
    999
};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern char display_buffer[200];

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
  u8g2_Setup_sh1106_i2c_128x64_noname_f(
      &u8g2,
      U8G2_R0,
      u8x8_byte_i2c_stm32,
      u8g2_gpio_and_delay_stm32
  );

  u8g2_InitDisplay(&u8g2);
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */

	    // ===================================================================
	    // 1. COMMAND HANDLING SECTION
	    //    This part runs on every loop to check if a command has arrived
	    //    from the Python GUI via the UART interrupt.
	    // ===================================================================
	    if (g_command_received_flag) {
	        // Compare the received string with our expected command
	        if (strcmp((char*)rx_buffer, "CMD:PERFORM_TEST") == 0) {
	            g_test_is_running = 1; // Set the state to "Test Active"
	        }
	        // You could add a "stop" command here later
	        // else if (strcmp((char*)rx_buffer, "CMD:STOP_TEST") == 0) {
	        //    g_test_is_running = 0; // Set the state to "Idle"
	        // }

	        // Reset for the next command
	        g_command_received_flag = 0;
	        rx_index = 0;
	        memset((void*)rx_buffer, 0, RX_BUFFER_SIZE);
	    }


	    // ===================================================================
	    // 2. STATE-BASED ACTION SECTION
	    //    The device behaves differently based on the g_test_is_running
	    //    state variable.
	    // ===================================================================
	    if (g_test_is_running)
	    {
	        // --- STATE: TEST ACTIVE ---

	        // A. Simulate live data
	        parameters[0] = 3.20 + (HAL_GetTick() % 100) / 1000.0f; // X1 Time Min->Max
	        parameters[1] = 3.10 + (HAL_GetTick() % 100) / 1000.0f; // X1 Time Max->Min
	        parameters[2] = 3.30 + (HAL_GetTick() % 100) / 1000.0f; // X2 Time Min->Max
	        parameters[3] = 3.40 + (HAL_GetTick() % 100) / 1000.0f; // X2 Time Max->Min
	        parameters[4] = 0.13 + (HAL_GetTick() % 100) / 2000.0f; // X1 +15V I Min->Max
	        parameters[5] = 0.10 + (HAL_GetTick() % 100) / 2000.0f; // X1 -15V I Min->Max
	        // Fill in the rest of the 24 parameters with real or simulated data
	        for (int i = 6; i < NUM_PARAMETERS; i++) {
	            parameters[i] = (float)i + ((HAL_GetTick() % 1000) / 1000.0f);
	        }

	        // B. Send data to Python GUI as a CSV string
	        //    **IMPORTANT: Using the corrected "%.3f" specifier**
	        printf("DATA,");
	        for (int i = 0; i < NUM_PARAMETERS; i++) {
	        	printf("%ld", (int32_t)(parameters[i] * 1000.0f));
	            if (i < NUM_PARAMETERS - 1) {
	                printf(",");
	            }
	        }
	        printf("\n");
	        fflush(stdout);

	        // C. Update the OLED display with the current status
	        u8g2_ClearBuffer(&u8g2);
	        u8g2_SetFont(&u8g2, u8g2_font_ncenB10_tr);
	        u8g2_DrawStr(&u8g2, 0, 18, "Test Running...");
	        u8g2_SetFont(&u8g2, u8g2_font_profont12_tr);

	        char display_buf[32]; // Buffer for display lines

	        // --- NEW METHOD for "X1 Time" (replaces snprintf with %.2f) ---
	        int32_t integer_part = (int32_t)parameters[0];
	        // Use fabsf() to handle the fractional part of negative numbers correctly
	        int32_t fractional_part = (int32_t)(fabsf(parameters[0] * 100.0f)) % 100;
	        // Use %ld for long int and %02ld to pad the fraction with a zero (e.g., 3.05)
	        snprintf(display_buf, sizeof(display_buf), "X1 Time: %ld.%02ld s", integer_part, fractional_part);
	        u8g2_DrawStr(&u8g2, 0, 40, display_buf);

	        // --- NEW METHOD for "X1 +15V I" (replaces snprintf with %.2f) ---
	        integer_part = (int32_t)parameters[4];
	        fractional_part = (int32_t)(fabsf(parameters[4] * 100.0f)) % 100;
	        snprintf(display_buf, sizeof(display_buf), "X1 +15V I: %ld.%02ld A", integer_part, fractional_part);
	        u8g2_DrawStr(&u8g2, 0, 55, display_buf);

	        u8g2_SendBuffer(&u8g2);
	    }
	    else
	    {
	        // --- STATE: IDLE ---

	        // A. Update the OLED display to show it's ready for a command
	        u8g2_ClearBuffer(&u8g2);
	        u8g2_SetFont(&u8g2, u8g2_font_ncenB10_tr);
	        u8g2_DrawStr(&u8g2, 0, 35, "Ready...");
	        u8g2_SetFont(&u8g2, u8g2_font_profont12_tr);
	        u8g2_DrawStr(&u8g2, 0, 55, "Waiting for command");
	        u8g2_SendBuffer(&u8g2);

	        // B. Note: We do NOT send any "DATA,..." here. We are idle.
	    }

	    // A single, short delay at the end of the main loop to prevent the CPU
	    // from running at 100% and to set the update rate of our application.
	    HAL_Delay(500); // Update rate of 2Hz (1000ms / 500ms)

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    // Check if the received data is from the correct UART
    if (huart->Instance == USART2)
    {
        // --- STEP 1: PROVE THE INTERRUPT IS FIRING ---
        // We print the character received and immediately flush the buffer.
        printf("DBG_ISR: Byte '%c' (ASCII: %d)\r\n", rx_buffer[rx_index], rx_buffer[rx_index]);
        fflush(stdout);

        // --- STEP 2: BUILD THE COMMAND STRING ---
        // Check for the end-of-command character (newline)
        if (rx_buffer[rx_index] == '\n' || rx_buffer[rx_index] == '\r')
        {
            // Null-terminate the string to make it safe for string functions
            rx_buffer[rx_index] = '\0';

            // --- STEP 3: PROVE THE FULL COMMAND WAS RECEIVED ---
            printf("DBG_ISR: Command Complete: [%s]\r\n", (char*)rx_buffer);
            fflush(stdout);

            // Set the flag for the main loop to process the command
            g_command_received_flag = 1;
        }
        else
        {
            // Increment index, but prevent buffer overflow
            rx_index++;
            if (rx_index >= RX_BUFFER_SIZE) {
                rx_index = 0; // Reset on overflow
            }
        }

        // CRITICAL: Re-arm the UART receive interrupt to listen for the next byte
        HAL_UART_Receive_IT(&huart2, &rx_buffer[rx_index], 1);
    }
}

#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
  // Change HUART2 to the UART handle you are using
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
