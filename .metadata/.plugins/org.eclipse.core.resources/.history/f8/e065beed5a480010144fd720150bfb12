/*
 * functions.c
 *
 *  Created on: Jun 1, 2025
 *      Author: Aditya Singh
 */
#include "stm32f4xx_hal.h"     // Main HAL header (includes GPIO, TIM, etc.)
#include "main.h"
#include "functions.h"// Usually contains GPIO pin mappings and handles
#include <stdio.h>
#include <stdlib.h>
#define MOTOR1_IN1 GPIO_PIN_7
#define MOTOR1_IN2 GPIO_PIN_8
#define MOTOR2_IN1 GPIO_PIN_9
#define MOTOR2_IN2 GPIO_PIN_11
uint32_t speed = 115;
uint32_t TIMEOUT_VALUE = 1000 ;
uint16_t volatile Pot1_2[2];
#define PWM_MAX_DUTY (200)
uint32_t lagtime1 = 0, lagtime2 = 0;


void motor2_set_state(MotorDirection_t direction, uint32_t speed)
{
    if (speed > PWM_MAX_DUTY) {
        speed = PWM_MAX_DUTY;
    }

    switch (direction) {
        case MOTOR_FORWARD:
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN2, GPIO_PIN_RESET);
            TIM2->CCR1 = speed;
            break;

        case MOTOR_REVERSE:
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN1, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN2, GPIO_PIN_SET);
            TIM2->CCR1 = speed;
            break;

        case MOTOR_STOP:
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN2, GPIO_PIN_SET);
            TIM2->CCR1 = speed;
            break;
    }
}
void motor1_set_state(MotorDirection_t direction, uint32_t speed)
{
    // Clamp the speed to the maximum possible value to prevent overflow
    if (speed > PWM_MAX_DUTY) {
        speed = PWM_MAX_DUTY;
    }

    switch (direction) {
        case MOTOR_FORWARD:

            HAL_GPIO_WritePin(GPIOE, MOTOR1_IN1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOE, MOTOR1_IN2, GPIO_PIN_RESET);
            TIM1->CCR1 = speed;// Set PWM duty cycle

            break;

        case MOTOR_REVERSE:

            HAL_GPIO_WritePin(GPIOE, MOTOR1_IN1, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOE, MOTOR1_IN2, GPIO_PIN_SET);
            TIM1->CCR1 = speed; // Set PWM duty cycle
            break;

        case MOTOR_STOP:

            // This implements an active "brake" by setting both inputs high.
            // Setting both low would "coast". Brake is better for position control.
            HAL_GPIO_WritePin(GPIOE, MOTOR1_IN1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOE, MOTOR1_IN2, GPIO_PIN_SET);
            TIM1->CCR1 = speed; // Ensure motor power is off
            break;
    }
}

/**
 * @brief Moves Motor 2 to a specific target ADC value.
 * @param targetADC: The desired raw ADC value (0-4095).
 * @param tolerance: How close is "close enough" in ADC units.
 */
void moveMotor2ToADCValue(uint16_t targetADC, uint16_t tolerance) {
    uint16_t currentADC;
    int32_t error; // <<< FIX #1: MUST BE A SIGNED TYPE (int32_t is safest)

    uint32_t timeout_start = HAL_GetTick();

    while (1) {
        currentADC = Pot1_2[1]; // Correct channel for Motor 2

        // FIX #2: Perform a signed subtraction by casting
        error = (int32_t)targetADC - (int32_t)currentADC;

        // FIX #3: Use correct printf specifiers for the data types
        printf("M2 Target: %u, Current: %u, Error: %ld\n", targetADC, currentADC, error);

        // This check is now correct because 'error' can be negative
        if (labs(error) <= tolerance){
            motor2_set_state(MOTOR_STOP, 0); // Correctly stops motor 2
            printf("M2 Target reached.\n");
            return;
        }

        if (error > 0) {
            motor2_set_state(MOTOR_FORWARD, speed); //state which increases the value
        } else {
            motor2_set_state(MOTOR_REVERSE, speed);
        }

        if (HAL_GetTick() - timeout_start > 5000) {
            // FIX #4: Use the specific motor stop function
            motor2_set_state(MOTOR_STOP, 0);
            printf("Error: moveMotor2ToADCValue timed out!\n");
            return;
        }

        HAL_Delay(10);
    }
}
/**
 * @brief Moves Motor 1 to a specific target ADC value.
 * @param targetADC: The desired raw ADC value (0-4095).
 * @param tolerance: How close is "close enough" in ADC units.
 */
void moveMotor1ToADCValue(uint16_t targetADC, uint16_t tolerance) {
    uint16_t currentADC;
    int32_t error; // <<< FIX #1: MUST BE A SIGNED TYPE (int32_t is safest)

    uint32_t timeout_start = HAL_GetTick();

    while (1) {
        currentADC = Pot1_2[0]; // Correct channel for Motor 2

        // FIX #2: Perform a signed subtraction by casting
        error = (int32_t)targetADC - (int32_t)currentADC;

        // FIX #3: Use correct printf specifiers for the data types
        printf("M1 Target: %u, Current: %u, Error: %ld\n", targetADC, currentADC, error);

        // This check is now correct because 'error' can be negative
        if (labs(error) <= tolerance){
            motor1_set_state(MOTOR_STOP, 0); // Correctly stops motor 2
            printf("M1 Target reached.\n");
            return;
        }

        if (error > 0) {
            motor1_set_state(MOTOR_FORWARD, speed);
        } else {
            motor1_set_state(MOTOR_REVERSE, speed);
        }

        if (HAL_GetTick() - timeout_start > 5000) {
            // FIX #4: Use the specific motor stop function
            motor1_set_state(MOTOR_STOP, 0);
            printf("Error: moveMotor1ToADCValue timed out!\n");
            return;
        }

        HAL_Delay(10);
    }
}

int Lag(uint32_t *lagtime2)
{
//    // Start the motor 1
//	 motor1_set_state(MOTOR_FORWARD, speed);
//    uint32_t start_time_motor1 = HAL_GetTick();
//
//    // Store initial potentiometer position
//    uint32_t init_position = Pot1_2[0];
//
//    // Wait for a change in potentiometer reading
//    while (labs((int32_t)(Pot1_2[0] - init_position)) < 5) {
//        // Optionally add a timeout mechanism to avoid infinite loop
//        if ((HAL_GetTick() - start_time_motor1) > TIMEOUT_VALUE) {
//        	printf("Error in Calculating Lag for Motor 1  \n");
//            return -1; // Indicate timeout
//        }
//        HAL_Delay(1); // or __NOP();
//    }
//
//    uint32_t start_time_pot1 = HAL_GetTick();
//    *lagtime1 = start_time_pot1 - start_time_motor1;
    // Start the motor 2
	 motor2_set_state(MOTOR_FORWARD, speed);
    uint32_t start_time_motor2 = HAL_GetTick();

    // Store initial potentiometer position
    uint32_t init_position = Pot1_2[1];

    // Wait for a change in potentiometer reading
    while (labs((int32_t)(Pot1_2[1] - init_position)) < 100) {
        // Optionally add a timeout mechanism to avoid infinite loop
        if ((HAL_GetTick() - start_time_motor2) > TIMEOUT_VALUE) {
        	printf("Error in Calculating Lag for Motor 2  \n");
            return -1; // Indicate timeout
        }
        HAL_Delay(1); // or __NOP();
    }
    uint32_t start_time_pot2 = HAL_GetTick();
    *lagtime2 = start_time_pot2 - start_time_motor2;
    return 0;

}




