
Matching_Network.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006458  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006908  08006908  00007908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006910  08006910  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006918  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          000003ac  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d8a  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000287d  00000000  00000000  0001ae2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  0001d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ddb  00000000  00000000  0001e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023de9  00000000  00000000  0001f613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159f8  00000000  00000000  000433fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc84f  00000000  00000000  00058df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135643  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053ec  00000000  00000000  00135688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0013aa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065d0 	.word	0x080065d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080065d0 	.word	0x080065d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2f>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005f0:	bf24      	itt	cs
 80005f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005fa:	d90d      	bls.n	8000618 <__aeabi_d2f+0x30>
 80005fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000600:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000604:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000608:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800060c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000610:	bf08      	it	eq
 8000612:	f020 0001 	biceq.w	r0, r0, #1
 8000616:	4770      	bx	lr
 8000618:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800061c:	d121      	bne.n	8000662 <__aeabi_d2f+0x7a>
 800061e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000622:	bfbc      	itt	lt
 8000624:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000628:	4770      	bxlt	lr
 800062a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000632:	f1c2 0218 	rsb	r2, r2, #24
 8000636:	f1c2 0c20 	rsb	ip, r2, #32
 800063a:	fa10 f30c 	lsls.w	r3, r0, ip
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	bf18      	it	ne
 8000644:	f040 0001 	orrne.w	r0, r0, #1
 8000648:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800064c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000650:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000654:	ea40 000c 	orr.w	r0, r0, ip
 8000658:	fa23 f302 	lsr.w	r3, r3, r2
 800065c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000660:	e7cc      	b.n	80005fc <__aeabi_d2f+0x14>
 8000662:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000666:	d107      	bne.n	8000678 <__aeabi_d2f+0x90>
 8000668:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800066c:	bf1e      	ittt	ne
 800066e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000672:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000676:	4770      	bxne	lr
 8000678:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800067c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000680:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b988 	b.w	80009b0 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f806 	bl	80006b8 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__udivmoddi4>:
 80006b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006bc:	9d08      	ldr	r5, [sp, #32]
 80006be:	468e      	mov	lr, r1
 80006c0:	4604      	mov	r4, r0
 80006c2:	4688      	mov	r8, r1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d14a      	bne.n	800075e <__udivmoddi4+0xa6>
 80006c8:	428a      	cmp	r2, r1
 80006ca:	4617      	mov	r7, r2
 80006cc:	d962      	bls.n	8000794 <__udivmoddi4+0xdc>
 80006ce:	fab2 f682 	clz	r6, r2
 80006d2:	b14e      	cbz	r6, 80006e8 <__udivmoddi4+0x30>
 80006d4:	f1c6 0320 	rsb	r3, r6, #32
 80006d8:	fa01 f806 	lsl.w	r8, r1, r6
 80006dc:	fa20 f303 	lsr.w	r3, r0, r3
 80006e0:	40b7      	lsls	r7, r6
 80006e2:	ea43 0808 	orr.w	r8, r3, r8
 80006e6:	40b4      	lsls	r4, r6
 80006e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006ec:	fa1f fc87 	uxth.w	ip, r7
 80006f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80006f4:	0c23      	lsrs	r3, r4, #16
 80006f6:	fb0e 8811 	mls	r8, lr, r1, r8
 80006fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000702:	429a      	cmp	r2, r3
 8000704:	d909      	bls.n	800071a <__udivmoddi4+0x62>
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	f101 30ff 	add.w	r0, r1, #4294967295
 800070c:	f080 80ea 	bcs.w	80008e4 <__udivmoddi4+0x22c>
 8000710:	429a      	cmp	r2, r3
 8000712:	f240 80e7 	bls.w	80008e4 <__udivmoddi4+0x22c>
 8000716:	3902      	subs	r1, #2
 8000718:	443b      	add	r3, r7
 800071a:	1a9a      	subs	r2, r3, r2
 800071c:	b2a3      	uxth	r3, r4
 800071e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000722:	fb0e 2210 	mls	r2, lr, r0, r2
 8000726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072a:	fb00 fc0c 	mul.w	ip, r0, ip
 800072e:	459c      	cmp	ip, r3
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0x8e>
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	f100 32ff 	add.w	r2, r0, #4294967295
 8000738:	f080 80d6 	bcs.w	80008e8 <__udivmoddi4+0x230>
 800073c:	459c      	cmp	ip, r3
 800073e:	f240 80d3 	bls.w	80008e8 <__udivmoddi4+0x230>
 8000742:	443b      	add	r3, r7
 8000744:	3802      	subs	r0, #2
 8000746:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800074a:	eba3 030c 	sub.w	r3, r3, ip
 800074e:	2100      	movs	r1, #0
 8000750:	b11d      	cbz	r5, 800075a <__udivmoddi4+0xa2>
 8000752:	40f3      	lsrs	r3, r6
 8000754:	2200      	movs	r2, #0
 8000756:	e9c5 3200 	strd	r3, r2, [r5]
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	428b      	cmp	r3, r1
 8000760:	d905      	bls.n	800076e <__udivmoddi4+0xb6>
 8000762:	b10d      	cbz	r5, 8000768 <__udivmoddi4+0xb0>
 8000764:	e9c5 0100 	strd	r0, r1, [r5]
 8000768:	2100      	movs	r1, #0
 800076a:	4608      	mov	r0, r1
 800076c:	e7f5      	b.n	800075a <__udivmoddi4+0xa2>
 800076e:	fab3 f183 	clz	r1, r3
 8000772:	2900      	cmp	r1, #0
 8000774:	d146      	bne.n	8000804 <__udivmoddi4+0x14c>
 8000776:	4573      	cmp	r3, lr
 8000778:	d302      	bcc.n	8000780 <__udivmoddi4+0xc8>
 800077a:	4282      	cmp	r2, r0
 800077c:	f200 8105 	bhi.w	800098a <__udivmoddi4+0x2d2>
 8000780:	1a84      	subs	r4, r0, r2
 8000782:	eb6e 0203 	sbc.w	r2, lr, r3
 8000786:	2001      	movs	r0, #1
 8000788:	4690      	mov	r8, r2
 800078a:	2d00      	cmp	r5, #0
 800078c:	d0e5      	beq.n	800075a <__udivmoddi4+0xa2>
 800078e:	e9c5 4800 	strd	r4, r8, [r5]
 8000792:	e7e2      	b.n	800075a <__udivmoddi4+0xa2>
 8000794:	2a00      	cmp	r2, #0
 8000796:	f000 8090 	beq.w	80008ba <__udivmoddi4+0x202>
 800079a:	fab2 f682 	clz	r6, r2
 800079e:	2e00      	cmp	r6, #0
 80007a0:	f040 80a4 	bne.w	80008ec <__udivmoddi4+0x234>
 80007a4:	1a8a      	subs	r2, r1, r2
 80007a6:	0c03      	lsrs	r3, r0, #16
 80007a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ac:	b280      	uxth	r0, r0
 80007ae:	b2bc      	uxth	r4, r7
 80007b0:	2101      	movs	r1, #1
 80007b2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007b6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007be:	fb04 f20c 	mul.w	r2, r4, ip
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d907      	bls.n	80007d6 <__udivmoddi4+0x11e>
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007cc:	d202      	bcs.n	80007d4 <__udivmoddi4+0x11c>
 80007ce:	429a      	cmp	r2, r3
 80007d0:	f200 80e0 	bhi.w	8000994 <__udivmoddi4+0x2dc>
 80007d4:	46c4      	mov	ip, r8
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007dc:	fb0e 3312 	mls	r3, lr, r2, r3
 80007e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007e4:	fb02 f404 	mul.w	r4, r2, r4
 80007e8:	429c      	cmp	r4, r3
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0x144>
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	f102 30ff 	add.w	r0, r2, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x142>
 80007f4:	429c      	cmp	r4, r3
 80007f6:	f200 80ca 	bhi.w	800098e <__udivmoddi4+0x2d6>
 80007fa:	4602      	mov	r2, r0
 80007fc:	1b1b      	subs	r3, r3, r4
 80007fe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000802:	e7a5      	b.n	8000750 <__udivmoddi4+0x98>
 8000804:	f1c1 0620 	rsb	r6, r1, #32
 8000808:	408b      	lsls	r3, r1
 800080a:	fa22 f706 	lsr.w	r7, r2, r6
 800080e:	431f      	orrs	r7, r3
 8000810:	fa0e f401 	lsl.w	r4, lr, r1
 8000814:	fa20 f306 	lsr.w	r3, r0, r6
 8000818:	fa2e fe06 	lsr.w	lr, lr, r6
 800081c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000820:	4323      	orrs	r3, r4
 8000822:	fa00 f801 	lsl.w	r8, r0, r1
 8000826:	fa1f fc87 	uxth.w	ip, r7
 800082a:	fbbe f0f9 	udiv	r0, lr, r9
 800082e:	0c1c      	lsrs	r4, r3, #16
 8000830:	fb09 ee10 	mls	lr, r9, r0, lr
 8000834:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000838:	fb00 fe0c 	mul.w	lr, r0, ip
 800083c:	45a6      	cmp	lr, r4
 800083e:	fa02 f201 	lsl.w	r2, r2, r1
 8000842:	d909      	bls.n	8000858 <__udivmoddi4+0x1a0>
 8000844:	193c      	adds	r4, r7, r4
 8000846:	f100 3aff 	add.w	sl, r0, #4294967295
 800084a:	f080 809c 	bcs.w	8000986 <__udivmoddi4+0x2ce>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f240 8099 	bls.w	8000986 <__udivmoddi4+0x2ce>
 8000854:	3802      	subs	r0, #2
 8000856:	443c      	add	r4, r7
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	fa1f fe83 	uxth.w	lr, r3
 8000860:	fbb4 f3f9 	udiv	r3, r4, r9
 8000864:	fb09 4413 	mls	r4, r9, r3, r4
 8000868:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800086c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000870:	45a4      	cmp	ip, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x1ce>
 8000874:	193c      	adds	r4, r7, r4
 8000876:	f103 3eff 	add.w	lr, r3, #4294967295
 800087a:	f080 8082 	bcs.w	8000982 <__udivmoddi4+0x2ca>
 800087e:	45a4      	cmp	ip, r4
 8000880:	d97f      	bls.n	8000982 <__udivmoddi4+0x2ca>
 8000882:	3b02      	subs	r3, #2
 8000884:	443c      	add	r4, r7
 8000886:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800088a:	eba4 040c 	sub.w	r4, r4, ip
 800088e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000892:	4564      	cmp	r4, ip
 8000894:	4673      	mov	r3, lr
 8000896:	46e1      	mov	r9, ip
 8000898:	d362      	bcc.n	8000960 <__udivmoddi4+0x2a8>
 800089a:	d05f      	beq.n	800095c <__udivmoddi4+0x2a4>
 800089c:	b15d      	cbz	r5, 80008b6 <__udivmoddi4+0x1fe>
 800089e:	ebb8 0203 	subs.w	r2, r8, r3
 80008a2:	eb64 0409 	sbc.w	r4, r4, r9
 80008a6:	fa04 f606 	lsl.w	r6, r4, r6
 80008aa:	fa22 f301 	lsr.w	r3, r2, r1
 80008ae:	431e      	orrs	r6, r3
 80008b0:	40cc      	lsrs	r4, r1
 80008b2:	e9c5 6400 	strd	r6, r4, [r5]
 80008b6:	2100      	movs	r1, #0
 80008b8:	e74f      	b.n	800075a <__udivmoddi4+0xa2>
 80008ba:	fbb1 fcf2 	udiv	ip, r1, r2
 80008be:	0c01      	lsrs	r1, r0, #16
 80008c0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008c4:	b280      	uxth	r0, r0
 80008c6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008ca:	463b      	mov	r3, r7
 80008cc:	4638      	mov	r0, r7
 80008ce:	463c      	mov	r4, r7
 80008d0:	46b8      	mov	r8, r7
 80008d2:	46be      	mov	lr, r7
 80008d4:	2620      	movs	r6, #32
 80008d6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008da:	eba2 0208 	sub.w	r2, r2, r8
 80008de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008e2:	e766      	b.n	80007b2 <__udivmoddi4+0xfa>
 80008e4:	4601      	mov	r1, r0
 80008e6:	e718      	b.n	800071a <__udivmoddi4+0x62>
 80008e8:	4610      	mov	r0, r2
 80008ea:	e72c      	b.n	8000746 <__udivmoddi4+0x8e>
 80008ec:	f1c6 0220 	rsb	r2, r6, #32
 80008f0:	fa2e f302 	lsr.w	r3, lr, r2
 80008f4:	40b7      	lsls	r7, r6
 80008f6:	40b1      	lsls	r1, r6
 80008f8:	fa20 f202 	lsr.w	r2, r0, r2
 80008fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000900:	430a      	orrs	r2, r1
 8000902:	fbb3 f8fe 	udiv	r8, r3, lr
 8000906:	b2bc      	uxth	r4, r7
 8000908:	fb0e 3318 	mls	r3, lr, r8, r3
 800090c:	0c11      	lsrs	r1, r2, #16
 800090e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000912:	fb08 f904 	mul.w	r9, r8, r4
 8000916:	40b0      	lsls	r0, r6
 8000918:	4589      	cmp	r9, r1
 800091a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800091e:	b280      	uxth	r0, r0
 8000920:	d93e      	bls.n	80009a0 <__udivmoddi4+0x2e8>
 8000922:	1879      	adds	r1, r7, r1
 8000924:	f108 3cff 	add.w	ip, r8, #4294967295
 8000928:	d201      	bcs.n	800092e <__udivmoddi4+0x276>
 800092a:	4589      	cmp	r9, r1
 800092c:	d81f      	bhi.n	800096e <__udivmoddi4+0x2b6>
 800092e:	eba1 0109 	sub.w	r1, r1, r9
 8000932:	fbb1 f9fe 	udiv	r9, r1, lr
 8000936:	fb09 f804 	mul.w	r8, r9, r4
 800093a:	fb0e 1119 	mls	r1, lr, r9, r1
 800093e:	b292      	uxth	r2, r2
 8000940:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000944:	4542      	cmp	r2, r8
 8000946:	d229      	bcs.n	800099c <__udivmoddi4+0x2e4>
 8000948:	18ba      	adds	r2, r7, r2
 800094a:	f109 31ff 	add.w	r1, r9, #4294967295
 800094e:	d2c4      	bcs.n	80008da <__udivmoddi4+0x222>
 8000950:	4542      	cmp	r2, r8
 8000952:	d2c2      	bcs.n	80008da <__udivmoddi4+0x222>
 8000954:	f1a9 0102 	sub.w	r1, r9, #2
 8000958:	443a      	add	r2, r7
 800095a:	e7be      	b.n	80008da <__udivmoddi4+0x222>
 800095c:	45f0      	cmp	r8, lr
 800095e:	d29d      	bcs.n	800089c <__udivmoddi4+0x1e4>
 8000960:	ebbe 0302 	subs.w	r3, lr, r2
 8000964:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000968:	3801      	subs	r0, #1
 800096a:	46e1      	mov	r9, ip
 800096c:	e796      	b.n	800089c <__udivmoddi4+0x1e4>
 800096e:	eba7 0909 	sub.w	r9, r7, r9
 8000972:	4449      	add	r1, r9
 8000974:	f1a8 0c02 	sub.w	ip, r8, #2
 8000978:	fbb1 f9fe 	udiv	r9, r1, lr
 800097c:	fb09 f804 	mul.w	r8, r9, r4
 8000980:	e7db      	b.n	800093a <__udivmoddi4+0x282>
 8000982:	4673      	mov	r3, lr
 8000984:	e77f      	b.n	8000886 <__udivmoddi4+0x1ce>
 8000986:	4650      	mov	r0, sl
 8000988:	e766      	b.n	8000858 <__udivmoddi4+0x1a0>
 800098a:	4608      	mov	r0, r1
 800098c:	e6fd      	b.n	800078a <__udivmoddi4+0xd2>
 800098e:	443b      	add	r3, r7
 8000990:	3a02      	subs	r2, #2
 8000992:	e733      	b.n	80007fc <__udivmoddi4+0x144>
 8000994:	f1ac 0c02 	sub.w	ip, ip, #2
 8000998:	443b      	add	r3, r7
 800099a:	e71c      	b.n	80007d6 <__udivmoddi4+0x11e>
 800099c:	4649      	mov	r1, r9
 800099e:	e79c      	b.n	80008da <__udivmoddi4+0x222>
 80009a0:	eba1 0109 	sub.w	r1, r1, r9
 80009a4:	46c4      	mov	ip, r8
 80009a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009aa:	fb09 f804 	mul.w	r8, r9, r4
 80009ae:	e7c4      	b.n	800093a <__udivmoddi4+0x282>

080009b0 <__aeabi_idiv0>:
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <motor2_set_state>:
uint32_t lagtime1 = 0, lagtime2 = 0;
uint16_t lag_tolerance = 100;


void motor2_set_state(MotorDirection_t direction, uint32_t speed)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
    if (speed > PWM_MAX_DUTY) {
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80009c4:	d901      	bls.n	80009ca <motor2_set_state+0x16>
        speed = PWM_MAX_DUTY;
 80009c6:	23c8      	movs	r3, #200	@ 0xc8
 80009c8:	603b      	str	r3, [r7, #0]
    }

    switch (direction) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d016      	beq.n	80009fe <motor2_set_state+0x4a>
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	dc36      	bgt.n	8000a42 <motor2_set_state+0x8e>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d023      	beq.n	8000a20 <motor2_set_state+0x6c>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d132      	bne.n	8000a42 <motor2_set_state+0x8e>
        case MOTOR_FORWARD:
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN1, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e2:	481a      	ldr	r0, [pc, #104]	@ (8000a4c <motor2_set_state+0x98>)
 80009e4:	f002 fe80 	bl	80036e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN2, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ee:	4817      	ldr	r0, [pc, #92]	@ (8000a4c <motor2_set_state+0x98>)
 80009f0:	f002 fe7a 	bl	80036e8 <HAL_GPIO_WritePin>
            TIM2->CCR1 = speed;
 80009f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 80009fc:	e021      	b.n	8000a42 <motor2_set_state+0x8e>

        case MOTOR_REVERSE:
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN1, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	4811      	ldr	r0, [pc, #68]	@ (8000a4c <motor2_set_state+0x98>)
 8000a06:	f002 fe6f 	bl	80036e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN2, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a10:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <motor2_set_state+0x98>)
 8000a12:	f002 fe69 	bl	80036e8 <HAL_GPIO_WritePin>
            TIM2->CCR1 = speed;
 8000a16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 8000a1e:	e010      	b.n	8000a42 <motor2_set_state+0x8e>

        case MOTOR_STOP:
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN1, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a26:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <motor2_set_state+0x98>)
 8000a28:	f002 fe5e 	bl	80036e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOE, MOTOR2_IN2, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a32:	4806      	ldr	r0, [pc, #24]	@ (8000a4c <motor2_set_state+0x98>)
 8000a34:	f002 fe58 	bl	80036e8 <HAL_GPIO_WritePin>
            TIM2->CCR1 = speed;
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 8000a40:	bf00      	nop
    }
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <moveMotor2ToADCValue>:
/**
 * @brief Moves Motor 2 to a specific target ADC value.
 * @param targetADC: The desired raw ADC value (0-4095).
 * @param tolerance: How close is "close enough" in ADC units.
 */
void moveMotor2ToADCValue(uint16_t targetADC, uint16_t tolerance) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	460a      	mov	r2, r1
 8000a5a:	80fb      	strh	r3, [r7, #6]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	80bb      	strh	r3, [r7, #4]
    uint16_t currentADC;
    int32_t error; // <<< FIX #1: MUST BE A SIGNED TYPE (int32_t is safest)

    uint32_t timeout_start = HAL_GetTick();
 8000a60:	f001 f8c4 	bl	8001bec <HAL_GetTick>
 8000a64:	6178      	str	r0, [r7, #20]

    while (1) {
        currentADC = Pot1_2[1]; // Correct channel for Motor 2
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <moveMotor2ToADCValue+0xa8>)
 8000a68:	885b      	ldrh	r3, [r3, #2]
 8000a6a:	827b      	strh	r3, [r7, #18]

        // FIX #2: Perform a signed subtraction by casting
        error = (int32_t)targetADC - (int32_t)currentADC;
 8000a6c:	88fa      	ldrh	r2, [r7, #6]
 8000a6e:	8a7b      	ldrh	r3, [r7, #18]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	60fb      	str	r3, [r7, #12]

        // FIX #3: Use correct printf specifiers for the data types
        printf("M2 Target: %u, Current: %u, Error: %ld\n", targetADC, currentADC, error);
 8000a74:	88f9      	ldrh	r1, [r7, #6]
 8000a76:	8a7a      	ldrh	r2, [r7, #18]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4820      	ldr	r0, [pc, #128]	@ (8000afc <moveMotor2ToADCValue+0xac>)
 8000a7c:	f004 ff4e 	bl	800591c <iprintf>

        // This check is now correct because 'error' can be negative
        if (labs(error) <= tolerance){
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a86:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dc09      	bgt.n	8000aa4 <moveMotor2ToADCValue+0x54>
            motor2_set_state(MOTOR_STOP, speed); // Correctly stops motor 2
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <moveMotor2ToADCValue+0xb0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff ff8c 	bl	80009b4 <motor2_set_state>
            printf("M2 Target reached.\n");
 8000a9c:	4819      	ldr	r0, [pc, #100]	@ (8000b04 <moveMotor2ToADCValue+0xb4>)
 8000a9e:	f004 ffad 	bl	80059fc <puts>
            return ;
 8000aa2:	e026      	b.n	8000af2 <moveMotor2ToADCValue+0xa2>
        }

        if (error > 0) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dd06      	ble.n	8000ab8 <moveMotor2ToADCValue+0x68>
            motor2_set_state(MOTOR_FORWARD, speed); //state which increases the value
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <moveMotor2ToADCValue+0xb0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff ff7f 	bl	80009b4 <motor2_set_state>
 8000ab6:	e005      	b.n	8000ac4 <moveMotor2ToADCValue+0x74>
        } else {
            motor2_set_state(MOTOR_REVERSE, speed);
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <moveMotor2ToADCValue+0xb0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff ff78 	bl	80009b4 <motor2_set_state>
        }

        if (HAL_GetTick() - timeout_start > 5000) {
 8000ac4:	f001 f892 	bl	8001bec <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d909      	bls.n	8000aea <moveMotor2ToADCValue+0x9a>
            // FIX #4: Use the specific motor stop function
            motor2_set_state(MOTOR_STOP, speed);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <moveMotor2ToADCValue+0xb0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4619      	mov	r1, r3
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff ff69 	bl	80009b4 <motor2_set_state>
            printf("Error: moveMotor2ToADCValue timed out!\n");
 8000ae2:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <moveMotor2ToADCValue+0xb8>)
 8000ae4:	f004 ff8a 	bl	80059fc <puts>
            return ;
 8000ae8:	e003      	b.n	8000af2 <moveMotor2ToADCValue+0xa2>
        }

        HAL_Delay(10);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f001 f88a 	bl	8001c04 <HAL_Delay>
        currentADC = Pot1_2[1]; // Correct channel for Motor 2
 8000af0:	e7b9      	b.n	8000a66 <moveMotor2ToADCValue+0x16>
    }
}
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000090 	.word	0x20000090
 8000afc:	080065e8 	.word	0x080065e8
 8000b00:	20000000 	.word	0x20000000
 8000b04:	08006610 	.word	0x08006610
 8000b08:	08006624 	.word	0x08006624

08000b0c <Lag>:
        HAL_Delay(10);
    }
}

int Lag(uint32_t *lagtime)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
//    }
//
//    uint32_t start_time_pot1 = HAL_GetTick();
//    *lagtime1 = start_time_pot1 - start_time_motor1;
    // Start the motor 2
	 motor2_set_state(MOTOR_FORWARD, speed);
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <Lag+0x88>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff ff4a 	bl	80009b4 <motor2_set_state>
    uint32_t start_time_motor2 = HAL_GetTick();
 8000b20:	f001 f864 	bl	8001bec <HAL_GetTick>
 8000b24:	6178      	str	r0, [r7, #20]

    // Store initial potentiometer position
    uint32_t init_position = Pot1_2[1];
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <Lag+0x8c>)
 8000b28:	885b      	ldrh	r3, [r3, #2]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	613b      	str	r3, [r7, #16]

    // Wait for a change in potentiometer reading
    while (labs((int32_t)(Pot1_2[1] - init_position)) < (int32_t)(lag_tolerance)) {
 8000b2e:	e011      	b.n	8000b54 <Lag+0x48>
        // Optionally add a timeout mechanism to avoid infinite loop
        if ((HAL_GetTick() - start_time_motor2) > TIMEOUT_VALUE) {
 8000b30:	f001 f85c 	bl	8001bec <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	1ad2      	subs	r2, r2, r3
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <Lag+0x90>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d905      	bls.n	8000b4e <Lag+0x42>
        	printf("Error in Calculating Lag for Motor 2  \n");
 8000b42:	4817      	ldr	r0, [pc, #92]	@ (8000ba0 <Lag+0x94>)
 8000b44:	f004 ff5a 	bl	80059fc <puts>
            return -1; // Indicate timeout
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	e01e      	b.n	8000b8c <Lag+0x80>
        }
        HAL_Delay(1); // or __NOP();
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f001 f858 	bl	8001c04 <HAL_Delay>
    while (labs((int32_t)(Pot1_2[1] - init_position)) < (int32_t)(lag_tolerance)) {
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <Lag+0x8c>)
 8000b56:	885b      	ldrh	r3, [r3, #2]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bfb8      	it	lt
 8000b64:	425b      	neglt	r3, r3
 8000b66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba4 <Lag+0x98>)
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	dbe0      	blt.n	8000b30 <Lag+0x24>
    }
    uint32_t start_time_pot2 = HAL_GetTick();
 8000b6e:	f001 f83d 	bl	8001bec <HAL_GetTick>
 8000b72:	60f8      	str	r0, [r7, #12]
    *lagtime = start_time_pot2 - start_time_motor2;
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	1ad2      	subs	r2, r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
    motor2_set_state(MOTOR_STOP,speed);
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <Lag+0x88>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff15 	bl	80009b4 <motor2_set_state>

    return 0;
 8000b8a:	2300      	movs	r3, #0

}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000090 	.word	0x20000090
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	080066b0 	.word	0x080066b0
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	ed2d 8b02 	vpush	{d8}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 ffb5 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f9a5 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f000 fc4d 	bl	8001458 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbe:	f000 fc2b 	bl	8001418 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bc2:	f000 fa09 	bl	8000fd8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bc6:	f000 fb89 	bl	80012dc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 fbfb 	bl	80013c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bce:	f000 fab7 	bl	8001140 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000bd2:	f000 fae3 	bl	800119c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret1 = HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Pot1_2, 2);
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	49bd      	ldr	r1, [pc, #756]	@ (8000ed0 <main+0x328>)
 8000bda:	48be      	ldr	r0, [pc, #760]	@ (8000ed4 <main+0x32c>)
 8000bdc:	f001 f98a 	bl	8001ef4 <HAL_ADC_Start_DMA>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef ret2 = HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000be4:	2100      	movs	r1, #0
 8000be6:	48bc      	ldr	r0, [pc, #752]	@ (8000ed8 <main+0x330>)
 8000be8:	f003 fc1c 	bl	8004424 <HAL_TIM_PWM_Start>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef ret3 = HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	48ba      	ldr	r0, [pc, #744]	@ (8000edc <main+0x334>)
 8000bf4:	f003 fc16 	bl	8004424 <HAL_TIM_PWM_Start>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	737b      	strb	r3, [r7, #13]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Lag(&lagtime2);
 8000bfc:	48b8      	ldr	r0, [pc, #736]	@ (8000ee0 <main+0x338>)
 8000bfe:	f7ff ff85 	bl	8000b0c <Lag>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000c02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c06:	f000 fffd 	bl	8001c04 <HAL_Delay>


	  moveMotor2ToADCValue(2270, 5);
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	f640 00de 	movw	r0, #2270	@ 0x8de
 8000c10:	f7ff ff1e 	bl	8000a50 <moveMotor2ToADCValue>
	  uint32_t Motor2_Start = HAL_GetTick();
 8000c14:	f000 ffea 	bl	8001bec <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
	  moveMotor2ToADCValue(510, 5);
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	f44f 70ff 	mov.w	r0, #510	@ 0x1fe
 8000c20:	f7ff ff16 	bl	8000a50 <moveMotor2ToADCValue>
	  uint32_t Motor2_End = HAL_GetTick();
 8000c24:	f000 ffe2 	bl	8001bec <HAL_GetTick>
 8000c28:	6078      	str	r0, [r7, #4]
	  uint32_t time_taken = Motor2_End - Motor2_Start ;
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	603b      	str	r3, [r7, #0]
	 // Lag(&lagtime2);
	  // --- SIMULATE REAL-TIME DATA ---
	  	      // In your final code, you will replace this with actual sensor readings
	  	      // and measurements for each of the 24 parameters.
	  	      parameters[0] = 3.20 + (HAL_GetTick() % 100) / 1000.0f; // X1 Time Min->Max
 8000c32:	f000 ffdb 	bl	8001bec <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4baa      	ldr	r3, [pc, #680]	@ (8000ee4 <main+0x33c>)
 8000c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2164      	movs	r1, #100	@ 0x64
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c50:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000ee8 <main+0x340>
 8000c54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c58:	ee16 0a90 	vmov	r0, s13
 8000c5c:	f7ff fc6c 	bl	8000538 <__aeabi_f2d>
 8000c60:	a38f      	add	r3, pc, #572	@ (adr r3, 8000ea0 <main+0x2f8>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	f7ff fb09 	bl	800027c <__adddf3>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	4610      	mov	r0, r2
 8000c70:	4619      	mov	r1, r3
 8000c72:	f7ff fcb9 	bl	80005e8 <__aeabi_d2f>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a9c      	ldr	r2, [pc, #624]	@ (8000eec <main+0x344>)
 8000c7a:	6013      	str	r3, [r2, #0]
	  	      parameters[1] = 3.10 + (HAL_GetTick() % 100) / 1000.0f; // X1 Time Max->Min
 8000c7c:	f000 ffb6 	bl	8001bec <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4b98      	ldr	r3, [pc, #608]	@ (8000ee4 <main+0x33c>)
 8000c84:	fba3 1302 	umull	r1, r3, r3, r2
 8000c88:	095b      	lsrs	r3, r3, #5
 8000c8a:	2164      	movs	r1, #100	@ 0x64
 8000c8c:	fb01 f303 	mul.w	r3, r1, r3
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8000ee8 <main+0x340>
 8000c9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ca2:	ee16 0a90 	vmov	r0, s13
 8000ca6:	f7ff fc47 	bl	8000538 <__aeabi_f2d>
 8000caa:	a37f      	add	r3, pc, #508	@ (adr r3, 8000ea8 <main+0x300>)
 8000cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb0:	f7ff fae4 	bl	800027c <__adddf3>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f7ff fc94 	bl	80005e8 <__aeabi_d2f>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a8a      	ldr	r2, [pc, #552]	@ (8000eec <main+0x344>)
 8000cc4:	6053      	str	r3, [r2, #4]
	  	      parameters[2] = 3.30 + (HAL_GetTick() % 100) / 1000.0f; // X2 Time Min->Max
 8000cc6:	f000 ff91 	bl	8001bec <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b85      	ldr	r3, [pc, #532]	@ (8000ee4 <main+0x33c>)
 8000cce:	fba3 1302 	umull	r1, r3, r3, r2
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2164      	movs	r1, #100	@ 0x64
 8000cd6:	fb01 f303 	mul.w	r3, r1, r3
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8000ee8 <main+0x340>
 8000ce8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000cec:	ee16 0a90 	vmov	r0, s13
 8000cf0:	f7ff fc22 	bl	8000538 <__aeabi_f2d>
 8000cf4:	a36e      	add	r3, pc, #440	@ (adr r3, 8000eb0 <main+0x308>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff fabf 	bl	800027c <__adddf3>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff fc6f 	bl	80005e8 <__aeabi_d2f>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a77      	ldr	r2, [pc, #476]	@ (8000eec <main+0x344>)
 8000d0e:	6093      	str	r3, [r2, #8]
	  	      parameters[3] = 3.40 + (HAL_GetTick() % 100) / 1000.0f; // X2 Time Max->Min
 8000d10:	f000 ff6c 	bl	8001bec <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	4b73      	ldr	r3, [pc, #460]	@ (8000ee4 <main+0x33c>)
 8000d18:	fba3 1302 	umull	r1, r3, r3, r2
 8000d1c:	095b      	lsrs	r3, r3, #5
 8000d1e:	2164      	movs	r1, #100	@ 0x64
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d2e:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8000ee8 <main+0x340>
 8000d32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d36:	ee16 0a90 	vmov	r0, s13
 8000d3a:	f7ff fbfd 	bl	8000538 <__aeabi_f2d>
 8000d3e:	a35e      	add	r3, pc, #376	@ (adr r3, 8000eb8 <main+0x310>)
 8000d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d44:	f7ff fa9a 	bl	800027c <__adddf3>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff fc4a 	bl	80005e8 <__aeabi_d2f>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a65      	ldr	r2, [pc, #404]	@ (8000eec <main+0x344>)
 8000d58:	60d3      	str	r3, [r2, #12]
	  	      parameters[4] = 0.13 + (HAL_GetTick() % 100) / 2000.0f; // X1 +15V I Min->Max
 8000d5a:	f000 ff47 	bl	8001bec <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	4b60      	ldr	r3, [pc, #384]	@ (8000ee4 <main+0x33c>)
 8000d62:	fba3 1302 	umull	r1, r3, r3, r2
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2164      	movs	r1, #100	@ 0x64
 8000d6a:	fb01 f303 	mul.w	r3, r1, r3
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d78:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000ef0 <main+0x348>
 8000d7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d80:	ee16 0a90 	vmov	r0, s13
 8000d84:	f7ff fbd8 	bl	8000538 <__aeabi_f2d>
 8000d88:	a34d      	add	r3, pc, #308	@ (adr r3, 8000ec0 <main+0x318>)
 8000d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8e:	f7ff fa75 	bl	800027c <__adddf3>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fc25 	bl	80005e8 <__aeabi_d2f>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a52      	ldr	r2, [pc, #328]	@ (8000eec <main+0x344>)
 8000da2:	6113      	str	r3, [r2, #16]
	  	      parameters[5] = 0.10 + (HAL_GetTick() % 100) / 2000.0f; // X1 -15V I Min->Max
 8000da4:	f000 ff22 	bl	8001bec <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee4 <main+0x33c>)
 8000dac:	fba3 1302 	umull	r1, r3, r3, r2
 8000db0:	095b      	lsrs	r3, r3, #5
 8000db2:	2164      	movs	r1, #100	@ 0x64
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000ef0 <main+0x348>
 8000dc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000dca:	ee16 0a90 	vmov	r0, s13
 8000dce:	f7ff fbb3 	bl	8000538 <__aeabi_f2d>
 8000dd2:	a33d      	add	r3, pc, #244	@ (adr r3, 8000ec8 <main+0x320>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff fa50 	bl	800027c <__adddf3>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fc00 	bl	80005e8 <__aeabi_d2f>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a40      	ldr	r2, [pc, #256]	@ (8000eec <main+0x344>)
 8000dec:	6153      	str	r3, [r2, #20]
	  	      // ... Fill in the rest of the 24 parameters with real or simulated data
	  	      for (int i = 6; i < NUM_PARAMETERS; i++) {
 8000dee:	2306      	movs	r3, #6
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e023      	b.n	8000e3c <main+0x294>
	  	          parameters[i] = (float)i + ((HAL_GetTick() % 1000) / 1000.0f);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000dfe:	f000 fef5 	bl	8001bec <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef4 <main+0x34c>)
 8000e06:	fba3 1302 	umull	r1, r3, r3, r2
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e10:	fb01 f303 	mul.w	r3, r1, r3
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e1e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8000ee8 <main+0x340>
 8000e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e26:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000e2a:	4a30      	ldr	r2, [pc, #192]	@ (8000eec <main+0x344>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	edc3 7a00 	vstr	s15, [r3]
	  	      for (int i = 6; i < NUM_PARAMETERS; i++) {
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b17      	cmp	r3, #23
 8000e40:	ddd8      	ble.n	8000df4 <main+0x24c>


	  	      // --- Print All 24 Parameters as a Single CSV Row ---
	  	      // The Python GUI expects a line starting with "DATA," followed by
	  	      // the 24 measured values, separated by commas.
	  	      printf("DATA,");
 8000e42:	482d      	ldr	r0, [pc, #180]	@ (8000ef8 <main+0x350>)
 8000e44:	f004 fd6a 	bl	800591c <iprintf>
	  	      for (int i = 0; i < NUM_PARAMETERS; i++) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	e019      	b.n	8000e82 <main+0x2da>
	  	    	  printf("%ld", (int32_t)(parameters[i] * 1000.0f)); // Using .3f for 3 decimal places
 8000e4e:	4a27      	ldr	r2, [pc, #156]	@ (8000eec <main+0x344>)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000ee8 <main+0x340>
 8000e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e66:	ee17 1a90 	vmov	r1, s15
 8000e6a:	4824      	ldr	r0, [pc, #144]	@ (8000efc <main+0x354>)
 8000e6c:	f004 fd56 	bl	800591c <iprintf>
	  	          if (i < NUM_PARAMETERS - 1) {
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	2b16      	cmp	r3, #22
 8000e74:	dc02      	bgt.n	8000e7c <main+0x2d4>
	  	              printf(",");
 8000e76:	202c      	movs	r0, #44	@ 0x2c
 8000e78:	f004 fd62 	bl	8005940 <putchar>
	  	      for (int i = 0; i < NUM_PARAMETERS; i++) {
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2b17      	cmp	r3, #23
 8000e86:	dde2      	ble.n	8000e4e <main+0x2a6>
	  	          }
	  	      }
	  	      printf("\n"); // End of data line
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f004 fd59 	bl	8005940 <putchar>
	  	      fflush(stdout);
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <main+0x358>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 fc6b 	bl	8005770 <fflush>
  {
 8000e9a:	e6b2      	b.n	8000c02 <main+0x5a>
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	9999999a 	.word	0x9999999a
 8000ea4:	40099999 	.word	0x40099999
 8000ea8:	cccccccd 	.word	0xcccccccd
 8000eac:	4008cccc 	.word	0x4008cccc
 8000eb0:	66666666 	.word	0x66666666
 8000eb4:	400a6666 	.word	0x400a6666
 8000eb8:	33333333 	.word	0x33333333
 8000ebc:	400b3333 	.word	0x400b3333
 8000ec0:	0a3d70a4 	.word	0x0a3d70a4
 8000ec4:	3fc0a3d7 	.word	0x3fc0a3d7
 8000ec8:	9999999a 	.word	0x9999999a
 8000ecc:	3fb99999 	.word	0x3fb99999
 8000ed0:	20000090 	.word	0x20000090
 8000ed4:	20000098 	.word	0x20000098
 8000ed8:	200001dc 	.word	0x200001dc
 8000edc:	20000194 	.word	0x20000194
 8000ee0:	20000094 	.word	0x20000094
 8000ee4:	51eb851f 	.word	0x51eb851f
 8000ee8:	447a0000 	.word	0x447a0000
 8000eec:	2000026c 	.word	0x2000026c
 8000ef0:	44fa0000 	.word	0x44fa0000
 8000ef4:	10624dd3 	.word	0x10624dd3
 8000ef8:	080068a8 	.word	0x080068a8
 8000efc:	080068b0 	.word	0x080068b0
 8000f00:	20000024 	.word	0x20000024

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	@ 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2230      	movs	r2, #48	@ 0x30
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 fe52 	bl	8005bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f38:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <SystemClock_Config+0xd0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <SystemClock_Config+0xd0>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <SystemClock_Config+0xd0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f74:	2308      	movs	r3, #8
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f78:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f82:	2307      	movs	r3, #7
 8000f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fd0a 	bl	80039a4 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f96:	f000 facd 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000faa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 ff6c 	bl	8003e94 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fc2:	f000 fab7 	bl	8001534 <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3750      	adds	r7, #80	@ 0x50
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b092      	sub	sp, #72	@ 0x48
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000fde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2220      	movs	r2, #32
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f004 fdd9 	bl	8005bbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b48      	ldr	r3, [pc, #288]	@ (800112c <MX_ADC1_Init+0x154>)
 800100c:	4a48      	ldr	r2, [pc, #288]	@ (8001130 <MX_ADC1_Init+0x158>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b46      	ldr	r3, [pc, #280]	@ (800112c <MX_ADC1_Init+0x154>)
 8001012:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b44      	ldr	r3, [pc, #272]	@ (800112c <MX_ADC1_Init+0x154>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800101e:	4b43      	ldr	r3, [pc, #268]	@ (800112c <MX_ADC1_Init+0x154>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001024:	4b41      	ldr	r3, [pc, #260]	@ (800112c <MX_ADC1_Init+0x154>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b40      	ldr	r3, [pc, #256]	@ (800112c <MX_ADC1_Init+0x154>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b3e      	ldr	r3, [pc, #248]	@ (800112c <MX_ADC1_Init+0x154>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b3c      	ldr	r3, [pc, #240]	@ (800112c <MX_ADC1_Init+0x154>)
 800103a:	4a3e      	ldr	r2, [pc, #248]	@ (8001134 <MX_ADC1_Init+0x15c>)
 800103c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <MX_ADC1_Init+0x154>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001044:	4b39      	ldr	r3, [pc, #228]	@ (800112c <MX_ADC1_Init+0x154>)
 8001046:	2202      	movs	r2, #2
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800104a:	4b38      	ldr	r3, [pc, #224]	@ (800112c <MX_ADC1_Init+0x154>)
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001052:	4b36      	ldr	r3, [pc, #216]	@ (800112c <MX_ADC1_Init+0x154>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	4834      	ldr	r0, [pc, #208]	@ (800112c <MX_ADC1_Init+0x154>)
 800105a:	f000 fdf7 	bl	8001c4c <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001064:	f000 fa66 	bl	8001534 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001068:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <MX_ADC1_Init+0x160>)
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	63bb      	str	r3, [r7, #56]	@ 0x38
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8001074:	2301      	movs	r3, #1
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  AnalogWDGConfig.ITMode = ENABLE;
 8001078:	2301      	movs	r3, #1
 800107a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800107e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001082:	4619      	mov	r1, r3
 8001084:	4829      	ldr	r0, [pc, #164]	@ (800112c <MX_ADC1_Init+0x154>)
 8001086:	f001 f993 	bl	80023b0 <HAL_ADC_AnalogWDGConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001090:	f000 fa50 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800109c:	2307      	movs	r3, #7
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4619      	mov	r1, r3
 80010a6:	4821      	ldr	r0, [pc, #132]	@ (800112c <MX_ADC1_Init+0x154>)
 80010a8:	f001 f860 	bl	800216c <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010b2:	f000 fa3f 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	4619      	mov	r1, r3
 80010c4:	4819      	ldr	r0, [pc, #100]	@ (800112c <MX_ADC1_Init+0x154>)
 80010c6:	f001 f851 	bl	800216c <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80010d0:	f000 fa30 	bl	8001534 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_ADC1_Init+0x164>)
 80010ea:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	480b      	ldr	r0, [pc, #44]	@ (800112c <MX_ADC1_Init+0x154>)
 80010fe:	f001 fb3f 	bl	8002780 <HAL_ADCEx_InjectedConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001108:	f000 fa14 	bl	8001534 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_ADC1_Init+0x154>)
 8001116:	f001 fb33 	bl	8002780 <HAL_ADCEx_InjectedConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8001120:	f000 fa08 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3748      	adds	r7, #72	@ 0x48
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000098 	.word	0x20000098
 8001130:	40012000 	.word	0x40012000
 8001134:	0f000001 	.word	0x0f000001
 8001138:	00800200 	.word	0x00800200
 800113c:	000f0001 	.word	0x000f0001

08001140 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_I2C1_Init+0x50>)
 8001146:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <MX_I2C1_Init+0x54>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_I2C1_Init+0x50>)
 800114c:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <MX_I2C1_Init+0x58>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_I2C1_Init+0x50>)
 800115e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001162:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001170:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <MX_I2C1_Init+0x50>)
 800117e:	f002 facd 	bl	800371c <HAL_I2C_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001188:	f000 f9d4 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000140 	.word	0x20000140
 8001194:	40005400 	.word	0x40005400
 8001198:	000186a0 	.word	0x000186a0

0800119c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	@ 0x58
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2220      	movs	r2, #32
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fcf1 	bl	8005bbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011da:	4b3e      	ldr	r3, [pc, #248]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80011dc:	4a3e      	ldr	r2, [pc, #248]	@ (80012d8 <MX_TIM1_Init+0x13c>)
 80011de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 69;
 80011e0:	4b3c      	ldr	r3, [pc, #240]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80011e2:	2245      	movs	r2, #69	@ 0x45
 80011e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b3b      	ldr	r3, [pc, #236]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 80011ec:	4b39      	ldr	r3, [pc, #228]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80011ee:	22c7      	movs	r2, #199	@ 0xc7
 80011f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f8:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b35      	ldr	r3, [pc, #212]	@ (80012d4 <MX_TIM1_Init+0x138>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001204:	4833      	ldr	r0, [pc, #204]	@ (80012d4 <MX_TIM1_Init+0x138>)
 8001206:	f003 f865 	bl	80042d4 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001210:	f000 f990 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001218:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800121e:	4619      	mov	r1, r3
 8001220:	482c      	ldr	r0, [pc, #176]	@ (80012d4 <MX_TIM1_Init+0x138>)
 8001222:	f003 fa89 	bl	8004738 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800122c:	f000 f982 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001230:	4828      	ldr	r0, [pc, #160]	@ (80012d4 <MX_TIM1_Init+0x138>)
 8001232:	f003 f89e 	bl	8004372 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800123c:	f000 f97a 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001248:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800124c:	4619      	mov	r1, r3
 800124e:	4821      	ldr	r0, [pc, #132]	@ (80012d4 <MX_TIM1_Init+0x138>)
 8001250:	f003 fe50 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800125a:	f000 f96b 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	@ 0x60
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	4814      	ldr	r0, [pc, #80]	@ (80012d4 <MX_TIM1_Init+0x138>)
 8001284:	f003 f996 	bl	80045b4 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800128e:	f000 f951 	bl	8001534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80012b6:	f003 fe99 	bl	8004fec <HAL_TIMEx_ConfigBreakDeadTime>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80012c0:	f000 f938 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <MX_TIM1_Init+0x138>)
 80012c6:	f000 fa61 	bl	800178c <HAL_TIM_MspPostInit>

}
 80012ca:	bf00      	nop
 80012cc:	3758      	adds	r7, #88	@ 0x58
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000194 	.word	0x20000194
 80012d8:	40010000 	.word	0x40010000

080012dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	@ 0x38
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 800130e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 69;
 8001314:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 8001316:	2245      	movs	r2, #69	@ 0x45
 8001318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001320:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 8001322:	22c7      	movs	r2, #199	@ 0xc7
 8001324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001332:	4823      	ldr	r0, [pc, #140]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 8001334:	f002 ffce 	bl	80042d4 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800133e:	f000 f8f9 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134c:	4619      	mov	r1, r3
 800134e:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 8001350:	f003 f9f2 	bl	8004738 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800135a:	f000 f8eb 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800135e:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 8001360:	f003 f807 	bl	8004372 <HAL_TIM_PWM_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800136a:	f000 f8e3 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	4619      	mov	r1, r3
 800137c:	4810      	ldr	r0, [pc, #64]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 800137e:	f003 fdb9 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001388:	f000 f8d4 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138c:	2360      	movs	r3, #96	@ 0x60
 800138e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 80013a4:	f003 f906 	bl	80045b4 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80013ae:	f000 f8c1 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <MX_TIM2_Init+0xe4>)
 80013b4:	f000 f9ea 	bl	800178c <HAL_TIM_MspPostInit>

}
 80013b8:	bf00      	nop
 80013ba:	3738      	adds	r7, #56	@ 0x38
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001dc 	.word	0x200001dc

080013c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <MX_USART2_UART_Init+0x50>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_USART2_UART_Init+0x4c>)
 80013fc:	f003 fe48 	bl	8005090 <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001406:	f000 f895 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000224 	.word	0x20000224
 8001414:	40004400 	.word	0x40004400

08001418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_DMA_Init+0x3c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <MX_DMA_Init+0x3c>)
 8001428:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_DMA_Init+0x3c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2038      	movs	r0, #56	@ 0x38
 8001440:	f001 fc0f 	bl	8002c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001444:	2038      	movs	r0, #56	@ 0x38
 8001446:	f001 fc28 	bl	8002c9a <HAL_NVIC_EnableIRQ>

}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b2e      	ldr	r3, [pc, #184]	@ (800152c <MX_GPIO_Init+0xd4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a2d      	ldr	r2, [pc, #180]	@ (800152c <MX_GPIO_Init+0xd4>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <MX_GPIO_Init+0xd4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <MX_GPIO_Init+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a26      	ldr	r2, [pc, #152]	@ (800152c <MX_GPIO_Init+0xd4>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b24      	ldr	r3, [pc, #144]	@ (800152c <MX_GPIO_Init+0xd4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a18      	ldr	r2, [pc, #96]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a11      	ldr	r2, [pc, #68]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_GPIO_Init+0xd4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8001500:	480b      	ldr	r0, [pc, #44]	@ (8001530 <MX_GPIO_Init+0xd8>)
 8001502:	f002 f8f1 	bl	80036e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001506:	f44f 6378 	mov.w	r3, #3968	@ 0xf80
 800150a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4804      	ldr	r0, [pc, #16]	@ (8001530 <MX_GPIO_Init+0xd8>)
 8001520:	f001 ff46 	bl	80033b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	@ 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40021000 	.word	0x40021000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <Error_Handler+0x8>

08001540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	4a0f      	ldr	r2, [pc, #60]	@ (800158c <HAL_MspInit+0x4c>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001554:	6453      	str	r3, [r2, #68]	@ 0x44
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_MspInit+0x4c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800157e:	2007      	movs	r0, #7
 8001580:	f001 fb64 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a33      	ldr	r2, [pc, #204]	@ (800167c <HAL_ADC_MspInit+0xec>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d15f      	bne.n	8001672 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <HAL_ADC_MspInit+0xf0>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	4a31      	ldr	r2, [pc, #196]	@ (8001680 <HAL_ADC_MspInit+0xf0>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_ADC_MspInit+0xf0>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <HAL_ADC_MspInit+0xf0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001680 <HAL_ADC_MspInit+0xf0>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <HAL_ADC_MspInit+0xf0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015ea:	2306      	movs	r3, #6
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4821      	ldr	r0, [pc, #132]	@ (8001684 <HAL_ADC_MspInit+0xf4>)
 80015fe:	f001 fed7 	bl	80033b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 8001604:	4a21      	ldr	r2, [pc, #132]	@ (800168c <HAL_ADC_MspInit+0xfc>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 800161c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001620:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 8001624:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001628:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 800162c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001630:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 8001634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001638:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001646:	4810      	ldr	r0, [pc, #64]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 8001648:	f001 fb42 	bl	8002cd0 <HAL_DMA_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001652:	f7ff ff6f 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 800165a:	639a      	str	r2, [r3, #56]	@ 0x38
 800165c:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_ADC_MspInit+0xf8>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2012      	movs	r0, #18
 8001668:	f001 fafb 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800166c:	2012      	movs	r0, #18
 800166e:	f001 fb14 	bl	8002c9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40012000 	.word	0x40012000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000
 8001688:	200000e0 	.word	0x200000e0
 800168c:	40026410 	.word	0x40026410

08001690 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <HAL_I2C_MspInit+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12b      	bne.n	800170a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <HAL_I2C_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a17      	ldr	r2, [pc, #92]	@ (8001718 <HAL_I2C_MspInit+0x88>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_I2C_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ce:	23c0      	movs	r3, #192	@ 0xc0
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016de:	2304      	movs	r3, #4
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	480c      	ldr	r0, [pc, #48]	@ (800171c <HAL_I2C_MspInit+0x8c>)
 80016ea:	f001 fe61 	bl	80033b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_I2C_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <HAL_I2C_MspInit+0x88>)
 80016f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_I2C_MspInit+0x88>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	@ 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005400 	.word	0x40005400
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400

08001720 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <HAL_TIM_Base_MspInit+0x64>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10e      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <HAL_TIM_Base_MspInit+0x68>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <HAL_TIM_Base_MspInit+0x68>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6453      	str	r3, [r2, #68]	@ 0x44
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_TIM_Base_MspInit+0x68>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174e:	e012      	b.n	8001776 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001758:	d10d      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_TIM_Base_MspInit+0x68>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a09      	ldr	r2, [pc, #36]	@ (8001788 <HAL_TIM_Base_MspInit+0x68>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <HAL_TIM_Base_MspInit+0x68>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40010000 	.word	0x40010000
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a24      	ldr	r2, [pc, #144]	@ (800183c <HAL_TIM_MspPostInit+0xb0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d11f      	bne.n	80017ee <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <HAL_TIM_MspPostInit+0xb4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a22      	ldr	r2, [pc, #136]	@ (8001840 <HAL_TIM_MspPostInit+0xb4>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_TIM_MspPostInit+0xb4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017dc:	2301      	movs	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4817      	ldr	r0, [pc, #92]	@ (8001844 <HAL_TIM_MspPostInit+0xb8>)
 80017e8:	f001 fde2 	bl	80033b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017ec:	e022      	b.n	8001834 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f6:	d11d      	bne.n	8001834 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_TIM_MspPostInit+0xb4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <HAL_TIM_MspPostInit+0xb4>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6313      	str	r3, [r2, #48]	@ 0x30
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_TIM_MspPostInit+0xb4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001814:	2301      	movs	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001824:	2301      	movs	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <HAL_TIM_MspPostInit+0xb8>)
 8001830:	f001 fdbe 	bl	80033b0 <HAL_GPIO_Init>
}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	@ 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40010000 	.word	0x40010000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a19      	ldr	r2, [pc, #100]	@ (80018cc <HAL_UART_MspInit+0x84>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d12b      	bne.n	80018c2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_UART_MspInit+0x88>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <HAL_UART_MspInit+0x88>)
 8001874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_UART_MspInit+0x88>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_UART_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <HAL_UART_MspInit+0x88>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_UART_MspInit+0x88>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018a2:	2360      	movs	r3, #96	@ 0x60
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b2:	2307      	movs	r3, #7
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <HAL_UART_MspInit+0x8c>)
 80018be:	f001 fd77 	bl	80033b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	@ 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40004400 	.word	0x40004400
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020c00 	.word	0x40020c00

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <NMI_Handler+0x4>

080018e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <MemManage_Handler+0x4>

080018f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192e:	f000 f949 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <ADC_IRQHandler+0x10>)
 800193e:	f000 f9c8 	bl	8001cd2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000098 	.word	0x20000098

0800194c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <DMA2_Stream0_IRQHandler+0x10>)
 8001952:	f001 fac3 	bl	8002edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000e0 	.word	0x200000e0

08001960 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e00a      	b.n	8001988 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001972:	f3af 8000 	nop.w
 8001976:	4601      	mov	r1, r0
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	b2ca      	uxtb	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf0      	blt.n	8001972 <_read+0x12>
  }

  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e009      	b.n	80019c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf1      	blt.n	80019ac <_write+0x12>
  }
  return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_close>:

int _close(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019fa:	605a      	str	r2, [r3, #4]
  return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_isatty>:

int _isatty(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f004 f8f4 	bl	8005c58 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <_sbrk+0x64>)
 8001a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20020000 	.word	0x20020000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	200002cc 	.word	0x200002cc
 8001aa4:	20000420 	.word	0x20000420

08001aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <SystemInit+0x20>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <SystemInit+0x20>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ad0:	f7ff ffea 	bl	8001aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ad6:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aec:	4c0a      	ldr	r4, [pc, #40]	@ (8001b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afa:	f004 f8b3 	bl	8005c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff f853 	bl	8000ba8 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b10:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 8001b14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b18:	20000420 	.word	0x20000420

08001b1c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <CAN1_RX0_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f001 f87f 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f808 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fcf4 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 f897 	bl	8002cb6 <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f001 f85f 	bl	8002c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	20000014 	.word	0x20000014
 8001bc0:	20000010 	.word	0x20000010

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000014 	.word	0x20000014
 8001be8:	200002d0 	.word	0x200002d0

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200002d0 	.word	0x200002d0

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000014 	.word	0x20000014

08001c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e033      	b.n	8001cca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fc90 	bl	8001590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c92:	f023 0302 	bic.w	r3, r3, #2
 8001c96:	f043 0202 	orr.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fbe6 	bl	8002470 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cba:	e001      	b.n	8001cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d049      	beq.n	8001d9c <HAL_ADC_IRQHandler+0xca>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d046      	beq.n	8001d9c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d12b      	bne.n	8001d8c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d127      	bne.n	8001d8c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d119      	bne.n	8001d8c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0220 	bic.w	r2, r2, #32
 8001d66:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f9c5 	bl	800211c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0212 	mvn.w	r2, #18
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001daa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d057      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x190>
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d054      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d139      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12b      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d124      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11d      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d119      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e2c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d105      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fc8a 	bl	800276c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 020c 	mvn.w	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e70:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d017      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x1d6>
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d014      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f953 	bl	8002144 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f06f 0201 	mvn.w	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eb6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d015      	beq.n	8001eea <HAL_ADC_IRQHandler+0x218>
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d012      	beq.n	8001eea <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec8:	f043 0202 	orr.w	r2, r3, #2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0220 	mvn.w	r2, #32
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f93c 	bl	8002158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0220 	mvn.w	r2, #32
 8001ee8:	601a      	str	r2, [r3, #0]
  }
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Start_DMA+0x22>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0eb      	b.n	80020ee <HAL_ADC_Start_DMA+0x1fa>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d018      	beq.n	8001f5e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f3c:	4b6e      	ldr	r3, [pc, #440]	@ (80020f8 <HAL_ADC_Start_DMA+0x204>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6e      	ldr	r2, [pc, #440]	@ (80020fc <HAL_ADC_Start_DMA+0x208>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9a      	lsrs	r2, r3, #18
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f9      	bne.n	8001f52 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f6c:	d107      	bne.n	8001f7e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f7c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 80a3 	bne.w	80020d4 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fcc:	d106      	bne.n	8001fdc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f023 0206 	bic.w	r2, r3, #6
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fea:	4b45      	ldr	r3, [pc, #276]	@ (8002100 <HAL_ADC_Start_DMA+0x20c>)
 8001fec:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	4a44      	ldr	r2, [pc, #272]	@ (8002104 <HAL_ADC_Start_DMA+0x210>)
 8001ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	4a43      	ldr	r2, [pc, #268]	@ (8002108 <HAL_ADC_Start_DMA+0x214>)
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002002:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_ADC_Start_DMA+0x218>)
 8002004:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800200e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800201e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800202e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	334c      	adds	r3, #76	@ 0x4c
 800203a:	4619      	mov	r1, r3
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f000 fef4 	bl	8002e2c <HAL_DMA_Start_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d12a      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2d      	ldr	r2, [pc, #180]	@ (8002110 <HAL_ADC_Start_DMA+0x21c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d015      	beq.n	800208a <HAL_ADC_Start_DMA+0x196>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2c      	ldr	r2, [pc, #176]	@ (8002114 <HAL_ADC_Start_DMA+0x220>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d105      	bne.n	8002074 <HAL_ADC_Start_DMA+0x180>
 8002068:	4b25      	ldr	r3, [pc, #148]	@ (8002100 <HAL_ADC_Start_DMA+0x20c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a27      	ldr	r2, [pc, #156]	@ (8002118 <HAL_ADC_Start_DMA+0x224>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d136      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f8>
 800207e:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <HAL_ADC_Start_DMA+0x20c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d130      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d129      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e020      	b.n	80020ec <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a18      	ldr	r2, [pc, #96]	@ (8002110 <HAL_ADC_Start_DMA+0x21c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d11b      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f8>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d114      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	e00b      	b.n	80020ec <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80020ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000000c 	.word	0x2000000c
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	40012300 	.word	0x40012300
 8002104:	08002669 	.word	0x08002669
 8002108:	08002723 	.word	0x08002723
 800210c:	0800273f 	.word	0x0800273f
 8002110:	40012000 	.word	0x40012000
 8002114:	40012100 	.word	0x40012100
 8002118:	40012200 	.word	0x40012200

0800211c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1c>
 8002184:	2302      	movs	r3, #2
 8002186:	e105      	b.n	8002394 <HAL_ADC_ConfigChannel+0x228>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b09      	cmp	r3, #9
 8002196:	d925      	bls.n	80021e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	3b1e      	subs	r3, #30
 80021ae:	2207      	movs	r2, #7
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43da      	mvns	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	400a      	ands	r2, r1
 80021bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68d9      	ldr	r1, [r3, #12]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4403      	add	r3, r0
 80021d6:	3b1e      	subs	r3, #30
 80021d8:	409a      	lsls	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	e022      	b.n	800222a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6919      	ldr	r1, [r3, #16]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	2207      	movs	r2, #7
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	400a      	ands	r2, r1
 8002206:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	4603      	mov	r3, r0
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4403      	add	r3, r0
 8002220:	409a      	lsls	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b06      	cmp	r3, #6
 8002230:	d824      	bhi.n	800227c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b05      	subs	r3, #5
 8002244:	221f      	movs	r2, #31
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	400a      	ands	r2, r1
 8002252:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b05      	subs	r3, #5
 800226e:	fa00 f203 	lsl.w	r2, r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34
 800227a:	e04c      	b.n	8002316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d824      	bhi.n	80022ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b23      	subs	r3, #35	@ 0x23
 8002296:	221f      	movs	r2, #31
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43da      	mvns	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	400a      	ands	r2, r1
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b23      	subs	r3, #35	@ 0x23
 80022c0:	fa00 f203 	lsl.w	r2, r0, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80022cc:	e023      	b.n	8002316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	3b41      	subs	r3, #65	@ 0x41
 80022e0:	221f      	movs	r2, #31
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	400a      	ands	r2, r1
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4618      	mov	r0, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	3b41      	subs	r3, #65	@ 0x41
 800230a:	fa00 f203 	lsl.w	r2, r0, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <HAL_ADC_ConfigChannel+0x234>)
 8002318:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a21      	ldr	r2, [pc, #132]	@ (80023a4 <HAL_ADC_ConfigChannel+0x238>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d109      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1cc>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b12      	cmp	r3, #18
 800232a:	d105      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	@ (80023a4 <HAL_ADC_ConfigChannel+0x238>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d123      	bne.n	800238a <HAL_ADC_ConfigChannel+0x21e>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d003      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x1e6>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b11      	cmp	r3, #17
 8002350:	d11b      	bne.n	800238a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b10      	cmp	r3, #16
 8002364:	d111      	bne.n	800238a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <HAL_ADC_ConfigChannel+0x23c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a10      	ldr	r2, [pc, #64]	@ (80023ac <HAL_ADC_ConfigChannel+0x240>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	0c9a      	lsrs	r2, r3, #18
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800237c:	e002      	b.n	8002384 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40012300 	.word	0x40012300
 80023a4:	40012000 	.word	0x40012000
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	431bde83 	.word	0x431bde83

080023b0 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */

  /* Process locked */
  __HAL_LOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_AnalogWDGConfig+0x18>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e04d      	b.n	8002464 <HAL_ADC_AnalogWDGConfig+0xb4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (AnalogWDGConfig->ITMode == ENABLE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	7c1b      	ldrb	r3, [r3, #16]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	e007      	b.n	80023fa <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800240c:	6053      	str	r3, [r2, #4]

  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]

  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	6852      	ldr	r2, [r2, #4]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 021f 	bic.w	r2, r2, #31
 8002442:	605a      	str	r2, [r3, #4]

  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	b29b      	uxth	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002478:	4b79      	ldr	r3, [pc, #484]	@ (8002660 <ADC_Init+0x1f0>)
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	021a      	lsls	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002502:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <ADC_Init+0x1f4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6899      	ldr	r1, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	e00f      	b.n	800256e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800255c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800256c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0202 	bic.w	r2, r2, #2
 800257c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6899      	ldr	r1, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7e1b      	ldrb	r3, [r3, #24]
 8002588:	005a      	lsls	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	3b01      	subs	r3, #1
 80025c8:	035a      	lsls	r2, r3, #13
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	e007      	b.n	80025e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	3b01      	subs	r3, #1
 8002600:	051a      	lsls	r2, r3, #20
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002626:	025a      	lsls	r2, r3, #9
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	029a      	lsls	r2, r3, #10
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	609a      	str	r2, [r3, #8]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40012300 	.word	0x40012300
 8002664:	0f000001 	.word	0x0f000001

08002668 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002674:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800267e:	2b00      	cmp	r3, #0
 8002680:	d13c      	bne.n	80026fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d12b      	bne.n	80026f4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d127      	bne.n	80026f4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d119      	bne.n	80026f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0220 	bic.w	r2, r2, #32
 80026ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff fd11 	bl	800211c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026fa:	e00e      	b.n	800271a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff fd25 	bl	8002158 <HAL_ADC_ErrorCallback>
}
 800270e:	e004      	b.n	800271a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff fcfd 	bl	8002130 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2240      	movs	r2, #64	@ 0x40
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff fcfa 	bl	8002158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002794:	2302      	movs	r3, #2
 8002796:	e17d      	b.n	8002a94 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d925      	bls.n	80027f4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68d9      	ldr	r1, [r3, #12]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	3b1e      	subs	r3, #30
 80027be:	2207      	movs	r2, #7
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68d9      	ldr	r1, [r3, #12]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	4603      	mov	r3, r0
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4403      	add	r3, r0
 80027e6:	3b1e      	subs	r3, #30
 80027e8:	409a      	lsls	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	e022      	b.n	800283a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6919      	ldr	r1, [r3, #16]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	2207      	movs	r2, #7
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	400a      	ands	r2, r1
 8002816:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6919      	ldr	r1, [r3, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	4603      	mov	r3, r0
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4403      	add	r3, r0
 8002830:	409a      	lsls	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002848:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	3b01      	subs	r3, #1
 8002856:	051a      	lsls	r2, r3, #20
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3303      	adds	r3, #3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	221f      	movs	r2, #31
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43da      	mvns	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	400a      	ands	r2, r1
 8002890:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3303      	adds	r3, #3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	fa00 f203 	lsl.w	r2, r0, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a74      	ldr	r2, [pc, #464]	@ (8002aa0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d022      	beq.n	8002918 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80028e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002902:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	e00f      	b.n	8002938 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002926:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002936:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	7d5b      	ldrb	r3, [r3, #21]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	e007      	b.n	8002962 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002960:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	7d1b      	ldrb	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	e007      	b.n	800298c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800298a:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d02e      	beq.n	80029f2 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002994:	2b03      	cmp	r3, #3
 8002996:	d840      	bhi.n	8002a1a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002998:	2b01      	cmp	r3, #1
 800299a:	d002      	beq.n	80029a2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800299c:	2b02      	cmp	r3, #2
 800299e:	d014      	beq.n	80029ca <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80029a0:	e03b      	b.n	8002a1a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80029b0:	f023 030f 	bic.w	r3, r3, #15
 80029b4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6959      	ldr	r1, [r3, #20]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	615a      	str	r2, [r3, #20]
      break;
 80029c8:	e03b      	b.n	8002a42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80029d8:	f023 030f 	bic.w	r3, r3, #15
 80029dc:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
      break;
 80029f0:	e027      	b.n	8002a42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002a00:	f023 030f 	bic.w	r3, r3, #15
 8002a04:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69d9      	ldr	r1, [r3, #28]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	61da      	str	r2, [r3, #28]
      break;
 8002a18:	e013      	b.n	8002a42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002a28:	f023 030f 	bic.w	r3, r3, #15
 8002a2c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a19      	ldr	r1, [r3, #32]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	621a      	str	r2, [r3, #32]
      break;
 8002a40:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a42:	4b18      	ldr	r3, [pc, #96]	@ (8002aa4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002a44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d109      	bne.n	8002a64 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b12      	cmp	r3, #18
 8002a56:	d105      	bne.n	8002a64 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10d      	bne.n	8002a8a <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d003      	beq.n	8002a7e <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b11      	cmp	r3, #17
 8002a7c:	d105      	bne.n	8002a8a <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	000f0001 	.word	0x000f0001
 8002aa4:	40012300 	.word	0x40012300
 8002aa8:	40012000 	.word	0x40012000

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4907      	ldr	r1, [pc, #28]	@ (8002b48 <__NVIC_EnableIRQ+0x38>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	@ 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff29 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff3e 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff8e 	bl	8002ba0 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5d 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff31 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffa2 	bl	8002c08 <SysTick_Config>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cdc:	f7fe ff86 	bl	8001bec <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e099      	b.n	8002e20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0c:	e00f      	b.n	8002d2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d0e:	f7fe ff6d 	bl	8001bec <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d908      	bls.n	8002d2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e078      	b.n	8002e20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e8      	bne.n	8002d0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <HAL_DMA_Init+0x158>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d107      	bne.n	8002d98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	4313      	orrs	r3, r2
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0307 	bic.w	r3, r3, #7
 8002dae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d117      	bne.n	8002df2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fa6f 	bl	80032b8 <DMA_CheckFifoParam>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2240      	movs	r2, #64	@ 0x40
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dee:	2301      	movs	r3, #1
 8002df0:	e016      	b.n	8002e20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa26 	bl	800324c <DMA_CalcBaseAndBitshift>
 8002e00:	4603      	mov	r3, r0
 8002e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	223f      	movs	r2, #63	@ 0x3f
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	f010803f 	.word	0xf010803f

08002e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_DMA_Start_IT+0x26>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e040      	b.n	8002ed4 <HAL_DMA_Start_IT+0xa8>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d12f      	bne.n	8002ec6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f9b8 	bl	80031f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	223f      	movs	r2, #63	@ 0x3f
 8002e86:	409a      	lsls	r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0216 	orr.w	r2, r2, #22
 8002e9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0208 	orr.w	r2, r2, #8
 8002eb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e005      	b.n	8002ed2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8003124 <HAL_DMA_IRQHandler+0x248>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a8e      	ldr	r2, [pc, #568]	@ (8003128 <HAL_DMA_IRQHandler+0x24c>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0a9b      	lsrs	r3, r3, #10
 8002ef4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f06:	2208      	movs	r2, #8
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01a      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0204 	bic.w	r2, r2, #4
 8002f2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f34:	2208      	movs	r2, #8
 8002f36:	409a      	lsls	r2, r3
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	2204      	movs	r2, #4
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	f043 0204 	orr.w	r2, r3, #4
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	2210      	movs	r2, #16
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d043      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03c      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d018      	beq.n	800301e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d108      	bne.n	800300c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d024      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
 800300a:	e01f      	b.n	800304c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
 800301c:	e016      	b.n	800304c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0208 	bic.w	r2, r2, #8
 800303a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	2220      	movs	r2, #32
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 808f 	beq.w	800317c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8087 	beq.w	800317c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	2220      	movs	r2, #32
 8003074:	409a      	lsls	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b05      	cmp	r3, #5
 8003084:	d136      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0216 	bic.w	r2, r2, #22
 8003094:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_DMA_IRQHandler+0x1da>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0208 	bic.w	r2, r2, #8
 80030c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	223f      	movs	r2, #63	@ 0x3f
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d07e      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
        }
        return;
 80030f2:	e079      	b.n	80031e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01d      	beq.n	800313e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	2b00      	cmp	r3, #0
 8003116:	d031      	beq.n	800317c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e02c      	b.n	800317c <HAL_DMA_IRQHandler+0x2a0>
 8003122:	bf00      	nop
 8003124:	2000000c 	.word	0x2000000c
 8003128:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e01e      	b.n	800317c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10f      	bne.n	800316c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0210 	bic.w	r2, r2, #16
 800315a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003180:	2b00      	cmp	r3, #0
 8003182:	d032      	beq.n	80031ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2205      	movs	r2, #5
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d307      	bcc.n	80031c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f2      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x2cc>
 80031c2:	e000      	b.n	80031c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
 80031e6:	e000      	b.n	80031ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80031e8:	bf00      	nop
    }
  }
}
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800320c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b40      	cmp	r3, #64	@ 0x40
 800321c:	d108      	bne.n	8003230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800322e:	e007      	b.n	8003240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	3b10      	subs	r3, #16
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <DMA_CalcBaseAndBitshift+0x64>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003266:	4a13      	ldr	r2, [pc, #76]	@ (80032b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d909      	bls.n	800328e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	1d1a      	adds	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	659a      	str	r2, [r3, #88]	@ 0x58
 800328c:	e007      	b.n	800329e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	aaaaaaab 	.word	0xaaaaaaab
 80032b4:	080068cc 	.word	0x080068cc

080032b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11f      	bne.n	8003312 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d856      	bhi.n	8003386 <DMA_CheckFifoParam+0xce>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <DMA_CheckFifoParam+0x28>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	08003303 	.word	0x08003303
 80032e8:	080032f1 	.word	0x080032f1
 80032ec:	08003387 	.word	0x08003387
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d046      	beq.n	800338a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003300:	e043      	b.n	800338a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800330a:	d140      	bne.n	800338e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003310:	e03d      	b.n	800338e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800331a:	d121      	bne.n	8003360 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d837      	bhi.n	8003392 <DMA_CheckFifoParam+0xda>
 8003322:	a201      	add	r2, pc, #4	@ (adr r2, 8003328 <DMA_CheckFifoParam+0x70>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003339 	.word	0x08003339
 800332c:	0800333f 	.word	0x0800333f
 8003330:	08003339 	.word	0x08003339
 8003334:	08003351 	.word	0x08003351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	e030      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d025      	beq.n	8003396 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334e:	e022      	b.n	8003396 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003358:	d11f      	bne.n	800339a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800335e:	e01c      	b.n	800339a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d903      	bls.n	800336e <DMA_CheckFifoParam+0xb6>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d003      	beq.n	8003374 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800336c:	e018      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      break;
 8003372:	e015      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00e      	beq.n	800339e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e00b      	b.n	800339e <DMA_CheckFifoParam+0xe6>
      break;
 8003386:	bf00      	nop
 8003388:	e00a      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
 800338c:	e008      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 800338e:	bf00      	nop
 8003390:	e006      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
 8003394:	e004      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003396:	bf00      	nop
 8003398:	e002      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 800339e:	bf00      	nop
    }
  } 
  
  return status; 
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	@ 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	e16b      	b.n	80036a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033cc:	2201      	movs	r2, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f040 815a 	bne.w	800369e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d005      	beq.n	8003402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d130      	bne.n	8003464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 0201 	and.w	r2, r3, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b03      	cmp	r3, #3
 800346e:	d017      	beq.n	80034a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d123      	bne.n	80034f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	08da      	lsrs	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3208      	adds	r2, #8
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80b4 	beq.w	800369e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b60      	ldr	r3, [pc, #384]	@ (80036bc <HAL_GPIO_Init+0x30c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	4a5f      	ldr	r2, [pc, #380]	@ (80036bc <HAL_GPIO_Init+0x30c>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003544:	6453      	str	r3, [r2, #68]	@ 0x44
 8003546:	4b5d      	ldr	r3, [pc, #372]	@ (80036bc <HAL_GPIO_Init+0x30c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003552:	4a5b      	ldr	r2, [pc, #364]	@ (80036c0 <HAL_GPIO_Init+0x310>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	@ (80036c4 <HAL_GPIO_Init+0x314>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02b      	beq.n	80035d6 <HAL_GPIO_Init+0x226>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a51      	ldr	r2, [pc, #324]	@ (80036c8 <HAL_GPIO_Init+0x318>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d025      	beq.n	80035d2 <HAL_GPIO_Init+0x222>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a50      	ldr	r2, [pc, #320]	@ (80036cc <HAL_GPIO_Init+0x31c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <HAL_GPIO_Init+0x21e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4f      	ldr	r2, [pc, #316]	@ (80036d0 <HAL_GPIO_Init+0x320>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d019      	beq.n	80035ca <HAL_GPIO_Init+0x21a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4e      	ldr	r2, [pc, #312]	@ (80036d4 <HAL_GPIO_Init+0x324>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_GPIO_Init+0x216>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4d      	ldr	r2, [pc, #308]	@ (80036d8 <HAL_GPIO_Init+0x328>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00d      	beq.n	80035c2 <HAL_GPIO_Init+0x212>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	@ (80036dc <HAL_GPIO_Init+0x32c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <HAL_GPIO_Init+0x20e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4b      	ldr	r2, [pc, #300]	@ (80036e0 <HAL_GPIO_Init+0x330>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_GPIO_Init+0x20a>
 80035b6:	2307      	movs	r3, #7
 80035b8:	e00e      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e00c      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035be:	2306      	movs	r3, #6
 80035c0:	e00a      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035c2:	2305      	movs	r3, #5
 80035c4:	e008      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035d6:	2300      	movs	r3, #0
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f002 0203 	and.w	r2, r2, #3
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	@ (80036c0 <HAL_GPIO_Init+0x310>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035f6:	4b3b      	ldr	r3, [pc, #236]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361a:	4a32      	ldr	r2, [pc, #200]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003620:	4b30      	ldr	r3, [pc, #192]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003644:	4a27      	ldr	r2, [pc, #156]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800364a:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800366e:	4a1d      	ldr	r2, [pc, #116]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003674:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003698:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	f67f ae90 	bls.w	80033cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3724      	adds	r7, #36	@ 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40021c00 	.word	0x40021c00
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e12b      	b.n	8003986 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd ffa4 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	@ 0x24
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800376e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800377e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003780:	f000 fd80 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8003784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a81      	ldr	r2, [pc, #516]	@ (8003990 <HAL_I2C_Init+0x274>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d807      	bhi.n	80037a0 <HAL_I2C_Init+0x84>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a80      	ldr	r2, [pc, #512]	@ (8003994 <HAL_I2C_Init+0x278>)
 8003794:	4293      	cmp	r3, r2
 8003796:	bf94      	ite	ls
 8003798:	2301      	movls	r3, #1
 800379a:	2300      	movhi	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e006      	b.n	80037ae <HAL_I2C_Init+0x92>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003998 <HAL_I2C_Init+0x27c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	bf94      	ite	ls
 80037a8:	2301      	movls	r3, #1
 80037aa:	2300      	movhi	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0e7      	b.n	8003986 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a78      	ldr	r2, [pc, #480]	@ (800399c <HAL_I2C_Init+0x280>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0c9b      	lsrs	r3, r3, #18
 80037c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_I2C_Init+0x274>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d802      	bhi.n	80037f0 <HAL_I2C_Init+0xd4>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3301      	adds	r3, #1
 80037ee:	e009      	b.n	8003804 <HAL_I2C_Init+0xe8>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	4a69      	ldr	r2, [pc, #420]	@ (80039a0 <HAL_I2C_Init+0x284>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	3301      	adds	r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	430b      	orrs	r3, r1
 800380a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003816:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	495c      	ldr	r1, [pc, #368]	@ (8003990 <HAL_I2C_Init+0x274>)
 8003820:	428b      	cmp	r3, r1
 8003822:	d819      	bhi.n	8003858 <HAL_I2C_Init+0x13c>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e59      	subs	r1, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003832:	1c59      	adds	r1, r3, #1
 8003834:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003838:	400b      	ands	r3, r1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_I2C_Init+0x138>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e59      	subs	r1, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fbb1 f3f3 	udiv	r3, r1, r3
 800384c:	3301      	adds	r3, #1
 800384e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003852:	e051      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 8003854:	2304      	movs	r3, #4
 8003856:	e04f      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <HAL_I2C_Init+0x168>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e012      	b.n	80038aa <HAL_I2C_Init+0x18e>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	0099      	lsls	r1, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Init+0x196>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e022      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10e      	bne.n	80038d8 <HAL_I2C_Init+0x1bc>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e58      	subs	r0, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	440b      	add	r3, r1
 80038c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d6:	e00f      	b.n	80038f8 <HAL_I2C_Init+0x1dc>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	0099      	lsls	r1, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	6809      	ldr	r1, [r1, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6911      	ldr	r1, [r2, #16]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68d2      	ldr	r2, [r2, #12]
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	000186a0 	.word	0x000186a0
 8003994:	001e847f 	.word	0x001e847f
 8003998:	003d08ff 	.word	0x003d08ff
 800399c:	431bde83 	.word	0x431bde83
 80039a0:	10624dd3 	.word	0x10624dd3

080039a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e267      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d075      	beq.n	8003aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039c2:	4b88      	ldr	r3, [pc, #544]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d00c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ce:	4b85      	ldr	r3, [pc, #532]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d112      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039da:	4b82      	ldr	r3, [pc, #520]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	4b7e      	ldr	r3, [pc, #504]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d05b      	beq.n	8003aac <HAL_RCC_OscConfig+0x108>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d157      	bne.n	8003aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e242      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a08:	d106      	bne.n	8003a18 <HAL_RCC_OscConfig+0x74>
 8003a0a:	4b76      	ldr	r3, [pc, #472]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a75      	ldr	r2, [pc, #468]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e01d      	b.n	8003a54 <HAL_RCC_OscConfig+0xb0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x98>
 8003a22:	4b70      	ldr	r3, [pc, #448]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6f      	ldr	r2, [pc, #444]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6c      	ldr	r2, [pc, #432]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCC_OscConfig+0xb0>
 8003a3c:	4b69      	ldr	r3, [pc, #420]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a68      	ldr	r2, [pc, #416]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a65      	ldr	r2, [pc, #404]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe f8c6 	bl	8001bec <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe f8c2 	bl	8001bec <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	@ 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e207      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b5b      	ldr	r3, [pc, #364]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0xc0>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe f8b2 	bl	8001bec <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe f8ae 	bl	8001bec <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	@ 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1f3      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	4b51      	ldr	r3, [pc, #324]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0xe8>
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d063      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aba:	4b4a      	ldr	r3, [pc, #296]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac6:	4b47      	ldr	r3, [pc, #284]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d11c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad2:	4b44      	ldr	r3, [pc, #272]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x152>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1c7      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af6:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4937      	ldr	r1, [pc, #220]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0a:	e03a      	b.n	8003b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b14:	4b34      	ldr	r3, [pc, #208]	@ (8003be8 <HAL_RCC_OscConfig+0x244>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fe f867 	bl	8001bec <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe f863 	bl	8001bec <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e1a8      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	4b2b      	ldr	r3, [pc, #172]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4925      	ldr	r1, [pc, #148]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b56:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <HAL_RCC_OscConfig+0x244>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f846 	bl	8001bec <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b64:	f7fe f842 	bl	8001bec <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e187      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d036      	beq.n	8003bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <HAL_RCC_OscConfig+0x248>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe f826 	bl	8001bec <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fe f822 	bl	8001bec <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e167      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x200>
 8003bc2:	e01b      	b.n	8003bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <HAL_RCC_OscConfig+0x248>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe f80f 	bl	8001bec <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	e00e      	b.n	8003bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd2:	f7fe f80b 	bl	8001bec <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d907      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e150      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	42470000 	.word	0x42470000
 8003bec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf0:	4b88      	ldr	r3, [pc, #544]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ea      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8097 	beq.w	8003d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0e:	4b81      	ldr	r3, [pc, #516]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	4a7c      	ldr	r2, [pc, #496]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	4b77      	ldr	r3, [pc, #476]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d118      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c46:	4b74      	ldr	r3, [pc, #464]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a73      	ldr	r2, [pc, #460]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c52:	f7fd ffcb 	bl	8001bec <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5a:	f7fd ffc7 	bl	8001bec <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e10c      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2ea>
 8003c80:	4b64      	ldr	r3, [pc, #400]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a63      	ldr	r2, [pc, #396]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	e01c      	b.n	8003cc8 <HAL_RCC_OscConfig+0x324>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x30c>
 8003c96:	4b5f      	ldr	r3, [pc, #380]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x324>
 8003cb0:	4b58      	ldr	r3, [pc, #352]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	4a57      	ldr	r2, [pc, #348]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbc:	4b55      	ldr	r3, [pc, #340]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc0:	4a54      	ldr	r2, [pc, #336]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f023 0304 	bic.w	r3, r3, #4
 8003cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd ff8c 	bl	8001bec <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fd ff88 	bl	8001bec <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0cb      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cee:	4b49      	ldr	r3, [pc, #292]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0ee      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x334>
 8003cfa:	e014      	b.n	8003d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd ff76 	bl	8001bec <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d04:	f7fd ff72 	bl	8001bec <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0b5      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ee      	bne.n	8003d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b39      	ldr	r3, [pc, #228]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	4a38      	ldr	r2, [pc, #224]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a1 	beq.w	8003e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d42:	4b34      	ldr	r3, [pc, #208]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d05c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d141      	bne.n	8003dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b31      	ldr	r3, [pc, #196]	@ (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd ff46 	bl	8001bec <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd ff42 	bl	8001bec <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e087      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	491b      	ldr	r1, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fd ff1b 	bl	8001bec <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fd ff17 	bl	8001bec <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e05c      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x416>
 8003dd8:	e054      	b.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b10      	ldr	r3, [pc, #64]	@ (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd ff04 	bl	8001bec <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd ff00 	bl	8001bec <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e045      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x444>
 8003e06:	e03d      	b.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e038      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <HAL_RCC_OscConfig+0x4ec>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d121      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11a      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0cc      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b68      	ldr	r3, [pc, #416]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d90c      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b65      	ldr	r3, [pc, #404]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b63      	ldr	r3, [pc, #396]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0b8      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee8:	4b59      	ldr	r3, [pc, #356]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a58      	ldr	r2, [pc, #352]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f00:	4b53      	ldr	r3, [pc, #332]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a52      	ldr	r2, [pc, #328]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b50      	ldr	r3, [pc, #320]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	494d      	ldr	r1, [pc, #308]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d044      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b47      	ldr	r3, [pc, #284]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d119      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e07f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	4b3f      	ldr	r3, [pc, #252]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e067      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b37      	ldr	r3, [pc, #220]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4934      	ldr	r1, [pc, #208]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f84:	f7fd fe32 	bl	8001bec <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fd fe2e 	bl	8001bec <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e04f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b25      	ldr	r3, [pc, #148]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d20c      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b22      	ldr	r3, [pc, #136]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b20      	ldr	r3, [pc, #128]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e032      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4916      	ldr	r1, [pc, #88]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004006:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	490e      	ldr	r1, [pc, #56]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800401a:	f000 f821 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490a      	ldr	r1, [pc, #40]	@ (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a09      	ldr	r2, [pc, #36]	@ (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004036:	4b09      	ldr	r3, [pc, #36]	@ (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd fd92 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00
 8004050:	40023800 	.word	0x40023800
 8004054:	080068b4 	.word	0x080068b4
 8004058:	2000000c 	.word	0x2000000c
 800405c:	20000010 	.word	0x20000010

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004064:	b094      	sub	sp, #80	@ 0x50
 8004066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004078:	4b79      	ldr	r3, [pc, #484]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d00d      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004084:	2b08      	cmp	r3, #8
 8004086:	f200 80e1 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x1ec>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x34>
 800408e:	2b04      	cmp	r3, #4
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x3a>
 8004092:	e0db      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b73      	ldr	r3, [pc, #460]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x204>)
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004098:	e0db      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409a:	4b73      	ldr	r3, [pc, #460]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x208>)
 800409c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800409e:	e0d8      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d063      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	2200      	movs	r2, #0
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ca:	2300      	movs	r3, #0
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040d2:	4622      	mov	r2, r4
 80040d4:	462b      	mov	r3, r5
 80040d6:	f04f 0000 	mov.w	r0, #0
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	0159      	lsls	r1, r3, #5
 80040e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e4:	0150      	lsls	r0, r2, #5
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4621      	mov	r1, r4
 80040ec:	1a51      	subs	r1, r2, r1
 80040ee:	6139      	str	r1, [r7, #16]
 80040f0:	4629      	mov	r1, r5
 80040f2:	eb63 0301 	sbc.w	r3, r3, r1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004104:	4659      	mov	r1, fp
 8004106:	018b      	lsls	r3, r1, #6
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410e:	4651      	mov	r1, sl
 8004110:	018a      	lsls	r2, r1, #6
 8004112:	4651      	mov	r1, sl
 8004114:	ebb2 0801 	subs.w	r8, r2, r1
 8004118:	4659      	mov	r1, fp
 800411a:	eb63 0901 	sbc.w	r9, r3, r1
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800412a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004132:	4690      	mov	r8, r2
 8004134:	4699      	mov	r9, r3
 8004136:	4623      	mov	r3, r4
 8004138:	eb18 0303 	adds.w	r3, r8, r3
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	462b      	mov	r3, r5
 8004140:	eb49 0303 	adc.w	r3, r9, r3
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004152:	4629      	mov	r1, r5
 8004154:	024b      	lsls	r3, r1, #9
 8004156:	4621      	mov	r1, r4
 8004158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800415c:	4621      	mov	r1, r4
 800415e:	024a      	lsls	r2, r1, #9
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004166:	2200      	movs	r2, #0
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800416c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004170:	f7fc fa8a 	bl	8000688 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4613      	mov	r3, r2
 800417a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800417c:	e058      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417e:	4b38      	ldr	r3, [pc, #224]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	099b      	lsrs	r3, r3, #6
 8004184:	2200      	movs	r2, #0
 8004186:	4618      	mov	r0, r3
 8004188:	4611      	mov	r1, r2
 800418a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	2300      	movs	r3, #0
 8004192:	627b      	str	r3, [r7, #36]	@ 0x24
 8004194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	f04f 0000 	mov.w	r0, #0
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	0159      	lsls	r1, r3, #5
 80041a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041aa:	0150      	lsls	r0, r2, #5
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4641      	mov	r1, r8
 80041b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041b6:	4649      	mov	r1, r9
 80041b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041d0:	ebb2 040a 	subs.w	r4, r2, sl
 80041d4:	eb63 050b 	sbc.w	r5, r3, fp
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	00eb      	lsls	r3, r5, #3
 80041e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e6:	00e2      	lsls	r2, r4, #3
 80041e8:	4614      	mov	r4, r2
 80041ea:	461d      	mov	r5, r3
 80041ec:	4643      	mov	r3, r8
 80041ee:	18e3      	adds	r3, r4, r3
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	464b      	mov	r3, r9
 80041f4:	eb45 0303 	adc.w	r3, r5, r3
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004206:	4629      	mov	r1, r5
 8004208:	028b      	lsls	r3, r1, #10
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004210:	4621      	mov	r1, r4
 8004212:	028a      	lsls	r2, r1, #10
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800421a:	2200      	movs	r2, #0
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	61fa      	str	r2, [r7, #28]
 8004220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004224:	f7fc fa30 	bl	8000688 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4613      	mov	r3, r2
 800422e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004230:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800424a:	e002      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x204>)
 800424e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004254:	4618      	mov	r0, r3
 8004256:	3750      	adds	r7, #80	@ 0x50
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	00f42400 	.word	0x00f42400
 8004268:	007a1200 	.word	0x007a1200

0800426c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b03      	ldr	r3, [pc, #12]	@ (8004280 <HAL_RCC_GetHCLKFreq+0x14>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	2000000c 	.word	0x2000000c

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004288:	f7ff fff0 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0a9b      	lsrs	r3, r3, #10
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4903      	ldr	r1, [pc, #12]	@ (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	080068c4 	.word	0x080068c4

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042b0:	f7ff ffdc 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0b5b      	lsrs	r3, r3, #13
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	080068c4 	.word	0x080068c4

080042d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e041      	b.n	800436a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd fa10 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 fad8 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e041      	b.n	8004408 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d106      	bne.n	800439e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f839 	bl	8004410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f000 fa89 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_TIM_PWM_Start+0x24>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e022      	b.n	800448e <HAL_TIM_PWM_Start+0x6a>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b04      	cmp	r3, #4
 800444c:	d109      	bne.n	8004462 <HAL_TIM_PWM_Start+0x3e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	bf14      	ite	ne
 800445a:	2301      	movne	r3, #1
 800445c:	2300      	moveq	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e015      	b.n	800448e <HAL_TIM_PWM_Start+0x6a>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d109      	bne.n	800447c <HAL_TIM_PWM_Start+0x58>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e008      	b.n	800448e <HAL_TIM_PWM_Start+0x6a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e07c      	b.n	8004590 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Start+0x82>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a4:	e013      	b.n	80044ce <HAL_TIM_PWM_Start+0xaa>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Start+0x92>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b4:	e00b      	b.n	80044ce <HAL_TIM_PWM_Start+0xaa>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_PWM_Start+0xa2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c4:	e003      	b.n	80044ce <HAL_TIM_PWM_Start+0xaa>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	6839      	ldr	r1, [r7, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fce6 	bl	8004ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004598 <HAL_TIM_PWM_Start+0x174>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_TIM_PWM_Start+0xcc>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2c      	ldr	r2, [pc, #176]	@ (800459c <HAL_TIM_PWM_Start+0x178>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_TIM_PWM_Start+0xd0>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_TIM_PWM_Start+0xd2>
 80044f4:	2300      	movs	r3, #0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a22      	ldr	r2, [pc, #136]	@ (8004598 <HAL_TIM_PWM_Start+0x174>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <HAL_TIM_PWM_Start+0x136>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d01d      	beq.n	800455a <HAL_TIM_PWM_Start+0x136>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <HAL_TIM_PWM_Start+0x17c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <HAL_TIM_PWM_Start+0x136>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1d      	ldr	r2, [pc, #116]	@ (80045a4 <HAL_TIM_PWM_Start+0x180>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_TIM_PWM_Start+0x136>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1c      	ldr	r2, [pc, #112]	@ (80045a8 <HAL_TIM_PWM_Start+0x184>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_TIM_PWM_Start+0x136>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a16      	ldr	r2, [pc, #88]	@ (800459c <HAL_TIM_PWM_Start+0x178>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_TIM_PWM_Start+0x136>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <HAL_TIM_PWM_Start+0x188>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_TIM_PWM_Start+0x136>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a16      	ldr	r2, [pc, #88]	@ (80045b0 <HAL_TIM_PWM_Start+0x18c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d111      	bne.n	800457e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b06      	cmp	r3, #6
 800456a:	d010      	beq.n	800458e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457c:	e007      	b.n	800458e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40010000 	.word	0x40010000
 800459c:	40010400 	.word	0x40010400
 80045a0:	40000400 	.word	0x40000400
 80045a4:	40000800 	.word	0x40000800
 80045a8:	40000c00 	.word	0x40000c00
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40001800 	.word	0x40001800

080045b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e0ae      	b.n	8004730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	f200 809f 	bhi.w	8004720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	08004721 	.word	0x08004721
 80045f0:	08004721 	.word	0x08004721
 80045f4:	08004721 	.word	0x08004721
 80045f8:	0800465d 	.word	0x0800465d
 80045fc:	08004721 	.word	0x08004721
 8004600:	08004721 	.word	0x08004721
 8004604:	08004721 	.word	0x08004721
 8004608:	0800469f 	.word	0x0800469f
 800460c:	08004721 	.word	0x08004721
 8004610:	08004721 	.word	0x08004721
 8004614:	08004721 	.word	0x08004721
 8004618:	080046df 	.word	0x080046df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f9f6 	bl	8004a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0208 	orr.w	r2, r2, #8
 8004636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0204 	bic.w	r2, r2, #4
 8004646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	619a      	str	r2, [r3, #24]
      break;
 800465a:	e064      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fa46 	bl	8004af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6999      	ldr	r1, [r3, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	021a      	lsls	r2, r3, #8
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	619a      	str	r2, [r3, #24]
      break;
 800469c:	e043      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fa9b 	bl	8004be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0208 	orr.w	r2, r2, #8
 80046b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0204 	bic.w	r2, r2, #4
 80046c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	61da      	str	r2, [r3, #28]
      break;
 80046dc:	e023      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 faef 	bl	8004cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69d9      	ldr	r1, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	021a      	lsls	r2, r3, #8
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	61da      	str	r2, [r3, #28]
      break;
 800471e:	e002      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
      break;
 8004724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x1c>
 8004750:	2302      	movs	r3, #2
 8004752:	e0b4      	b.n	80048be <HAL_TIM_ConfigClockSource+0x186>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800477a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478c:	d03e      	beq.n	800480c <HAL_TIM_ConfigClockSource+0xd4>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004792:	f200 8087 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	f000 8086 	beq.w	80048aa <HAL_TIM_ConfigClockSource+0x172>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	d87f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d01a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xa6>
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d87b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d050      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x11a>
 80047b0:	2b60      	cmp	r3, #96	@ 0x60
 80047b2:	d877      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d03c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xfa>
 80047b8:	2b50      	cmp	r3, #80	@ 0x50
 80047ba:	d873      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d058      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x13a>
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d86f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d064      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047c8:	2b30      	cmp	r3, #48	@ 0x30
 80047ca:	d86b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d060      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d867      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d05a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	e062      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	f000 fb3b 	bl	8004e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e04f      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481c:	f000 fb24 	bl	8004e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482e:	609a      	str	r2, [r3, #8]
      break;
 8004830:	e03c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fa98 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2150      	movs	r1, #80	@ 0x50
 800484a:	4618      	mov	r0, r3
 800484c:	f000 faf1 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004850:	e02c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	461a      	mov	r2, r3
 8004860:	f000 fab7 	bl	8004dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2160      	movs	r1, #96	@ 0x60
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fae1 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004870:	e01c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fa78 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fad1 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004890:	e00c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 fac8 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 80048a2:	e003      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      break;
 80048a8:	e000      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a43      	ldr	r2, [pc, #268]	@ (80049e8 <TIM_Base_SetConfig+0x120>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e6:	d00f      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a40      	ldr	r2, [pc, #256]	@ (80049ec <TIM_Base_SetConfig+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3f      	ldr	r2, [pc, #252]	@ (80049f0 <TIM_Base_SetConfig+0x128>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a3e      	ldr	r2, [pc, #248]	@ (80049f4 <TIM_Base_SetConfig+0x12c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a3d      	ldr	r2, [pc, #244]	@ (80049f8 <TIM_Base_SetConfig+0x130>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d108      	bne.n	800491a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a32      	ldr	r2, [pc, #200]	@ (80049e8 <TIM_Base_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02b      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004928:	d027      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a2f      	ldr	r2, [pc, #188]	@ (80049ec <TIM_Base_SetConfig+0x124>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d023      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a2e      	ldr	r2, [pc, #184]	@ (80049f0 <TIM_Base_SetConfig+0x128>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01f      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2d      	ldr	r2, [pc, #180]	@ (80049f4 <TIM_Base_SetConfig+0x12c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01b      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2c      	ldr	r2, [pc, #176]	@ (80049f8 <TIM_Base_SetConfig+0x130>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d017      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2b      	ldr	r2, [pc, #172]	@ (80049fc <TIM_Base_SetConfig+0x134>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2a      	ldr	r2, [pc, #168]	@ (8004a00 <TIM_Base_SetConfig+0x138>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00f      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a29      	ldr	r2, [pc, #164]	@ (8004a04 <TIM_Base_SetConfig+0x13c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00b      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a28      	ldr	r2, [pc, #160]	@ (8004a08 <TIM_Base_SetConfig+0x140>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d007      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a27      	ldr	r2, [pc, #156]	@ (8004a0c <TIM_Base_SetConfig+0x144>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a26      	ldr	r2, [pc, #152]	@ (8004a10 <TIM_Base_SetConfig+0x148>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d108      	bne.n	800498c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a0e      	ldr	r2, [pc, #56]	@ (80049e8 <TIM_Base_SetConfig+0x120>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0xf2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a10      	ldr	r2, [pc, #64]	@ (80049f8 <TIM_Base_SetConfig+0x130>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d103      	bne.n	80049c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f043 0204 	orr.w	r2, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40010400 	.word	0x40010400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800
 8004a08:	40001800 	.word	0x40001800
 8004a0c:	40001c00 	.word	0x40001c00
 8004a10:	40002000 	.word	0x40002000

08004a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f023 0201 	bic.w	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f023 0302 	bic.w	r3, r3, #2
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <TIM_OC1_SetConfig+0xd8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC1_SetConfig+0x64>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <TIM_OC1_SetConfig+0xdc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a15      	ldr	r2, [pc, #84]	@ (8004aec <TIM_OC1_SetConfig+0xd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_OC1_SetConfig+0x8e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	@ (8004af0 <TIM_OC1_SetConfig+0xdc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0210 	bic.w	r2, r3, #16
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a22      	ldr	r2, [pc, #136]	@ (8004bd8 <TIM_OC2_SetConfig+0xe4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC2_SetConfig+0x68>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a21      	ldr	r2, [pc, #132]	@ (8004bdc <TIM_OC2_SetConfig+0xe8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10d      	bne.n	8004b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	@ (8004bd8 <TIM_OC2_SetConfig+0xe4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC2_SetConfig+0x94>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a16      	ldr	r2, [pc, #88]	@ (8004bdc <TIM_OC2_SetConfig+0xe8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d113      	bne.n	8004bb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400

08004be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a21      	ldr	r2, [pc, #132]	@ (8004cc0 <TIM_OC3_SetConfig+0xe0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC3_SetConfig+0x66>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a20      	ldr	r2, [pc, #128]	@ (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10d      	bne.n	8004c62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	@ (8004cc0 <TIM_OC3_SetConfig+0xe0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_OC3_SetConfig+0x92>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	@ (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d113      	bne.n	8004c9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	621a      	str	r2, [r3, #32]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <TIM_OC4_SetConfig+0xa4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_OC4_SetConfig+0x68>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a11      	ldr	r2, [pc, #68]	@ (8004d70 <TIM_OC4_SetConfig+0xa8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d109      	bne.n	8004d44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40010400 	.word	0x40010400

08004d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0201 	bic.w	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 030a 	bic.w	r3, r3, #10
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	031b      	lsls	r3, r3, #12
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f043 0307 	orr.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2201      	movs	r2, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e05a      	b.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a21      	ldr	r2, [pc, #132]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f58:	d01d      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1a      	ldr	r2, [pc, #104]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a17      	ldr	r2, [pc, #92]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10c      	bne.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40001800 	.word	0x40001800

08004fec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005004:	2302      	movs	r3, #2
 8005006:	e03d      	b.n	8005084 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e042      	b.n	8005128 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fbc6 	bl	8001848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2224      	movs	r2, #36	@ 0x24
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f82b 	bl	8005130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b0c0      	sub	sp, #256	@ 0x100
 8005136:	af00      	add	r7, sp, #0
 8005138:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	68d9      	ldr	r1, [r3, #12]
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	ea40 0301 	orr.w	r3, r0, r1
 8005158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	431a      	orrs	r2, r3
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	431a      	orrs	r2, r3
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005188:	f021 010c 	bic.w	r1, r1, #12
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005196:	430b      	orrs	r3, r1
 8005198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	6999      	ldr	r1, [r3, #24]
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	ea40 0301 	orr.w	r3, r0, r1
 80051b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b8f      	ldr	r3, [pc, #572]	@ (80053fc <UART_SetConfig+0x2cc>)
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d005      	beq.n	80051d0 <UART_SetConfig+0xa0>
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005400 <UART_SetConfig+0x2d0>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d104      	bne.n	80051da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051d0:	f7ff f86c 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 80051d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051d8:	e003      	b.n	80051e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051da:	f7ff f853 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80051de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ec:	f040 810c 	bne.w	8005408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005202:	4622      	mov	r2, r4
 8005204:	462b      	mov	r3, r5
 8005206:	1891      	adds	r1, r2, r2
 8005208:	65b9      	str	r1, [r7, #88]	@ 0x58
 800520a:	415b      	adcs	r3, r3
 800520c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800520e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005212:	4621      	mov	r1, r4
 8005214:	eb12 0801 	adds.w	r8, r2, r1
 8005218:	4629      	mov	r1, r5
 800521a:	eb43 0901 	adc.w	r9, r3, r1
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800522a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800522e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005232:	4690      	mov	r8, r2
 8005234:	4699      	mov	r9, r3
 8005236:	4623      	mov	r3, r4
 8005238:	eb18 0303 	adds.w	r3, r8, r3
 800523c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005240:	462b      	mov	r3, r5
 8005242:	eb49 0303 	adc.w	r3, r9, r3
 8005246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005256:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800525a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800525e:	460b      	mov	r3, r1
 8005260:	18db      	adds	r3, r3, r3
 8005262:	653b      	str	r3, [r7, #80]	@ 0x50
 8005264:	4613      	mov	r3, r2
 8005266:	eb42 0303 	adc.w	r3, r2, r3
 800526a:	657b      	str	r3, [r7, #84]	@ 0x54
 800526c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005274:	f7fb fa08 	bl	8000688 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b61      	ldr	r3, [pc, #388]	@ (8005404 <UART_SetConfig+0x2d4>)
 800527e:	fba3 2302 	umull	r2, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	011c      	lsls	r4, r3, #4
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005290:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	1891      	adds	r1, r2, r2
 800529e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052a0:	415b      	adcs	r3, r3
 80052a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052a8:	4641      	mov	r1, r8
 80052aa:	eb12 0a01 	adds.w	sl, r2, r1
 80052ae:	4649      	mov	r1, r9
 80052b0:	eb43 0b01 	adc.w	fp, r3, r1
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c8:	4692      	mov	sl, r2
 80052ca:	469b      	mov	fp, r3
 80052cc:	4643      	mov	r3, r8
 80052ce:	eb1a 0303 	adds.w	r3, sl, r3
 80052d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052d6:	464b      	mov	r3, r9
 80052d8:	eb4b 0303 	adc.w	r3, fp, r3
 80052dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052f4:	460b      	mov	r3, r1
 80052f6:	18db      	adds	r3, r3, r3
 80052f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fa:	4613      	mov	r3, r2
 80052fc:	eb42 0303 	adc.w	r3, r2, r3
 8005300:	647b      	str	r3, [r7, #68]	@ 0x44
 8005302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800530a:	f7fb f9bd 	bl	8000688 <__aeabi_uldivmod>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4611      	mov	r1, r2
 8005314:	4b3b      	ldr	r3, [pc, #236]	@ (8005404 <UART_SetConfig+0x2d4>)
 8005316:	fba3 2301 	umull	r2, r3, r3, r1
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	2264      	movs	r2, #100	@ 0x64
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	1acb      	subs	r3, r1, r3
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800532a:	4b36      	ldr	r3, [pc, #216]	@ (8005404 <UART_SetConfig+0x2d4>)
 800532c:	fba3 2302 	umull	r2, r3, r3, r2
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005338:	441c      	add	r4, r3
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005344:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005354:	415b      	adcs	r3, r3
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800535c:	4641      	mov	r1, r8
 800535e:	1851      	adds	r1, r2, r1
 8005360:	6339      	str	r1, [r7, #48]	@ 0x30
 8005362:	4649      	mov	r1, r9
 8005364:	414b      	adcs	r3, r1
 8005366:	637b      	str	r3, [r7, #52]	@ 0x34
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005374:	4659      	mov	r1, fp
 8005376:	00cb      	lsls	r3, r1, #3
 8005378:	4651      	mov	r1, sl
 800537a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537e:	4651      	mov	r1, sl
 8005380:	00ca      	lsls	r2, r1, #3
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4603      	mov	r3, r0
 8005388:	4642      	mov	r2, r8
 800538a:	189b      	adds	r3, r3, r2
 800538c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005390:	464b      	mov	r3, r9
 8005392:	460a      	mov	r2, r1
 8005394:	eb42 0303 	adc.w	r3, r2, r3
 8005398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053b0:	460b      	mov	r3, r1
 80053b2:	18db      	adds	r3, r3, r3
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b6:	4613      	mov	r3, r2
 80053b8:	eb42 0303 	adc.w	r3, r2, r3
 80053bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053c6:	f7fb f95f 	bl	8000688 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <UART_SetConfig+0x2d4>)
 80053d0:	fba3 1302 	umull	r1, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2164      	movs	r1, #100	@ 0x64
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3332      	adds	r3, #50	@ 0x32
 80053e2:	4a08      	ldr	r2, [pc, #32]	@ (8005404 <UART_SetConfig+0x2d4>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f003 0207 	and.w	r2, r3, #7
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4422      	add	r2, r4
 80053f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053f8:	e106      	b.n	8005608 <UART_SetConfig+0x4d8>
 80053fa:	bf00      	nop
 80053fc:	40011000 	.word	0x40011000
 8005400:	40011400 	.word	0x40011400
 8005404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800540c:	2200      	movs	r2, #0
 800540e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005412:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800541a:	4642      	mov	r2, r8
 800541c:	464b      	mov	r3, r9
 800541e:	1891      	adds	r1, r2, r2
 8005420:	6239      	str	r1, [r7, #32]
 8005422:	415b      	adcs	r3, r3
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
 8005426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800542a:	4641      	mov	r1, r8
 800542c:	1854      	adds	r4, r2, r1
 800542e:	4649      	mov	r1, r9
 8005430:	eb43 0501 	adc.w	r5, r3, r1
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	00eb      	lsls	r3, r5, #3
 800543e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005442:	00e2      	lsls	r2, r4, #3
 8005444:	4614      	mov	r4, r2
 8005446:	461d      	mov	r5, r3
 8005448:	4643      	mov	r3, r8
 800544a:	18e3      	adds	r3, r4, r3
 800544c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005450:	464b      	mov	r3, r9
 8005452:	eb45 0303 	adc.w	r3, r5, r3
 8005456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005476:	4629      	mov	r1, r5
 8005478:	008b      	lsls	r3, r1, #2
 800547a:	4621      	mov	r1, r4
 800547c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005480:	4621      	mov	r1, r4
 8005482:	008a      	lsls	r2, r1, #2
 8005484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005488:	f7fb f8fe 	bl	8000688 <__aeabi_uldivmod>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4b60      	ldr	r3, [pc, #384]	@ (8005614 <UART_SetConfig+0x4e4>)
 8005492:	fba3 2302 	umull	r2, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	011c      	lsls	r4, r3, #4
 800549a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	1891      	adds	r1, r2, r2
 80054b2:	61b9      	str	r1, [r7, #24]
 80054b4:	415b      	adcs	r3, r3
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054bc:	4641      	mov	r1, r8
 80054be:	1851      	adds	r1, r2, r1
 80054c0:	6139      	str	r1, [r7, #16]
 80054c2:	4649      	mov	r1, r9
 80054c4:	414b      	adcs	r3, r1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d4:	4659      	mov	r1, fp
 80054d6:	00cb      	lsls	r3, r1, #3
 80054d8:	4651      	mov	r1, sl
 80054da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054de:	4651      	mov	r1, sl
 80054e0:	00ca      	lsls	r2, r1, #3
 80054e2:	4610      	mov	r0, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	4642      	mov	r2, r8
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054f0:	464b      	mov	r3, r9
 80054f2:	460a      	mov	r2, r1
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005506:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005514:	4649      	mov	r1, r9
 8005516:	008b      	lsls	r3, r1, #2
 8005518:	4641      	mov	r1, r8
 800551a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800551e:	4641      	mov	r1, r8
 8005520:	008a      	lsls	r2, r1, #2
 8005522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005526:	f7fb f8af 	bl	8000688 <__aeabi_uldivmod>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4611      	mov	r1, r2
 8005530:	4b38      	ldr	r3, [pc, #224]	@ (8005614 <UART_SetConfig+0x4e4>)
 8005532:	fba3 2301 	umull	r2, r3, r3, r1
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2264      	movs	r2, #100	@ 0x64
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	1acb      	subs	r3, r1, r3
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	3332      	adds	r3, #50	@ 0x32
 8005544:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <UART_SetConfig+0x4e4>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005550:	441c      	add	r4, r3
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005556:	2200      	movs	r2, #0
 8005558:	673b      	str	r3, [r7, #112]	@ 0x70
 800555a:	677a      	str	r2, [r7, #116]	@ 0x74
 800555c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	1891      	adds	r1, r2, r2
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	415b      	adcs	r3, r3
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005570:	4641      	mov	r1, r8
 8005572:	1851      	adds	r1, r2, r1
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	4649      	mov	r1, r9
 8005578:	414b      	adcs	r3, r1
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005588:	4659      	mov	r1, fp
 800558a:	00cb      	lsls	r3, r1, #3
 800558c:	4651      	mov	r1, sl
 800558e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005592:	4651      	mov	r1, sl
 8005594:	00ca      	lsls	r2, r1, #3
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	4603      	mov	r3, r0
 800559c:	4642      	mov	r2, r8
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055a2:	464b      	mov	r3, r9
 80055a4:	460a      	mov	r2, r1
 80055a6:	eb42 0303 	adc.w	r3, r2, r3
 80055aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80055b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055c4:	4649      	mov	r1, r9
 80055c6:	008b      	lsls	r3, r1, #2
 80055c8:	4641      	mov	r1, r8
 80055ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ce:	4641      	mov	r1, r8
 80055d0:	008a      	lsls	r2, r1, #2
 80055d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055d6:	f7fb f857 	bl	8000688 <__aeabi_uldivmod>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <UART_SetConfig+0x4e4>)
 80055e0:	fba3 1302 	umull	r1, r3, r3, r2
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	2164      	movs	r1, #100	@ 0x64
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	3332      	adds	r3, #50	@ 0x32
 80055f2:	4a08      	ldr	r2, [pc, #32]	@ (8005614 <UART_SetConfig+0x4e4>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f003 020f 	and.w	r2, r3, #15
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4422      	add	r2, r4
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800560e:	46bd      	mov	sp, r7
 8005610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005614:	51eb851f 	.word	0x51eb851f

08005618 <__sflush_r>:
 8005618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005620:	0716      	lsls	r6, r2, #28
 8005622:	4605      	mov	r5, r0
 8005624:	460c      	mov	r4, r1
 8005626:	d454      	bmi.n	80056d2 <__sflush_r+0xba>
 8005628:	684b      	ldr	r3, [r1, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	dc02      	bgt.n	8005634 <__sflush_r+0x1c>
 800562e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	dd48      	ble.n	80056c6 <__sflush_r+0xae>
 8005634:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005636:	2e00      	cmp	r6, #0
 8005638:	d045      	beq.n	80056c6 <__sflush_r+0xae>
 800563a:	2300      	movs	r3, #0
 800563c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005640:	682f      	ldr	r7, [r5, #0]
 8005642:	6a21      	ldr	r1, [r4, #32]
 8005644:	602b      	str	r3, [r5, #0]
 8005646:	d030      	beq.n	80056aa <__sflush_r+0x92>
 8005648:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	0759      	lsls	r1, r3, #29
 800564e:	d505      	bpl.n	800565c <__sflush_r+0x44>
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005656:	b10b      	cbz	r3, 800565c <__sflush_r+0x44>
 8005658:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005660:	6a21      	ldr	r1, [r4, #32]
 8005662:	4628      	mov	r0, r5
 8005664:	47b0      	blx	r6
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	d106      	bne.n	800567a <__sflush_r+0x62>
 800566c:	6829      	ldr	r1, [r5, #0]
 800566e:	291d      	cmp	r1, #29
 8005670:	d82b      	bhi.n	80056ca <__sflush_r+0xb2>
 8005672:	4a2a      	ldr	r2, [pc, #168]	@ (800571c <__sflush_r+0x104>)
 8005674:	40ca      	lsrs	r2, r1
 8005676:	07d6      	lsls	r6, r2, #31
 8005678:	d527      	bpl.n	80056ca <__sflush_r+0xb2>
 800567a:	2200      	movs	r2, #0
 800567c:	6062      	str	r2, [r4, #4]
 800567e:	04d9      	lsls	r1, r3, #19
 8005680:	6922      	ldr	r2, [r4, #16]
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	d504      	bpl.n	8005690 <__sflush_r+0x78>
 8005686:	1c42      	adds	r2, r0, #1
 8005688:	d101      	bne.n	800568e <__sflush_r+0x76>
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	b903      	cbnz	r3, 8005690 <__sflush_r+0x78>
 800568e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005692:	602f      	str	r7, [r5, #0]
 8005694:	b1b9      	cbz	r1, 80056c6 <__sflush_r+0xae>
 8005696:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800569a:	4299      	cmp	r1, r3
 800569c:	d002      	beq.n	80056a4 <__sflush_r+0x8c>
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 fb08 	bl	8005cb4 <_free_r>
 80056a4:	2300      	movs	r3, #0
 80056a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80056a8:	e00d      	b.n	80056c6 <__sflush_r+0xae>
 80056aa:	2301      	movs	r3, #1
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b0      	blx	r6
 80056b0:	4602      	mov	r2, r0
 80056b2:	1c50      	adds	r0, r2, #1
 80056b4:	d1c9      	bne.n	800564a <__sflush_r+0x32>
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0c6      	beq.n	800564a <__sflush_r+0x32>
 80056bc:	2b1d      	cmp	r3, #29
 80056be:	d001      	beq.n	80056c4 <__sflush_r+0xac>
 80056c0:	2b16      	cmp	r3, #22
 80056c2:	d11e      	bne.n	8005702 <__sflush_r+0xea>
 80056c4:	602f      	str	r7, [r5, #0]
 80056c6:	2000      	movs	r0, #0
 80056c8:	e022      	b.n	8005710 <__sflush_r+0xf8>
 80056ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ce:	b21b      	sxth	r3, r3
 80056d0:	e01b      	b.n	800570a <__sflush_r+0xf2>
 80056d2:	690f      	ldr	r7, [r1, #16]
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	d0f6      	beq.n	80056c6 <__sflush_r+0xae>
 80056d8:	0793      	lsls	r3, r2, #30
 80056da:	680e      	ldr	r6, [r1, #0]
 80056dc:	bf08      	it	eq
 80056de:	694b      	ldreq	r3, [r1, #20]
 80056e0:	600f      	str	r7, [r1, #0]
 80056e2:	bf18      	it	ne
 80056e4:	2300      	movne	r3, #0
 80056e6:	eba6 0807 	sub.w	r8, r6, r7
 80056ea:	608b      	str	r3, [r1, #8]
 80056ec:	f1b8 0f00 	cmp.w	r8, #0
 80056f0:	dde9      	ble.n	80056c6 <__sflush_r+0xae>
 80056f2:	6a21      	ldr	r1, [r4, #32]
 80056f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056f6:	4643      	mov	r3, r8
 80056f8:	463a      	mov	r2, r7
 80056fa:	4628      	mov	r0, r5
 80056fc:	47b0      	blx	r6
 80056fe:	2800      	cmp	r0, #0
 8005700:	dc08      	bgt.n	8005714 <__sflush_r+0xfc>
 8005702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800570a:	81a3      	strh	r3, [r4, #12]
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005714:	4407      	add	r7, r0
 8005716:	eba8 0800 	sub.w	r8, r8, r0
 800571a:	e7e7      	b.n	80056ec <__sflush_r+0xd4>
 800571c:	20400001 	.word	0x20400001

08005720 <_fflush_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	690b      	ldr	r3, [r1, #16]
 8005724:	4605      	mov	r5, r0
 8005726:	460c      	mov	r4, r1
 8005728:	b913      	cbnz	r3, 8005730 <_fflush_r+0x10>
 800572a:	2500      	movs	r5, #0
 800572c:	4628      	mov	r0, r5
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	b118      	cbz	r0, 800573a <_fflush_r+0x1a>
 8005732:	6a03      	ldr	r3, [r0, #32]
 8005734:	b90b      	cbnz	r3, 800573a <_fflush_r+0x1a>
 8005736:	f000 f8bb 	bl	80058b0 <__sinit>
 800573a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f3      	beq.n	800572a <_fflush_r+0xa>
 8005742:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005744:	07d0      	lsls	r0, r2, #31
 8005746:	d404      	bmi.n	8005752 <_fflush_r+0x32>
 8005748:	0599      	lsls	r1, r3, #22
 800574a:	d402      	bmi.n	8005752 <_fflush_r+0x32>
 800574c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800574e:	f000 faae 	bl	8005cae <__retarget_lock_acquire_recursive>
 8005752:	4628      	mov	r0, r5
 8005754:	4621      	mov	r1, r4
 8005756:	f7ff ff5f 	bl	8005618 <__sflush_r>
 800575a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800575c:	07da      	lsls	r2, r3, #31
 800575e:	4605      	mov	r5, r0
 8005760:	d4e4      	bmi.n	800572c <_fflush_r+0xc>
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	059b      	lsls	r3, r3, #22
 8005766:	d4e1      	bmi.n	800572c <_fflush_r+0xc>
 8005768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576a:	f000 faa1 	bl	8005cb0 <__retarget_lock_release_recursive>
 800576e:	e7dd      	b.n	800572c <_fflush_r+0xc>

08005770 <fflush>:
 8005770:	4601      	mov	r1, r0
 8005772:	b920      	cbnz	r0, 800577e <fflush+0xe>
 8005774:	4a04      	ldr	r2, [pc, #16]	@ (8005788 <fflush+0x18>)
 8005776:	4905      	ldr	r1, [pc, #20]	@ (800578c <fflush+0x1c>)
 8005778:	4805      	ldr	r0, [pc, #20]	@ (8005790 <fflush+0x20>)
 800577a:	f000 b8b1 	b.w	80058e0 <_fwalk_sglue>
 800577e:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <fflush+0x24>)
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	f7ff bfcd 	b.w	8005720 <_fflush_r>
 8005786:	bf00      	nop
 8005788:	20000018 	.word	0x20000018
 800578c:	08005721 	.word	0x08005721
 8005790:	20000028 	.word	0x20000028
 8005794:	20000024 	.word	0x20000024

08005798 <std>:
 8005798:	2300      	movs	r3, #0
 800579a:	b510      	push	{r4, lr}
 800579c:	4604      	mov	r4, r0
 800579e:	e9c0 3300 	strd	r3, r3, [r0]
 80057a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057a6:	6083      	str	r3, [r0, #8]
 80057a8:	8181      	strh	r1, [r0, #12]
 80057aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80057ac:	81c2      	strh	r2, [r0, #14]
 80057ae:	6183      	str	r3, [r0, #24]
 80057b0:	4619      	mov	r1, r3
 80057b2:	2208      	movs	r2, #8
 80057b4:	305c      	adds	r0, #92	@ 0x5c
 80057b6:	f000 fa01 	bl	8005bbc <memset>
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <std+0x58>)
 80057bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <std+0x5c>)
 80057c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <std+0x60>)
 80057c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <std+0x64>)
 80057c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <std+0x68>)
 80057cc:	6224      	str	r4, [r4, #32]
 80057ce:	429c      	cmp	r4, r3
 80057d0:	d006      	beq.n	80057e0 <std+0x48>
 80057d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057d6:	4294      	cmp	r4, r2
 80057d8:	d002      	beq.n	80057e0 <std+0x48>
 80057da:	33d0      	adds	r3, #208	@ 0xd0
 80057dc:	429c      	cmp	r4, r3
 80057de:	d105      	bne.n	80057ec <std+0x54>
 80057e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057e8:	f000 ba60 	b.w	8005cac <__retarget_lock_init_recursive>
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	bf00      	nop
 80057f0:	08005a0d 	.word	0x08005a0d
 80057f4:	08005a2f 	.word	0x08005a2f
 80057f8:	08005a67 	.word	0x08005a67
 80057fc:	08005a8b 	.word	0x08005a8b
 8005800:	200002d4 	.word	0x200002d4

08005804 <stdio_exit_handler>:
 8005804:	4a02      	ldr	r2, [pc, #8]	@ (8005810 <stdio_exit_handler+0xc>)
 8005806:	4903      	ldr	r1, [pc, #12]	@ (8005814 <stdio_exit_handler+0x10>)
 8005808:	4803      	ldr	r0, [pc, #12]	@ (8005818 <stdio_exit_handler+0x14>)
 800580a:	f000 b869 	b.w	80058e0 <_fwalk_sglue>
 800580e:	bf00      	nop
 8005810:	20000018 	.word	0x20000018
 8005814:	08005721 	.word	0x08005721
 8005818:	20000028 	.word	0x20000028

0800581c <cleanup_stdio>:
 800581c:	6841      	ldr	r1, [r0, #4]
 800581e:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <cleanup_stdio+0x34>)
 8005820:	4299      	cmp	r1, r3
 8005822:	b510      	push	{r4, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	d001      	beq.n	800582c <cleanup_stdio+0x10>
 8005828:	f7ff ff7a 	bl	8005720 <_fflush_r>
 800582c:	68a1      	ldr	r1, [r4, #8]
 800582e:	4b09      	ldr	r3, [pc, #36]	@ (8005854 <cleanup_stdio+0x38>)
 8005830:	4299      	cmp	r1, r3
 8005832:	d002      	beq.n	800583a <cleanup_stdio+0x1e>
 8005834:	4620      	mov	r0, r4
 8005836:	f7ff ff73 	bl	8005720 <_fflush_r>
 800583a:	68e1      	ldr	r1, [r4, #12]
 800583c:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <cleanup_stdio+0x3c>)
 800583e:	4299      	cmp	r1, r3
 8005840:	d004      	beq.n	800584c <cleanup_stdio+0x30>
 8005842:	4620      	mov	r0, r4
 8005844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005848:	f7ff bf6a 	b.w	8005720 <_fflush_r>
 800584c:	bd10      	pop	{r4, pc}
 800584e:	bf00      	nop
 8005850:	200002d4 	.word	0x200002d4
 8005854:	2000033c 	.word	0x2000033c
 8005858:	200003a4 	.word	0x200003a4

0800585c <global_stdio_init.part.0>:
 800585c:	b510      	push	{r4, lr}
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <global_stdio_init.part.0+0x30>)
 8005860:	4c0b      	ldr	r4, [pc, #44]	@ (8005890 <global_stdio_init.part.0+0x34>)
 8005862:	4a0c      	ldr	r2, [pc, #48]	@ (8005894 <global_stdio_init.part.0+0x38>)
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	4620      	mov	r0, r4
 8005868:	2200      	movs	r2, #0
 800586a:	2104      	movs	r1, #4
 800586c:	f7ff ff94 	bl	8005798 <std>
 8005870:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005874:	2201      	movs	r2, #1
 8005876:	2109      	movs	r1, #9
 8005878:	f7ff ff8e 	bl	8005798 <std>
 800587c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005880:	2202      	movs	r2, #2
 8005882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005886:	2112      	movs	r1, #18
 8005888:	f7ff bf86 	b.w	8005798 <std>
 800588c:	2000040c 	.word	0x2000040c
 8005890:	200002d4 	.word	0x200002d4
 8005894:	08005805 	.word	0x08005805

08005898 <__sfp_lock_acquire>:
 8005898:	4801      	ldr	r0, [pc, #4]	@ (80058a0 <__sfp_lock_acquire+0x8>)
 800589a:	f000 ba08 	b.w	8005cae <__retarget_lock_acquire_recursive>
 800589e:	bf00      	nop
 80058a0:	20000415 	.word	0x20000415

080058a4 <__sfp_lock_release>:
 80058a4:	4801      	ldr	r0, [pc, #4]	@ (80058ac <__sfp_lock_release+0x8>)
 80058a6:	f000 ba03 	b.w	8005cb0 <__retarget_lock_release_recursive>
 80058aa:	bf00      	nop
 80058ac:	20000415 	.word	0x20000415

080058b0 <__sinit>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4604      	mov	r4, r0
 80058b4:	f7ff fff0 	bl	8005898 <__sfp_lock_acquire>
 80058b8:	6a23      	ldr	r3, [r4, #32]
 80058ba:	b11b      	cbz	r3, 80058c4 <__sinit+0x14>
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c0:	f7ff bff0 	b.w	80058a4 <__sfp_lock_release>
 80058c4:	4b04      	ldr	r3, [pc, #16]	@ (80058d8 <__sinit+0x28>)
 80058c6:	6223      	str	r3, [r4, #32]
 80058c8:	4b04      	ldr	r3, [pc, #16]	@ (80058dc <__sinit+0x2c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f5      	bne.n	80058bc <__sinit+0xc>
 80058d0:	f7ff ffc4 	bl	800585c <global_stdio_init.part.0>
 80058d4:	e7f2      	b.n	80058bc <__sinit+0xc>
 80058d6:	bf00      	nop
 80058d8:	0800581d 	.word	0x0800581d
 80058dc:	2000040c 	.word	0x2000040c

080058e0 <_fwalk_sglue>:
 80058e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e4:	4607      	mov	r7, r0
 80058e6:	4688      	mov	r8, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	2600      	movs	r6, #0
 80058ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058f0:	f1b9 0901 	subs.w	r9, r9, #1
 80058f4:	d505      	bpl.n	8005902 <_fwalk_sglue+0x22>
 80058f6:	6824      	ldr	r4, [r4, #0]
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	d1f7      	bne.n	80058ec <_fwalk_sglue+0xc>
 80058fc:	4630      	mov	r0, r6
 80058fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d907      	bls.n	8005918 <_fwalk_sglue+0x38>
 8005908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800590c:	3301      	adds	r3, #1
 800590e:	d003      	beq.n	8005918 <_fwalk_sglue+0x38>
 8005910:	4629      	mov	r1, r5
 8005912:	4638      	mov	r0, r7
 8005914:	47c0      	blx	r8
 8005916:	4306      	orrs	r6, r0
 8005918:	3568      	adds	r5, #104	@ 0x68
 800591a:	e7e9      	b.n	80058f0 <_fwalk_sglue+0x10>

0800591c <iprintf>:
 800591c:	b40f      	push	{r0, r1, r2, r3}
 800591e:	b507      	push	{r0, r1, r2, lr}
 8005920:	4906      	ldr	r1, [pc, #24]	@ (800593c <iprintf+0x20>)
 8005922:	ab04      	add	r3, sp, #16
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	f853 2b04 	ldr.w	r2, [r3], #4
 800592a:	6881      	ldr	r1, [r0, #8]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	f000 fae3 	bl	8005ef8 <_vfiprintf_r>
 8005932:	b003      	add	sp, #12
 8005934:	f85d eb04 	ldr.w	lr, [sp], #4
 8005938:	b004      	add	sp, #16
 800593a:	4770      	bx	lr
 800593c:	20000024 	.word	0x20000024

08005940 <putchar>:
 8005940:	4b02      	ldr	r3, [pc, #8]	@ (800594c <putchar+0xc>)
 8005942:	4601      	mov	r1, r0
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	6882      	ldr	r2, [r0, #8]
 8005948:	f000 bddc 	b.w	8006504 <_putc_r>
 800594c:	20000024 	.word	0x20000024

08005950 <_puts_r>:
 8005950:	6a03      	ldr	r3, [r0, #32]
 8005952:	b570      	push	{r4, r5, r6, lr}
 8005954:	6884      	ldr	r4, [r0, #8]
 8005956:	4605      	mov	r5, r0
 8005958:	460e      	mov	r6, r1
 800595a:	b90b      	cbnz	r3, 8005960 <_puts_r+0x10>
 800595c:	f7ff ffa8 	bl	80058b0 <__sinit>
 8005960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005962:	07db      	lsls	r3, r3, #31
 8005964:	d405      	bmi.n	8005972 <_puts_r+0x22>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	0598      	lsls	r0, r3, #22
 800596a:	d402      	bmi.n	8005972 <_puts_r+0x22>
 800596c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800596e:	f000 f99e 	bl	8005cae <__retarget_lock_acquire_recursive>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	0719      	lsls	r1, r3, #28
 8005976:	d502      	bpl.n	800597e <_puts_r+0x2e>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d135      	bne.n	80059ea <_puts_r+0x9a>
 800597e:	4621      	mov	r1, r4
 8005980:	4628      	mov	r0, r5
 8005982:	f000 f8c5 	bl	8005b10 <__swsetup_r>
 8005986:	b380      	cbz	r0, 80059ea <_puts_r+0x9a>
 8005988:	f04f 35ff 	mov.w	r5, #4294967295
 800598c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800598e:	07da      	lsls	r2, r3, #31
 8005990:	d405      	bmi.n	800599e <_puts_r+0x4e>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	059b      	lsls	r3, r3, #22
 8005996:	d402      	bmi.n	800599e <_puts_r+0x4e>
 8005998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800599a:	f000 f989 	bl	8005cb0 <__retarget_lock_release_recursive>
 800599e:	4628      	mov	r0, r5
 80059a0:	bd70      	pop	{r4, r5, r6, pc}
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da04      	bge.n	80059b0 <_puts_r+0x60>
 80059a6:	69a2      	ldr	r2, [r4, #24]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	dc17      	bgt.n	80059dc <_puts_r+0x8c>
 80059ac:	290a      	cmp	r1, #10
 80059ae:	d015      	beq.n	80059dc <_puts_r+0x8c>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	6022      	str	r2, [r4, #0]
 80059b6:	7019      	strb	r1, [r3, #0]
 80059b8:	68a3      	ldr	r3, [r4, #8]
 80059ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059be:	3b01      	subs	r3, #1
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	2900      	cmp	r1, #0
 80059c4:	d1ed      	bne.n	80059a2 <_puts_r+0x52>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da11      	bge.n	80059ee <_puts_r+0x9e>
 80059ca:	4622      	mov	r2, r4
 80059cc:	210a      	movs	r1, #10
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 f85f 	bl	8005a92 <__swbuf_r>
 80059d4:	3001      	adds	r0, #1
 80059d6:	d0d7      	beq.n	8005988 <_puts_r+0x38>
 80059d8:	250a      	movs	r5, #10
 80059da:	e7d7      	b.n	800598c <_puts_r+0x3c>
 80059dc:	4622      	mov	r2, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 f857 	bl	8005a92 <__swbuf_r>
 80059e4:	3001      	adds	r0, #1
 80059e6:	d1e7      	bne.n	80059b8 <_puts_r+0x68>
 80059e8:	e7ce      	b.n	8005988 <_puts_r+0x38>
 80059ea:	3e01      	subs	r6, #1
 80059ec:	e7e4      	b.n	80059b8 <_puts_r+0x68>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	6022      	str	r2, [r4, #0]
 80059f4:	220a      	movs	r2, #10
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e7ee      	b.n	80059d8 <_puts_r+0x88>
	...

080059fc <puts>:
 80059fc:	4b02      	ldr	r3, [pc, #8]	@ (8005a08 <puts+0xc>)
 80059fe:	4601      	mov	r1, r0
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f7ff bfa5 	b.w	8005950 <_puts_r>
 8005a06:	bf00      	nop
 8005a08:	20000024 	.word	0x20000024

08005a0c <__sread>:
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	460c      	mov	r4, r1
 8005a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a14:	f000 f8fc 	bl	8005c10 <_read_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	bfab      	itete	ge
 8005a1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a20:	181b      	addge	r3, r3, r0
 8005a22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a26:	bfac      	ite	ge
 8005a28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a2a:	81a3      	strhlt	r3, [r4, #12]
 8005a2c:	bd10      	pop	{r4, pc}

08005a2e <__swrite>:
 8005a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a32:	461f      	mov	r7, r3
 8005a34:	898b      	ldrh	r3, [r1, #12]
 8005a36:	05db      	lsls	r3, r3, #23
 8005a38:	4605      	mov	r5, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	d505      	bpl.n	8005a4c <__swrite+0x1e>
 8005a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a44:	2302      	movs	r3, #2
 8005a46:	2200      	movs	r2, #0
 8005a48:	f000 f8d0 	bl	8005bec <_lseek_r>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	4632      	mov	r2, r6
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a62:	f000 b8e7 	b.w	8005c34 <_write_r>

08005a66 <__sseek>:
 8005a66:	b510      	push	{r4, lr}
 8005a68:	460c      	mov	r4, r1
 8005a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6e:	f000 f8bd 	bl	8005bec <_lseek_r>
 8005a72:	1c43      	adds	r3, r0, #1
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	bf15      	itete	ne
 8005a78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a82:	81a3      	strheq	r3, [r4, #12]
 8005a84:	bf18      	it	ne
 8005a86:	81a3      	strhne	r3, [r4, #12]
 8005a88:	bd10      	pop	{r4, pc}

08005a8a <__sclose>:
 8005a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8e:	f000 b89d 	b.w	8005bcc <_close_r>

08005a92 <__swbuf_r>:
 8005a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a94:	460e      	mov	r6, r1
 8005a96:	4614      	mov	r4, r2
 8005a98:	4605      	mov	r5, r0
 8005a9a:	b118      	cbz	r0, 8005aa4 <__swbuf_r+0x12>
 8005a9c:	6a03      	ldr	r3, [r0, #32]
 8005a9e:	b90b      	cbnz	r3, 8005aa4 <__swbuf_r+0x12>
 8005aa0:	f7ff ff06 	bl	80058b0 <__sinit>
 8005aa4:	69a3      	ldr	r3, [r4, #24]
 8005aa6:	60a3      	str	r3, [r4, #8]
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	071a      	lsls	r2, r3, #28
 8005aac:	d501      	bpl.n	8005ab2 <__swbuf_r+0x20>
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	b943      	cbnz	r3, 8005ac4 <__swbuf_r+0x32>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 f82b 	bl	8005b10 <__swsetup_r>
 8005aba:	b118      	cbz	r0, 8005ac4 <__swbuf_r+0x32>
 8005abc:	f04f 37ff 	mov.w	r7, #4294967295
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	6922      	ldr	r2, [r4, #16]
 8005ac8:	1a98      	subs	r0, r3, r2
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	b2f6      	uxtb	r6, r6
 8005ace:	4283      	cmp	r3, r0
 8005ad0:	4637      	mov	r7, r6
 8005ad2:	dc05      	bgt.n	8005ae0 <__swbuf_r+0x4e>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f7ff fe22 	bl	8005720 <_fflush_r>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d1ed      	bne.n	8005abc <__swbuf_r+0x2a>
 8005ae0:	68a3      	ldr	r3, [r4, #8]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	60a3      	str	r3, [r4, #8]
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	6022      	str	r2, [r4, #0]
 8005aec:	701e      	strb	r6, [r3, #0]
 8005aee:	6962      	ldr	r2, [r4, #20]
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d004      	beq.n	8005b00 <__swbuf_r+0x6e>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	07db      	lsls	r3, r3, #31
 8005afa:	d5e1      	bpl.n	8005ac0 <__swbuf_r+0x2e>
 8005afc:	2e0a      	cmp	r6, #10
 8005afe:	d1df      	bne.n	8005ac0 <__swbuf_r+0x2e>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff fe0c 	bl	8005720 <_fflush_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d0d9      	beq.n	8005ac0 <__swbuf_r+0x2e>
 8005b0c:	e7d6      	b.n	8005abc <__swbuf_r+0x2a>
	...

08005b10 <__swsetup_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4b29      	ldr	r3, [pc, #164]	@ (8005bb8 <__swsetup_r+0xa8>)
 8005b14:	4605      	mov	r5, r0
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	460c      	mov	r4, r1
 8005b1a:	b118      	cbz	r0, 8005b24 <__swsetup_r+0x14>
 8005b1c:	6a03      	ldr	r3, [r0, #32]
 8005b1e:	b90b      	cbnz	r3, 8005b24 <__swsetup_r+0x14>
 8005b20:	f7ff fec6 	bl	80058b0 <__sinit>
 8005b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b28:	0719      	lsls	r1, r3, #28
 8005b2a:	d422      	bmi.n	8005b72 <__swsetup_r+0x62>
 8005b2c:	06da      	lsls	r2, r3, #27
 8005b2e:	d407      	bmi.n	8005b40 <__swsetup_r+0x30>
 8005b30:	2209      	movs	r2, #9
 8005b32:	602a      	str	r2, [r5, #0]
 8005b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3e:	e033      	b.n	8005ba8 <__swsetup_r+0x98>
 8005b40:	0758      	lsls	r0, r3, #29
 8005b42:	d512      	bpl.n	8005b6a <__swsetup_r+0x5a>
 8005b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b46:	b141      	cbz	r1, 8005b5a <__swsetup_r+0x4a>
 8005b48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b4c:	4299      	cmp	r1, r3
 8005b4e:	d002      	beq.n	8005b56 <__swsetup_r+0x46>
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f8af 	bl	8005cb4 <_free_r>
 8005b56:	2300      	movs	r3, #0
 8005b58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	2300      	movs	r3, #0
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f043 0308 	orr.w	r3, r3, #8
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	b94b      	cbnz	r3, 8005b8a <__swsetup_r+0x7a>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b80:	d003      	beq.n	8005b8a <__swsetup_r+0x7a>
 8005b82:	4621      	mov	r1, r4
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 fc81 	bl	800648c <__smakebuf_r>
 8005b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8e:	f013 0201 	ands.w	r2, r3, #1
 8005b92:	d00a      	beq.n	8005baa <__swsetup_r+0x9a>
 8005b94:	2200      	movs	r2, #0
 8005b96:	60a2      	str	r2, [r4, #8]
 8005b98:	6962      	ldr	r2, [r4, #20]
 8005b9a:	4252      	negs	r2, r2
 8005b9c:	61a2      	str	r2, [r4, #24]
 8005b9e:	6922      	ldr	r2, [r4, #16]
 8005ba0:	b942      	cbnz	r2, 8005bb4 <__swsetup_r+0xa4>
 8005ba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ba6:	d1c5      	bne.n	8005b34 <__swsetup_r+0x24>
 8005ba8:	bd38      	pop	{r3, r4, r5, pc}
 8005baa:	0799      	lsls	r1, r3, #30
 8005bac:	bf58      	it	pl
 8005bae:	6962      	ldrpl	r2, [r4, #20]
 8005bb0:	60a2      	str	r2, [r4, #8]
 8005bb2:	e7f4      	b.n	8005b9e <__swsetup_r+0x8e>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e7f7      	b.n	8005ba8 <__swsetup_r+0x98>
 8005bb8:	20000024 	.word	0x20000024

08005bbc <memset>:
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <memset+0xa>
 8005bc4:	4770      	bx	lr
 8005bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bca:	e7f9      	b.n	8005bc0 <memset+0x4>

08005bcc <_close_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d06      	ldr	r5, [pc, #24]	@ (8005be8 <_close_r+0x1c>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	f7fb fefb 	bl	80019d2 <_close>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_close_r+0x1a>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_close_r+0x1a>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	20000410 	.word	0x20000410

08005bec <_lseek_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	@ (8005c0c <_lseek_r+0x20>)
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	602a      	str	r2, [r5, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f7fb ff10 	bl	8001a20 <_lseek>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_lseek_r+0x1e>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_lseek_r+0x1e>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	20000410 	.word	0x20000410

08005c10 <_read_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_read_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb fe9e 	bl	8001960 <_read>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_read_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_read_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000410 	.word	0x20000410

08005c34 <_write_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	@ (8005c54 <_write_r+0x20>)
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f7fb fea9 	bl	800199a <_write>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_write_r+0x1e>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_write_r+0x1e>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	20000410 	.word	0x20000410

08005c58 <__errno>:
 8005c58:	4b01      	ldr	r3, [pc, #4]	@ (8005c60 <__errno+0x8>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000024 	.word	0x20000024

08005c64 <__libc_init_array>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	4d0d      	ldr	r5, [pc, #52]	@ (8005c9c <__libc_init_array+0x38>)
 8005c68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ca0 <__libc_init_array+0x3c>)
 8005c6a:	1b64      	subs	r4, r4, r5
 8005c6c:	10a4      	asrs	r4, r4, #2
 8005c6e:	2600      	movs	r6, #0
 8005c70:	42a6      	cmp	r6, r4
 8005c72:	d109      	bne.n	8005c88 <__libc_init_array+0x24>
 8005c74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ca4 <__libc_init_array+0x40>)
 8005c76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ca8 <__libc_init_array+0x44>)
 8005c78:	f000 fcaa 	bl	80065d0 <_init>
 8005c7c:	1b64      	subs	r4, r4, r5
 8005c7e:	10a4      	asrs	r4, r4, #2
 8005c80:	2600      	movs	r6, #0
 8005c82:	42a6      	cmp	r6, r4
 8005c84:	d105      	bne.n	8005c92 <__libc_init_array+0x2e>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8c:	4798      	blx	r3
 8005c8e:	3601      	adds	r6, #1
 8005c90:	e7ee      	b.n	8005c70 <__libc_init_array+0xc>
 8005c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c96:	4798      	blx	r3
 8005c98:	3601      	adds	r6, #1
 8005c9a:	e7f2      	b.n	8005c82 <__libc_init_array+0x1e>
 8005c9c:	08006910 	.word	0x08006910
 8005ca0:	08006910 	.word	0x08006910
 8005ca4:	08006910 	.word	0x08006910
 8005ca8:	08006914 	.word	0x08006914

08005cac <__retarget_lock_init_recursive>:
 8005cac:	4770      	bx	lr

08005cae <__retarget_lock_acquire_recursive>:
 8005cae:	4770      	bx	lr

08005cb0 <__retarget_lock_release_recursive>:
 8005cb0:	4770      	bx	lr
	...

08005cb4 <_free_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	d041      	beq.n	8005d40 <_free_r+0x8c>
 8005cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc0:	1f0c      	subs	r4, r1, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfb8      	it	lt
 8005cc6:	18e4      	addlt	r4, r4, r3
 8005cc8:	f000 f8e0 	bl	8005e8c <__malloc_lock>
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d44 <_free_r+0x90>)
 8005cce:	6813      	ldr	r3, [r2, #0]
 8005cd0:	b933      	cbnz	r3, 8005ce0 <_free_r+0x2c>
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	6014      	str	r4, [r2, #0]
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cdc:	f000 b8dc 	b.w	8005e98 <__malloc_unlock>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d908      	bls.n	8005cf6 <_free_r+0x42>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf01      	itttt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	1809      	addeq	r1, r1, r0
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	e7ed      	b.n	8005cd2 <_free_r+0x1e>
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b10b      	cbz	r3, 8005d00 <_free_r+0x4c>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d9fa      	bls.n	8005cf6 <_free_r+0x42>
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	1850      	adds	r0, r2, r1
 8005d04:	42a0      	cmp	r0, r4
 8005d06:	d10b      	bne.n	8005d20 <_free_r+0x6c>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	1850      	adds	r0, r2, r1
 8005d0e:	4283      	cmp	r3, r0
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	d1e0      	bne.n	8005cd6 <_free_r+0x22>
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6053      	str	r3, [r2, #4]
 8005d1a:	4408      	add	r0, r1
 8005d1c:	6010      	str	r0, [r2, #0]
 8005d1e:	e7da      	b.n	8005cd6 <_free_r+0x22>
 8005d20:	d902      	bls.n	8005d28 <_free_r+0x74>
 8005d22:	230c      	movs	r3, #12
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	e7d6      	b.n	8005cd6 <_free_r+0x22>
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	1821      	adds	r1, r4, r0
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf04      	itt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	bf04      	itt	eq
 8005d38:	1809      	addeq	r1, r1, r0
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	6054      	str	r4, [r2, #4]
 8005d3e:	e7ca      	b.n	8005cd6 <_free_r+0x22>
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	bf00      	nop
 8005d44:	2000041c 	.word	0x2000041c

08005d48 <sbrk_aligned>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4e0f      	ldr	r6, [pc, #60]	@ (8005d88 <sbrk_aligned+0x40>)
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	6831      	ldr	r1, [r6, #0]
 8005d50:	4605      	mov	r5, r0
 8005d52:	b911      	cbnz	r1, 8005d5a <sbrk_aligned+0x12>
 8005d54:	f000 fc2c 	bl	80065b0 <_sbrk_r>
 8005d58:	6030      	str	r0, [r6, #0]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f000 fc27 	bl	80065b0 <_sbrk_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d103      	bne.n	8005d6e <sbrk_aligned+0x26>
 8005d66:	f04f 34ff 	mov.w	r4, #4294967295
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	1cc4      	adds	r4, r0, #3
 8005d70:	f024 0403 	bic.w	r4, r4, #3
 8005d74:	42a0      	cmp	r0, r4
 8005d76:	d0f8      	beq.n	8005d6a <sbrk_aligned+0x22>
 8005d78:	1a21      	subs	r1, r4, r0
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 fc18 	bl	80065b0 <_sbrk_r>
 8005d80:	3001      	adds	r0, #1
 8005d82:	d1f2      	bne.n	8005d6a <sbrk_aligned+0x22>
 8005d84:	e7ef      	b.n	8005d66 <sbrk_aligned+0x1e>
 8005d86:	bf00      	nop
 8005d88:	20000418 	.word	0x20000418

08005d8c <_malloc_r>:
 8005d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d90:	1ccd      	adds	r5, r1, #3
 8005d92:	f025 0503 	bic.w	r5, r5, #3
 8005d96:	3508      	adds	r5, #8
 8005d98:	2d0c      	cmp	r5, #12
 8005d9a:	bf38      	it	cc
 8005d9c:	250c      	movcc	r5, #12
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	4606      	mov	r6, r0
 8005da2:	db01      	blt.n	8005da8 <_malloc_r+0x1c>
 8005da4:	42a9      	cmp	r1, r5
 8005da6:	d904      	bls.n	8005db2 <_malloc_r+0x26>
 8005da8:	230c      	movs	r3, #12
 8005daa:	6033      	str	r3, [r6, #0]
 8005dac:	2000      	movs	r0, #0
 8005dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e88 <_malloc_r+0xfc>
 8005db6:	f000 f869 	bl	8005e8c <__malloc_lock>
 8005dba:	f8d8 3000 	ldr.w	r3, [r8]
 8005dbe:	461c      	mov	r4, r3
 8005dc0:	bb44      	cbnz	r4, 8005e14 <_malloc_r+0x88>
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	f7ff ffbf 	bl	8005d48 <sbrk_aligned>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	4604      	mov	r4, r0
 8005dce:	d158      	bne.n	8005e82 <_malloc_r+0xf6>
 8005dd0:	f8d8 4000 	ldr.w	r4, [r8]
 8005dd4:	4627      	mov	r7, r4
 8005dd6:	2f00      	cmp	r7, #0
 8005dd8:	d143      	bne.n	8005e62 <_malloc_r+0xd6>
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	d04b      	beq.n	8005e76 <_malloc_r+0xea>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	4639      	mov	r1, r7
 8005de2:	4630      	mov	r0, r6
 8005de4:	eb04 0903 	add.w	r9, r4, r3
 8005de8:	f000 fbe2 	bl	80065b0 <_sbrk_r>
 8005dec:	4581      	cmp	r9, r0
 8005dee:	d142      	bne.n	8005e76 <_malloc_r+0xea>
 8005df0:	6821      	ldr	r1, [r4, #0]
 8005df2:	1a6d      	subs	r5, r5, r1
 8005df4:	4629      	mov	r1, r5
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7ff ffa6 	bl	8005d48 <sbrk_aligned>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d03a      	beq.n	8005e76 <_malloc_r+0xea>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	442b      	add	r3, r5
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	f8d8 3000 	ldr.w	r3, [r8]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	bb62      	cbnz	r2, 8005e68 <_malloc_r+0xdc>
 8005e0e:	f8c8 7000 	str.w	r7, [r8]
 8005e12:	e00f      	b.n	8005e34 <_malloc_r+0xa8>
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	1b52      	subs	r2, r2, r5
 8005e18:	d420      	bmi.n	8005e5c <_malloc_r+0xd0>
 8005e1a:	2a0b      	cmp	r2, #11
 8005e1c:	d917      	bls.n	8005e4e <_malloc_r+0xc2>
 8005e1e:	1961      	adds	r1, r4, r5
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	6025      	str	r5, [r4, #0]
 8005e24:	bf18      	it	ne
 8005e26:	6059      	strne	r1, [r3, #4]
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	bf08      	it	eq
 8005e2c:	f8c8 1000 	streq.w	r1, [r8]
 8005e30:	5162      	str	r2, [r4, r5]
 8005e32:	604b      	str	r3, [r1, #4]
 8005e34:	4630      	mov	r0, r6
 8005e36:	f000 f82f 	bl	8005e98 <__malloc_unlock>
 8005e3a:	f104 000b 	add.w	r0, r4, #11
 8005e3e:	1d23      	adds	r3, r4, #4
 8005e40:	f020 0007 	bic.w	r0, r0, #7
 8005e44:	1ac2      	subs	r2, r0, r3
 8005e46:	bf1c      	itt	ne
 8005e48:	1a1b      	subne	r3, r3, r0
 8005e4a:	50a3      	strne	r3, [r4, r2]
 8005e4c:	e7af      	b.n	8005dae <_malloc_r+0x22>
 8005e4e:	6862      	ldr	r2, [r4, #4]
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	bf0c      	ite	eq
 8005e54:	f8c8 2000 	streq.w	r2, [r8]
 8005e58:	605a      	strne	r2, [r3, #4]
 8005e5a:	e7eb      	b.n	8005e34 <_malloc_r+0xa8>
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	6864      	ldr	r4, [r4, #4]
 8005e60:	e7ae      	b.n	8005dc0 <_malloc_r+0x34>
 8005e62:	463c      	mov	r4, r7
 8005e64:	687f      	ldr	r7, [r7, #4]
 8005e66:	e7b6      	b.n	8005dd6 <_malloc_r+0x4a>
 8005e68:	461a      	mov	r2, r3
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d1fb      	bne.n	8005e68 <_malloc_r+0xdc>
 8005e70:	2300      	movs	r3, #0
 8005e72:	6053      	str	r3, [r2, #4]
 8005e74:	e7de      	b.n	8005e34 <_malloc_r+0xa8>
 8005e76:	230c      	movs	r3, #12
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 f80c 	bl	8005e98 <__malloc_unlock>
 8005e80:	e794      	b.n	8005dac <_malloc_r+0x20>
 8005e82:	6005      	str	r5, [r0, #0]
 8005e84:	e7d6      	b.n	8005e34 <_malloc_r+0xa8>
 8005e86:	bf00      	nop
 8005e88:	2000041c 	.word	0x2000041c

08005e8c <__malloc_lock>:
 8005e8c:	4801      	ldr	r0, [pc, #4]	@ (8005e94 <__malloc_lock+0x8>)
 8005e8e:	f7ff bf0e 	b.w	8005cae <__retarget_lock_acquire_recursive>
 8005e92:	bf00      	nop
 8005e94:	20000414 	.word	0x20000414

08005e98 <__malloc_unlock>:
 8005e98:	4801      	ldr	r0, [pc, #4]	@ (8005ea0 <__malloc_unlock+0x8>)
 8005e9a:	f7ff bf09 	b.w	8005cb0 <__retarget_lock_release_recursive>
 8005e9e:	bf00      	nop
 8005ea0:	20000414 	.word	0x20000414

08005ea4 <__sfputc_r>:
 8005ea4:	6893      	ldr	r3, [r2, #8]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	b410      	push	{r4}
 8005eac:	6093      	str	r3, [r2, #8]
 8005eae:	da08      	bge.n	8005ec2 <__sfputc_r+0x1e>
 8005eb0:	6994      	ldr	r4, [r2, #24]
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	db01      	blt.n	8005eba <__sfputc_r+0x16>
 8005eb6:	290a      	cmp	r1, #10
 8005eb8:	d103      	bne.n	8005ec2 <__sfputc_r+0x1e>
 8005eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ebe:	f7ff bde8 	b.w	8005a92 <__swbuf_r>
 8005ec2:	6813      	ldr	r3, [r2, #0]
 8005ec4:	1c58      	adds	r0, r3, #1
 8005ec6:	6010      	str	r0, [r2, #0]
 8005ec8:	7019      	strb	r1, [r3, #0]
 8005eca:	4608      	mov	r0, r1
 8005ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <__sfputs_r>:
 8005ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	18d5      	adds	r5, r2, r3
 8005edc:	42ac      	cmp	r4, r5
 8005ede:	d101      	bne.n	8005ee4 <__sfputs_r+0x12>
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e007      	b.n	8005ef4 <__sfputs_r+0x22>
 8005ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee8:	463a      	mov	r2, r7
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff ffda 	bl	8005ea4 <__sfputc_r>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d1f3      	bne.n	8005edc <__sfputs_r+0xa>
 8005ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ef8 <_vfiprintf_r>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	460d      	mov	r5, r1
 8005efe:	b09d      	sub	sp, #116	@ 0x74
 8005f00:	4614      	mov	r4, r2
 8005f02:	4698      	mov	r8, r3
 8005f04:	4606      	mov	r6, r0
 8005f06:	b118      	cbz	r0, 8005f10 <_vfiprintf_r+0x18>
 8005f08:	6a03      	ldr	r3, [r0, #32]
 8005f0a:	b90b      	cbnz	r3, 8005f10 <_vfiprintf_r+0x18>
 8005f0c:	f7ff fcd0 	bl	80058b0 <__sinit>
 8005f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f12:	07d9      	lsls	r1, r3, #31
 8005f14:	d405      	bmi.n	8005f22 <_vfiprintf_r+0x2a>
 8005f16:	89ab      	ldrh	r3, [r5, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d402      	bmi.n	8005f22 <_vfiprintf_r+0x2a>
 8005f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f1e:	f7ff fec6 	bl	8005cae <__retarget_lock_acquire_recursive>
 8005f22:	89ab      	ldrh	r3, [r5, #12]
 8005f24:	071b      	lsls	r3, r3, #28
 8005f26:	d501      	bpl.n	8005f2c <_vfiprintf_r+0x34>
 8005f28:	692b      	ldr	r3, [r5, #16]
 8005f2a:	b99b      	cbnz	r3, 8005f54 <_vfiprintf_r+0x5c>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7ff fdee 	bl	8005b10 <__swsetup_r>
 8005f34:	b170      	cbz	r0, 8005f54 <_vfiprintf_r+0x5c>
 8005f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f38:	07dc      	lsls	r4, r3, #31
 8005f3a:	d504      	bpl.n	8005f46 <_vfiprintf_r+0x4e>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b01d      	add	sp, #116	@ 0x74
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	89ab      	ldrh	r3, [r5, #12]
 8005f48:	0598      	lsls	r0, r3, #22
 8005f4a:	d4f7      	bmi.n	8005f3c <_vfiprintf_r+0x44>
 8005f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f4e:	f7ff feaf 	bl	8005cb0 <__retarget_lock_release_recursive>
 8005f52:	e7f3      	b.n	8005f3c <_vfiprintf_r+0x44>
 8005f54:	2300      	movs	r3, #0
 8005f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f58:	2320      	movs	r3, #32
 8005f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f62:	2330      	movs	r3, #48	@ 0x30
 8005f64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006114 <_vfiprintf_r+0x21c>
 8005f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f6c:	f04f 0901 	mov.w	r9, #1
 8005f70:	4623      	mov	r3, r4
 8005f72:	469a      	mov	sl, r3
 8005f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f78:	b10a      	cbz	r2, 8005f7e <_vfiprintf_r+0x86>
 8005f7a:	2a25      	cmp	r2, #37	@ 0x25
 8005f7c:	d1f9      	bne.n	8005f72 <_vfiprintf_r+0x7a>
 8005f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f82:	d00b      	beq.n	8005f9c <_vfiprintf_r+0xa4>
 8005f84:	465b      	mov	r3, fp
 8005f86:	4622      	mov	r2, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7ff ffa1 	bl	8005ed2 <__sfputs_r>
 8005f90:	3001      	adds	r0, #1
 8005f92:	f000 80a7 	beq.w	80060e4 <_vfiprintf_r+0x1ec>
 8005f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f98:	445a      	add	r2, fp
 8005f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 809f 	beq.w	80060e4 <_vfiprintf_r+0x1ec>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fb0:	f10a 0a01 	add.w	sl, sl, #1
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fbe:	4654      	mov	r4, sl
 8005fc0:	2205      	movs	r2, #5
 8005fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc6:	4853      	ldr	r0, [pc, #332]	@ (8006114 <_vfiprintf_r+0x21c>)
 8005fc8:	f7fa f902 	bl	80001d0 <memchr>
 8005fcc:	9a04      	ldr	r2, [sp, #16]
 8005fce:	b9d8      	cbnz	r0, 8006008 <_vfiprintf_r+0x110>
 8005fd0:	06d1      	lsls	r1, r2, #27
 8005fd2:	bf44      	itt	mi
 8005fd4:	2320      	movmi	r3, #32
 8005fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fda:	0713      	lsls	r3, r2, #28
 8005fdc:	bf44      	itt	mi
 8005fde:	232b      	movmi	r3, #43	@ 0x2b
 8005fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fea:	d015      	beq.n	8006018 <_vfiprintf_r+0x120>
 8005fec:	9a07      	ldr	r2, [sp, #28]
 8005fee:	4654      	mov	r4, sl
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f04f 0c0a 	mov.w	ip, #10
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ffc:	3b30      	subs	r3, #48	@ 0x30
 8005ffe:	2b09      	cmp	r3, #9
 8006000:	d94b      	bls.n	800609a <_vfiprintf_r+0x1a2>
 8006002:	b1b0      	cbz	r0, 8006032 <_vfiprintf_r+0x13a>
 8006004:	9207      	str	r2, [sp, #28]
 8006006:	e014      	b.n	8006032 <_vfiprintf_r+0x13a>
 8006008:	eba0 0308 	sub.w	r3, r0, r8
 800600c:	fa09 f303 	lsl.w	r3, r9, r3
 8006010:	4313      	orrs	r3, r2
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	46a2      	mov	sl, r4
 8006016:	e7d2      	b.n	8005fbe <_vfiprintf_r+0xc6>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	1d19      	adds	r1, r3, #4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	9103      	str	r1, [sp, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	bfbb      	ittet	lt
 8006024:	425b      	neglt	r3, r3
 8006026:	f042 0202 	orrlt.w	r2, r2, #2
 800602a:	9307      	strge	r3, [sp, #28]
 800602c:	9307      	strlt	r3, [sp, #28]
 800602e:	bfb8      	it	lt
 8006030:	9204      	strlt	r2, [sp, #16]
 8006032:	7823      	ldrb	r3, [r4, #0]
 8006034:	2b2e      	cmp	r3, #46	@ 0x2e
 8006036:	d10a      	bne.n	800604e <_vfiprintf_r+0x156>
 8006038:	7863      	ldrb	r3, [r4, #1]
 800603a:	2b2a      	cmp	r3, #42	@ 0x2a
 800603c:	d132      	bne.n	80060a4 <_vfiprintf_r+0x1ac>
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	9203      	str	r2, [sp, #12]
 8006046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800604a:	3402      	adds	r4, #2
 800604c:	9305      	str	r3, [sp, #20]
 800604e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006124 <_vfiprintf_r+0x22c>
 8006052:	7821      	ldrb	r1, [r4, #0]
 8006054:	2203      	movs	r2, #3
 8006056:	4650      	mov	r0, sl
 8006058:	f7fa f8ba 	bl	80001d0 <memchr>
 800605c:	b138      	cbz	r0, 800606e <_vfiprintf_r+0x176>
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	eba0 000a 	sub.w	r0, r0, sl
 8006064:	2240      	movs	r2, #64	@ 0x40
 8006066:	4082      	lsls	r2, r0
 8006068:	4313      	orrs	r3, r2
 800606a:	3401      	adds	r4, #1
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006072:	4829      	ldr	r0, [pc, #164]	@ (8006118 <_vfiprintf_r+0x220>)
 8006074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006078:	2206      	movs	r2, #6
 800607a:	f7fa f8a9 	bl	80001d0 <memchr>
 800607e:	2800      	cmp	r0, #0
 8006080:	d03f      	beq.n	8006102 <_vfiprintf_r+0x20a>
 8006082:	4b26      	ldr	r3, [pc, #152]	@ (800611c <_vfiprintf_r+0x224>)
 8006084:	bb1b      	cbnz	r3, 80060ce <_vfiprintf_r+0x1d6>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	3307      	adds	r3, #7
 800608a:	f023 0307 	bic.w	r3, r3, #7
 800608e:	3308      	adds	r3, #8
 8006090:	9303      	str	r3, [sp, #12]
 8006092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006094:	443b      	add	r3, r7
 8006096:	9309      	str	r3, [sp, #36]	@ 0x24
 8006098:	e76a      	b.n	8005f70 <_vfiprintf_r+0x78>
 800609a:	fb0c 3202 	mla	r2, ip, r2, r3
 800609e:	460c      	mov	r4, r1
 80060a0:	2001      	movs	r0, #1
 80060a2:	e7a8      	b.n	8005ff6 <_vfiprintf_r+0xfe>
 80060a4:	2300      	movs	r3, #0
 80060a6:	3401      	adds	r4, #1
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	4619      	mov	r1, r3
 80060ac:	f04f 0c0a 	mov.w	ip, #10
 80060b0:	4620      	mov	r0, r4
 80060b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b6:	3a30      	subs	r2, #48	@ 0x30
 80060b8:	2a09      	cmp	r2, #9
 80060ba:	d903      	bls.n	80060c4 <_vfiprintf_r+0x1cc>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0c6      	beq.n	800604e <_vfiprintf_r+0x156>
 80060c0:	9105      	str	r1, [sp, #20]
 80060c2:	e7c4      	b.n	800604e <_vfiprintf_r+0x156>
 80060c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c8:	4604      	mov	r4, r0
 80060ca:	2301      	movs	r3, #1
 80060cc:	e7f0      	b.n	80060b0 <_vfiprintf_r+0x1b8>
 80060ce:	ab03      	add	r3, sp, #12
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	462a      	mov	r2, r5
 80060d4:	4b12      	ldr	r3, [pc, #72]	@ (8006120 <_vfiprintf_r+0x228>)
 80060d6:	a904      	add	r1, sp, #16
 80060d8:	4630      	mov	r0, r6
 80060da:	f3af 8000 	nop.w
 80060de:	4607      	mov	r7, r0
 80060e0:	1c78      	adds	r0, r7, #1
 80060e2:	d1d6      	bne.n	8006092 <_vfiprintf_r+0x19a>
 80060e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060e6:	07d9      	lsls	r1, r3, #31
 80060e8:	d405      	bmi.n	80060f6 <_vfiprintf_r+0x1fe>
 80060ea:	89ab      	ldrh	r3, [r5, #12]
 80060ec:	059a      	lsls	r2, r3, #22
 80060ee:	d402      	bmi.n	80060f6 <_vfiprintf_r+0x1fe>
 80060f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060f2:	f7ff fddd 	bl	8005cb0 <__retarget_lock_release_recursive>
 80060f6:	89ab      	ldrh	r3, [r5, #12]
 80060f8:	065b      	lsls	r3, r3, #25
 80060fa:	f53f af1f 	bmi.w	8005f3c <_vfiprintf_r+0x44>
 80060fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006100:	e71e      	b.n	8005f40 <_vfiprintf_r+0x48>
 8006102:	ab03      	add	r3, sp, #12
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	462a      	mov	r2, r5
 8006108:	4b05      	ldr	r3, [pc, #20]	@ (8006120 <_vfiprintf_r+0x228>)
 800610a:	a904      	add	r1, sp, #16
 800610c:	4630      	mov	r0, r6
 800610e:	f000 f879 	bl	8006204 <_printf_i>
 8006112:	e7e4      	b.n	80060de <_vfiprintf_r+0x1e6>
 8006114:	080068d4 	.word	0x080068d4
 8006118:	080068de 	.word	0x080068de
 800611c:	00000000 	.word	0x00000000
 8006120:	08005ed3 	.word	0x08005ed3
 8006124:	080068da 	.word	0x080068da

08006128 <_printf_common>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	4616      	mov	r6, r2
 800612e:	4698      	mov	r8, r3
 8006130:	688a      	ldr	r2, [r1, #8]
 8006132:	690b      	ldr	r3, [r1, #16]
 8006134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006138:	4293      	cmp	r3, r2
 800613a:	bfb8      	it	lt
 800613c:	4613      	movlt	r3, r2
 800613e:	6033      	str	r3, [r6, #0]
 8006140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006144:	4607      	mov	r7, r0
 8006146:	460c      	mov	r4, r1
 8006148:	b10a      	cbz	r2, 800614e <_printf_common+0x26>
 800614a:	3301      	adds	r3, #1
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	0699      	lsls	r1, r3, #26
 8006152:	bf42      	ittt	mi
 8006154:	6833      	ldrmi	r3, [r6, #0]
 8006156:	3302      	addmi	r3, #2
 8006158:	6033      	strmi	r3, [r6, #0]
 800615a:	6825      	ldr	r5, [r4, #0]
 800615c:	f015 0506 	ands.w	r5, r5, #6
 8006160:	d106      	bne.n	8006170 <_printf_common+0x48>
 8006162:	f104 0a19 	add.w	sl, r4, #25
 8006166:	68e3      	ldr	r3, [r4, #12]
 8006168:	6832      	ldr	r2, [r6, #0]
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	42ab      	cmp	r3, r5
 800616e:	dc26      	bgt.n	80061be <_printf_common+0x96>
 8006170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	3b00      	subs	r3, #0
 8006178:	bf18      	it	ne
 800617a:	2301      	movne	r3, #1
 800617c:	0692      	lsls	r2, r2, #26
 800617e:	d42b      	bmi.n	80061d8 <_printf_common+0xb0>
 8006180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006184:	4641      	mov	r1, r8
 8006186:	4638      	mov	r0, r7
 8006188:	47c8      	blx	r9
 800618a:	3001      	adds	r0, #1
 800618c:	d01e      	beq.n	80061cc <_printf_common+0xa4>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	6922      	ldr	r2, [r4, #16]
 8006192:	f003 0306 	and.w	r3, r3, #6
 8006196:	2b04      	cmp	r3, #4
 8006198:	bf02      	ittt	eq
 800619a:	68e5      	ldreq	r5, [r4, #12]
 800619c:	6833      	ldreq	r3, [r6, #0]
 800619e:	1aed      	subeq	r5, r5, r3
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	bf0c      	ite	eq
 80061a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061a8:	2500      	movne	r5, #0
 80061aa:	4293      	cmp	r3, r2
 80061ac:	bfc4      	itt	gt
 80061ae:	1a9b      	subgt	r3, r3, r2
 80061b0:	18ed      	addgt	r5, r5, r3
 80061b2:	2600      	movs	r6, #0
 80061b4:	341a      	adds	r4, #26
 80061b6:	42b5      	cmp	r5, r6
 80061b8:	d11a      	bne.n	80061f0 <_printf_common+0xc8>
 80061ba:	2000      	movs	r0, #0
 80061bc:	e008      	b.n	80061d0 <_printf_common+0xa8>
 80061be:	2301      	movs	r3, #1
 80061c0:	4652      	mov	r2, sl
 80061c2:	4641      	mov	r1, r8
 80061c4:	4638      	mov	r0, r7
 80061c6:	47c8      	blx	r9
 80061c8:	3001      	adds	r0, #1
 80061ca:	d103      	bne.n	80061d4 <_printf_common+0xac>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d4:	3501      	adds	r5, #1
 80061d6:	e7c6      	b.n	8006166 <_printf_common+0x3e>
 80061d8:	18e1      	adds	r1, r4, r3
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	2030      	movs	r0, #48	@ 0x30
 80061de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061e2:	4422      	add	r2, r4
 80061e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061ec:	3302      	adds	r3, #2
 80061ee:	e7c7      	b.n	8006180 <_printf_common+0x58>
 80061f0:	2301      	movs	r3, #1
 80061f2:	4622      	mov	r2, r4
 80061f4:	4641      	mov	r1, r8
 80061f6:	4638      	mov	r0, r7
 80061f8:	47c8      	blx	r9
 80061fa:	3001      	adds	r0, #1
 80061fc:	d0e6      	beq.n	80061cc <_printf_common+0xa4>
 80061fe:	3601      	adds	r6, #1
 8006200:	e7d9      	b.n	80061b6 <_printf_common+0x8e>
	...

08006204 <_printf_i>:
 8006204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006208:	7e0f      	ldrb	r7, [r1, #24]
 800620a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800620c:	2f78      	cmp	r7, #120	@ 0x78
 800620e:	4691      	mov	r9, r2
 8006210:	4680      	mov	r8, r0
 8006212:	460c      	mov	r4, r1
 8006214:	469a      	mov	sl, r3
 8006216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800621a:	d807      	bhi.n	800622c <_printf_i+0x28>
 800621c:	2f62      	cmp	r7, #98	@ 0x62
 800621e:	d80a      	bhi.n	8006236 <_printf_i+0x32>
 8006220:	2f00      	cmp	r7, #0
 8006222:	f000 80d1 	beq.w	80063c8 <_printf_i+0x1c4>
 8006226:	2f58      	cmp	r7, #88	@ 0x58
 8006228:	f000 80b8 	beq.w	800639c <_printf_i+0x198>
 800622c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006234:	e03a      	b.n	80062ac <_printf_i+0xa8>
 8006236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800623a:	2b15      	cmp	r3, #21
 800623c:	d8f6      	bhi.n	800622c <_printf_i+0x28>
 800623e:	a101      	add	r1, pc, #4	@ (adr r1, 8006244 <_printf_i+0x40>)
 8006240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006244:	0800629d 	.word	0x0800629d
 8006248:	080062b1 	.word	0x080062b1
 800624c:	0800622d 	.word	0x0800622d
 8006250:	0800622d 	.word	0x0800622d
 8006254:	0800622d 	.word	0x0800622d
 8006258:	0800622d 	.word	0x0800622d
 800625c:	080062b1 	.word	0x080062b1
 8006260:	0800622d 	.word	0x0800622d
 8006264:	0800622d 	.word	0x0800622d
 8006268:	0800622d 	.word	0x0800622d
 800626c:	0800622d 	.word	0x0800622d
 8006270:	080063af 	.word	0x080063af
 8006274:	080062db 	.word	0x080062db
 8006278:	08006369 	.word	0x08006369
 800627c:	0800622d 	.word	0x0800622d
 8006280:	0800622d 	.word	0x0800622d
 8006284:	080063d1 	.word	0x080063d1
 8006288:	0800622d 	.word	0x0800622d
 800628c:	080062db 	.word	0x080062db
 8006290:	0800622d 	.word	0x0800622d
 8006294:	0800622d 	.word	0x0800622d
 8006298:	08006371 	.word	0x08006371
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6032      	str	r2, [r6, #0]
 80062a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062ac:	2301      	movs	r3, #1
 80062ae:	e09c      	b.n	80063ea <_printf_i+0x1e6>
 80062b0:	6833      	ldr	r3, [r6, #0]
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	1d19      	adds	r1, r3, #4
 80062b6:	6031      	str	r1, [r6, #0]
 80062b8:	0606      	lsls	r6, r0, #24
 80062ba:	d501      	bpl.n	80062c0 <_printf_i+0xbc>
 80062bc:	681d      	ldr	r5, [r3, #0]
 80062be:	e003      	b.n	80062c8 <_printf_i+0xc4>
 80062c0:	0645      	lsls	r5, r0, #25
 80062c2:	d5fb      	bpl.n	80062bc <_printf_i+0xb8>
 80062c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	da03      	bge.n	80062d4 <_printf_i+0xd0>
 80062cc:	232d      	movs	r3, #45	@ 0x2d
 80062ce:	426d      	negs	r5, r5
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062d4:	4858      	ldr	r0, [pc, #352]	@ (8006438 <_printf_i+0x234>)
 80062d6:	230a      	movs	r3, #10
 80062d8:	e011      	b.n	80062fe <_printf_i+0xfa>
 80062da:	6821      	ldr	r1, [r4, #0]
 80062dc:	6833      	ldr	r3, [r6, #0]
 80062de:	0608      	lsls	r0, r1, #24
 80062e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80062e4:	d402      	bmi.n	80062ec <_printf_i+0xe8>
 80062e6:	0649      	lsls	r1, r1, #25
 80062e8:	bf48      	it	mi
 80062ea:	b2ad      	uxthmi	r5, r5
 80062ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80062ee:	4852      	ldr	r0, [pc, #328]	@ (8006438 <_printf_i+0x234>)
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	bf14      	ite	ne
 80062f4:	230a      	movne	r3, #10
 80062f6:	2308      	moveq	r3, #8
 80062f8:	2100      	movs	r1, #0
 80062fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062fe:	6866      	ldr	r6, [r4, #4]
 8006300:	60a6      	str	r6, [r4, #8]
 8006302:	2e00      	cmp	r6, #0
 8006304:	db05      	blt.n	8006312 <_printf_i+0x10e>
 8006306:	6821      	ldr	r1, [r4, #0]
 8006308:	432e      	orrs	r6, r5
 800630a:	f021 0104 	bic.w	r1, r1, #4
 800630e:	6021      	str	r1, [r4, #0]
 8006310:	d04b      	beq.n	80063aa <_printf_i+0x1a6>
 8006312:	4616      	mov	r6, r2
 8006314:	fbb5 f1f3 	udiv	r1, r5, r3
 8006318:	fb03 5711 	mls	r7, r3, r1, r5
 800631c:	5dc7      	ldrb	r7, [r0, r7]
 800631e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006322:	462f      	mov	r7, r5
 8006324:	42bb      	cmp	r3, r7
 8006326:	460d      	mov	r5, r1
 8006328:	d9f4      	bls.n	8006314 <_printf_i+0x110>
 800632a:	2b08      	cmp	r3, #8
 800632c:	d10b      	bne.n	8006346 <_printf_i+0x142>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	07df      	lsls	r7, r3, #31
 8006332:	d508      	bpl.n	8006346 <_printf_i+0x142>
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	6861      	ldr	r1, [r4, #4]
 8006338:	4299      	cmp	r1, r3
 800633a:	bfde      	ittt	le
 800633c:	2330      	movle	r3, #48	@ 0x30
 800633e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006342:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006346:	1b92      	subs	r2, r2, r6
 8006348:	6122      	str	r2, [r4, #16]
 800634a:	f8cd a000 	str.w	sl, [sp]
 800634e:	464b      	mov	r3, r9
 8006350:	aa03      	add	r2, sp, #12
 8006352:	4621      	mov	r1, r4
 8006354:	4640      	mov	r0, r8
 8006356:	f7ff fee7 	bl	8006128 <_printf_common>
 800635a:	3001      	adds	r0, #1
 800635c:	d14a      	bne.n	80063f4 <_printf_i+0x1f0>
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	b004      	add	sp, #16
 8006364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	f043 0320 	orr.w	r3, r3, #32
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	4832      	ldr	r0, [pc, #200]	@ (800643c <_printf_i+0x238>)
 8006372:	2778      	movs	r7, #120	@ 0x78
 8006374:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	6831      	ldr	r1, [r6, #0]
 800637c:	061f      	lsls	r7, r3, #24
 800637e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006382:	d402      	bmi.n	800638a <_printf_i+0x186>
 8006384:	065f      	lsls	r7, r3, #25
 8006386:	bf48      	it	mi
 8006388:	b2ad      	uxthmi	r5, r5
 800638a:	6031      	str	r1, [r6, #0]
 800638c:	07d9      	lsls	r1, r3, #31
 800638e:	bf44      	itt	mi
 8006390:	f043 0320 	orrmi.w	r3, r3, #32
 8006394:	6023      	strmi	r3, [r4, #0]
 8006396:	b11d      	cbz	r5, 80063a0 <_printf_i+0x19c>
 8006398:	2310      	movs	r3, #16
 800639a:	e7ad      	b.n	80062f8 <_printf_i+0xf4>
 800639c:	4826      	ldr	r0, [pc, #152]	@ (8006438 <_printf_i+0x234>)
 800639e:	e7e9      	b.n	8006374 <_printf_i+0x170>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	f023 0320 	bic.w	r3, r3, #32
 80063a6:	6023      	str	r3, [r4, #0]
 80063a8:	e7f6      	b.n	8006398 <_printf_i+0x194>
 80063aa:	4616      	mov	r6, r2
 80063ac:	e7bd      	b.n	800632a <_printf_i+0x126>
 80063ae:	6833      	ldr	r3, [r6, #0]
 80063b0:	6825      	ldr	r5, [r4, #0]
 80063b2:	6961      	ldr	r1, [r4, #20]
 80063b4:	1d18      	adds	r0, r3, #4
 80063b6:	6030      	str	r0, [r6, #0]
 80063b8:	062e      	lsls	r6, r5, #24
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	d501      	bpl.n	80063c2 <_printf_i+0x1be>
 80063be:	6019      	str	r1, [r3, #0]
 80063c0:	e002      	b.n	80063c8 <_printf_i+0x1c4>
 80063c2:	0668      	lsls	r0, r5, #25
 80063c4:	d5fb      	bpl.n	80063be <_printf_i+0x1ba>
 80063c6:	8019      	strh	r1, [r3, #0]
 80063c8:	2300      	movs	r3, #0
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	4616      	mov	r6, r2
 80063ce:	e7bc      	b.n	800634a <_printf_i+0x146>
 80063d0:	6833      	ldr	r3, [r6, #0]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	6032      	str	r2, [r6, #0]
 80063d6:	681e      	ldr	r6, [r3, #0]
 80063d8:	6862      	ldr	r2, [r4, #4]
 80063da:	2100      	movs	r1, #0
 80063dc:	4630      	mov	r0, r6
 80063de:	f7f9 fef7 	bl	80001d0 <memchr>
 80063e2:	b108      	cbz	r0, 80063e8 <_printf_i+0x1e4>
 80063e4:	1b80      	subs	r0, r0, r6
 80063e6:	6060      	str	r0, [r4, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	2300      	movs	r3, #0
 80063ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063f2:	e7aa      	b.n	800634a <_printf_i+0x146>
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	4632      	mov	r2, r6
 80063f8:	4649      	mov	r1, r9
 80063fa:	4640      	mov	r0, r8
 80063fc:	47d0      	blx	sl
 80063fe:	3001      	adds	r0, #1
 8006400:	d0ad      	beq.n	800635e <_printf_i+0x15a>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	079b      	lsls	r3, r3, #30
 8006406:	d413      	bmi.n	8006430 <_printf_i+0x22c>
 8006408:	68e0      	ldr	r0, [r4, #12]
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	4298      	cmp	r0, r3
 800640e:	bfb8      	it	lt
 8006410:	4618      	movlt	r0, r3
 8006412:	e7a6      	b.n	8006362 <_printf_i+0x15e>
 8006414:	2301      	movs	r3, #1
 8006416:	4632      	mov	r2, r6
 8006418:	4649      	mov	r1, r9
 800641a:	4640      	mov	r0, r8
 800641c:	47d0      	blx	sl
 800641e:	3001      	adds	r0, #1
 8006420:	d09d      	beq.n	800635e <_printf_i+0x15a>
 8006422:	3501      	adds	r5, #1
 8006424:	68e3      	ldr	r3, [r4, #12]
 8006426:	9903      	ldr	r1, [sp, #12]
 8006428:	1a5b      	subs	r3, r3, r1
 800642a:	42ab      	cmp	r3, r5
 800642c:	dcf2      	bgt.n	8006414 <_printf_i+0x210>
 800642e:	e7eb      	b.n	8006408 <_printf_i+0x204>
 8006430:	2500      	movs	r5, #0
 8006432:	f104 0619 	add.w	r6, r4, #25
 8006436:	e7f5      	b.n	8006424 <_printf_i+0x220>
 8006438:	080068e5 	.word	0x080068e5
 800643c:	080068f6 	.word	0x080068f6

08006440 <__swhatbuf_r>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	2900      	cmp	r1, #0
 800644a:	b096      	sub	sp, #88	@ 0x58
 800644c:	4615      	mov	r5, r2
 800644e:	461e      	mov	r6, r3
 8006450:	da0d      	bge.n	800646e <__swhatbuf_r+0x2e>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	bf14      	ite	ne
 800645e:	2340      	movne	r3, #64	@ 0x40
 8006460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006464:	2000      	movs	r0, #0
 8006466:	6031      	str	r1, [r6, #0]
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	b016      	add	sp, #88	@ 0x58
 800646c:	bd70      	pop	{r4, r5, r6, pc}
 800646e:	466a      	mov	r2, sp
 8006470:	f000 f87c 	bl	800656c <_fstat_r>
 8006474:	2800      	cmp	r0, #0
 8006476:	dbec      	blt.n	8006452 <__swhatbuf_r+0x12>
 8006478:	9901      	ldr	r1, [sp, #4]
 800647a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800647e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006482:	4259      	negs	r1, r3
 8006484:	4159      	adcs	r1, r3
 8006486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800648a:	e7eb      	b.n	8006464 <__swhatbuf_r+0x24>

0800648c <__smakebuf_r>:
 800648c:	898b      	ldrh	r3, [r1, #12]
 800648e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006490:	079d      	lsls	r5, r3, #30
 8006492:	4606      	mov	r6, r0
 8006494:	460c      	mov	r4, r1
 8006496:	d507      	bpl.n	80064a8 <__smakebuf_r+0x1c>
 8006498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	2301      	movs	r3, #1
 80064a2:	6163      	str	r3, [r4, #20]
 80064a4:	b003      	add	sp, #12
 80064a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a8:	ab01      	add	r3, sp, #4
 80064aa:	466a      	mov	r2, sp
 80064ac:	f7ff ffc8 	bl	8006440 <__swhatbuf_r>
 80064b0:	9f00      	ldr	r7, [sp, #0]
 80064b2:	4605      	mov	r5, r0
 80064b4:	4639      	mov	r1, r7
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7ff fc68 	bl	8005d8c <_malloc_r>
 80064bc:	b948      	cbnz	r0, 80064d2 <__smakebuf_r+0x46>
 80064be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c2:	059a      	lsls	r2, r3, #22
 80064c4:	d4ee      	bmi.n	80064a4 <__smakebuf_r+0x18>
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	f043 0302 	orr.w	r3, r3, #2
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	e7e2      	b.n	8006498 <__smakebuf_r+0xc>
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	6020      	str	r0, [r4, #0]
 80064d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064e2:	b15b      	cbz	r3, 80064fc <__smakebuf_r+0x70>
 80064e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e8:	4630      	mov	r0, r6
 80064ea:	f000 f851 	bl	8006590 <_isatty_r>
 80064ee:	b128      	cbz	r0, 80064fc <__smakebuf_r+0x70>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	431d      	orrs	r5, r3
 8006500:	81a5      	strh	r5, [r4, #12]
 8006502:	e7cf      	b.n	80064a4 <__smakebuf_r+0x18>

08006504 <_putc_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	460d      	mov	r5, r1
 8006508:	4614      	mov	r4, r2
 800650a:	4606      	mov	r6, r0
 800650c:	b118      	cbz	r0, 8006516 <_putc_r+0x12>
 800650e:	6a03      	ldr	r3, [r0, #32]
 8006510:	b90b      	cbnz	r3, 8006516 <_putc_r+0x12>
 8006512:	f7ff f9cd 	bl	80058b0 <__sinit>
 8006516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006518:	07d8      	lsls	r0, r3, #31
 800651a:	d405      	bmi.n	8006528 <_putc_r+0x24>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	0599      	lsls	r1, r3, #22
 8006520:	d402      	bmi.n	8006528 <_putc_r+0x24>
 8006522:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006524:	f7ff fbc3 	bl	8005cae <__retarget_lock_acquire_recursive>
 8006528:	68a3      	ldr	r3, [r4, #8]
 800652a:	3b01      	subs	r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	60a3      	str	r3, [r4, #8]
 8006530:	da05      	bge.n	800653e <_putc_r+0x3a>
 8006532:	69a2      	ldr	r2, [r4, #24]
 8006534:	4293      	cmp	r3, r2
 8006536:	db12      	blt.n	800655e <_putc_r+0x5a>
 8006538:	b2eb      	uxtb	r3, r5
 800653a:	2b0a      	cmp	r3, #10
 800653c:	d00f      	beq.n	800655e <_putc_r+0x5a>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	701d      	strb	r5, [r3, #0]
 8006546:	b2ed      	uxtb	r5, r5
 8006548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800654a:	07da      	lsls	r2, r3, #31
 800654c:	d405      	bmi.n	800655a <_putc_r+0x56>
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	059b      	lsls	r3, r3, #22
 8006552:	d402      	bmi.n	800655a <_putc_r+0x56>
 8006554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006556:	f7ff fbab 	bl	8005cb0 <__retarget_lock_release_recursive>
 800655a:	4628      	mov	r0, r5
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	4629      	mov	r1, r5
 8006560:	4622      	mov	r2, r4
 8006562:	4630      	mov	r0, r6
 8006564:	f7ff fa95 	bl	8005a92 <__swbuf_r>
 8006568:	4605      	mov	r5, r0
 800656a:	e7ed      	b.n	8006548 <_putc_r+0x44>

0800656c <_fstat_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d07      	ldr	r5, [pc, #28]	@ (800658c <_fstat_r+0x20>)
 8006570:	2300      	movs	r3, #0
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	f7fb fa36 	bl	80019ea <_fstat>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d102      	bne.n	8006588 <_fstat_r+0x1c>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	b103      	cbz	r3, 8006588 <_fstat_r+0x1c>
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	20000410 	.word	0x20000410

08006590 <_isatty_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d06      	ldr	r5, [pc, #24]	@ (80065ac <_isatty_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fb fa35 	bl	8001a0a <_isatty>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_isatty_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_isatty_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000410 	.word	0x20000410

080065b0 <_sbrk_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d06      	ldr	r5, [pc, #24]	@ (80065cc <_sbrk_r+0x1c>)
 80065b4:	2300      	movs	r3, #0
 80065b6:	4604      	mov	r4, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	602b      	str	r3, [r5, #0]
 80065bc:	f7fb fa3e 	bl	8001a3c <_sbrk>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_sbrk_r+0x1a>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_sbrk_r+0x1a>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	20000410 	.word	0x20000410

080065d0 <_init>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr

080065dc <_fini>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr
