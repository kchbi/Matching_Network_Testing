
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003570  08003570  00004570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035fc  080035fc  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080035fc  080035fc  000045fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003604  08003604  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003608  08003608  00004608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800360c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          0000021c  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000077f9  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba1  00000000  00000000  0000c891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  0000e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053d  00000000  00000000  0000eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f13  00000000  00000000  0000f095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090de  00000000  00000000  00030fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cef63  00000000  00000000  0003a086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108fe9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002194  00000000  00000000  0010902c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003558 	.word	0x08003558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003558 	.word	0x08003558

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <HAL_ADC_ConvCpltCallback>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
uint16_t Pot1_2[2];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fb07 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f82f 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f917 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 800056a:	f000 f8f5 	bl	8000758 <MX_DMA_Init>
  MX_ADC1_Init();
 800056e:	f000 f893 	bl	8000698 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret1 = HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Pot1_2, 2);
 8000572:	2202      	movs	r2, #2
 8000574:	490e      	ldr	r1, [pc, #56]	@ (80005b0 <main+0x58>)
 8000576:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <main+0x5c>)
 8000578:	f000 fce4 	bl	8000f44 <HAL_ADC_Start_DMA>
 800057c:	4603      	mov	r3, r0
 800057e:	71fb      	strb	r3, [r7, #7]
//	    adc_val_ch1 = HAL_ADC_GetValue(&hadc1);
//
//	    // Wait for 2nd conversion to complete
//	    HAL_ADC_PollForConversion(&hadc1, 100); // Poll for Rank 2
//	    adc_val_ch2 = HAL_ADC_GetValue(&hadc1);
	  if (Pot1_2[1] < 30)
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <main+0x58>)
 8000582:	885b      	ldrh	r3, [r3, #2]
 8000584:	2b1d      	cmp	r3, #29
 8000586:	d803      	bhi.n	8000590 <main+0x38>
	  {
		  printf("Motor 1 should be moved Clockwise \n");
 8000588:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <main+0x60>)
 800058a:	f002 fc51 	bl	8002e30 <puts>
 800058e:	e00b      	b.n	80005a8 <main+0x50>
	  }
	  else if(Pot1_2[1] > 4000)
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <main+0x58>)
 8000592:	885b      	ldrh	r3, [r3, #2]
 8000594:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000598:	d903      	bls.n	80005a2 <main+0x4a>
	  {
		  printf("Motor 1 Should be Moved Anticlockwise \n");
 800059a:	4808      	ldr	r0, [pc, #32]	@ (80005bc <main+0x64>)
 800059c:	f002 fc48 	bl	8002e30 <puts>
 80005a0:	e002      	b.n	80005a8 <main+0x50>

	  }
	  else
	  {
		  printf("Motor is Moving towards an Extreme End \n");
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <main+0x68>)
 80005a4:	f002 fc44 	bl	8002e30 <puts>

	  }
	  HAL_Delay(100);
 80005a8:	2064      	movs	r0, #100	@ 0x64
 80005aa:	f000 fb53 	bl	8000c54 <HAL_Delay>
	  if (Pot1_2[1] < 30)
 80005ae:	e7e7      	b.n	8000580 <main+0x28>
 80005b0:	20000084 	.word	0x20000084
 80005b4:	20000088 	.word	0x20000088
 80005b8:	08003570 	.word	0x08003570
 80005bc:	08003594 	.word	0x08003594
 80005c0:	080035bc 	.word	0x080035bc

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fd0c 	bl	8002ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000638:	2350      	movs	r3, #80	@ 0x50
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fe75 	bl	8002338 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f8d6 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f8d6 	bl	8002828 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f8bf 	bl	8000804 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006aa:	4b28      	ldr	r3, [pc, #160]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006ac:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <MX_ADC1_Init+0xb8>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006be:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <MX_ADC1_Init+0xbc>)
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006de:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	4814      	ldr	r0, [pc, #80]	@ (800074c <MX_ADC1_Init+0xb4>)
 80006fa:	f000 facf 	bl	8000c9c <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000704:	f000 f87e 	bl	8000804 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000708:	2301      	movs	r3, #1
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000710:	2307      	movs	r3, #7
 8000712:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <MX_ADC1_Init+0xb4>)
 800071a:	f000 fd45 	bl	80011a8 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000724:	f000 f86e 	bl	8000804 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000728:	2302      	movs	r3, #2
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_ADC1_Init+0xb4>)
 8000736:	f000 fd37 	bl	80011a8 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000740:	f000 f860 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000088 	.word	0x20000088
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001

08000758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_DMA_Init+0x3c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a0b      	ldr	r2, [pc, #44]	@ (8000794 <MX_DMA_Init+0x3c>)
 8000768:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_DMA_Init+0x3c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2038      	movs	r0, #56	@ 0x38
 8000780:	f001 f897 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000784:	2038      	movs	r0, #56	@ 0x38
 8000786:	f001 f8b0 	bl	80018ea <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_GPIO_Init+0x30>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <MX_GPIO_Init+0x30>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_GPIO_Init+0x30>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	e009      	b.n	80007f2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fe84 	bl	80004f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	dbf1      	blt.n	80007de <_write+0x12>
  }
  return len;
 80007fa:	687b      	ldr	r3, [r7, #4]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800084e:	2007      	movs	r0, #7
 8000850:	f001 f824 	bl	800189c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a33      	ldr	r2, [pc, #204]	@ (800094c <HAL_ADC_MspInit+0xec>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d15f      	bne.n	8000942 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b32      	ldr	r3, [pc, #200]	@ (8000950 <HAL_ADC_MspInit+0xf0>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a31      	ldr	r2, [pc, #196]	@ (8000950 <HAL_ADC_MspInit+0xf0>)
 800088c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b2f      	ldr	r3, [pc, #188]	@ (8000950 <HAL_ADC_MspInit+0xf0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <HAL_ADC_MspInit+0xf0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000950 <HAL_ADC_MspInit+0xf0>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <HAL_ADC_MspInit+0xf0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008ba:	2306      	movs	r3, #6
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4821      	ldr	r0, [pc, #132]	@ (8000954 <HAL_ADC_MspInit+0xf4>)
 80008ce:	f001 fb97 	bl	8002000 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <HAL_ADC_MspInit+0xfc>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 80008ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 80008f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 80008fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000900:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 8000904:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000908:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000916:	4810      	ldr	r0, [pc, #64]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 8000918:	f001 f802 	bl	8001920 <HAL_DMA_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000922:	f7ff ff6f 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a0b      	ldr	r2, [pc, #44]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 800092a:	639a      	str	r2, [r3, #56]	@ 0x38
 800092c:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_ADC_MspInit+0xf8>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2012      	movs	r0, #18
 8000938:	f000 ffbb 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800093c:	2012      	movs	r0, #18
 800093e:	f000 ffd4 	bl	80018ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	@ 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40012000 	.word	0x40012000
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000
 8000958:	200000d0 	.word	0x200000d0
 800095c:	40026410 	.word	0x40026410

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f92d 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <ADC_IRQHandler+0x10>)
 80009c6:	f000 f9ac 	bl	8000d22 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000088 	.word	0x20000088

080009d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <DMA2_Stream0_IRQHandler+0x10>)
 80009da:	f001 f8a7 	bl	8001b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000d0 	.word	0x200000d0

080009e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e00a      	b.n	8000a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fa:	f3af 8000 	nop.w
 80009fe:	4601      	mov	r1, r0
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	b2ca      	uxtb	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf0      	blt.n	80009fa <_read+0x12>
  }

  return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_isatty>:

int _isatty(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f002 fae6 	bl	800308c <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20020000 	.word	0x20020000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	20000130 	.word	0x20000130
 8000af4:	20000288 	.word	0x20000288

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b20:	f7ff ffea 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f002 faa5 	bl	8003098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fd03 	bl	8000558 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b60:	0800360c 	.word	0x0800360c
  ldr r2, =_sbss
 8000b64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b68:	20000284 	.word	0x20000284

08000b6c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <CAN1_RX0_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 fe7f 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe34 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fe97 	bl	8001906 <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 fe5f 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000134 	.word	0x20000134

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000134 	.word	0x20000134

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008

08000c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e033      	b.n	8000d1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d109      	bne.n	8000cce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fdd0 	bl	8000860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d118      	bne.n	8000d0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ce2:	f023 0302 	bic.w	r3, r3, #2
 8000ce6:	f043 0202 	orr.w	r2, r3, #2
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 fb7c 	bl	80013ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f023 0303 	bic.w	r3, r3, #3
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d0a:	e001      	b.n	8000d10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	f003 0320 	and.w	r3, r3, #32
 8000d50:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d049      	beq.n	8000dec <HAL_ADC_IRQHandler+0xca>
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d046      	beq.n	8000dec <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d105      	bne.n	8000d76 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d12b      	bne.n	8000ddc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d127      	bne.n	8000ddc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d119      	bne.n	8000ddc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0220 	bic.w	r2, r2, #32
 8000db6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d105      	bne.n	8000ddc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	f043 0201 	orr.w	r2, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fbb0 	bl	8000542 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f06f 0212 	mvn.w	r2, #18
 8000dea:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dfa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d057      	beq.n	8000eb2 <HAL_ADC_IRQHandler+0x190>
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d054      	beq.n	8000eb2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d105      	bne.n	8000e20 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d139      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e34:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d12b      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d124      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11d      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d119      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e7c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d105      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fc20 	bl	80016e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f06f 020c 	mvn.w	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d017      	beq.n	8000ef8 <HAL_ADC_IRQHandler+0x1d6>
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d014      	beq.n	8000ef8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10d      	bne.n	8000ef8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f949 	bl	8001180 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f06f 0201 	mvn.w	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0320 	and.w	r3, r3, #32
 8000efe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f06:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d015      	beq.n	8000f3a <HAL_ADC_IRQHandler+0x218>
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d012      	beq.n	8000f3a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	f043 0202 	orr.w	r2, r3, #2
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f06f 0220 	mvn.w	r2, #32
 8000f28:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f932 	bl	8001194 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f06f 0220 	mvn.w	r2, #32
 8000f38:	601a      	str	r2, [r3, #0]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Start_DMA+0x22>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e0eb      	b.n	800113e <HAL_ADC_Start_DMA+0x1fa>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d018      	beq.n	8000fae <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001148 <HAL_ADC_Start_DMA+0x204>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6e      	ldr	r2, [pc, #440]	@ (800114c <HAL_ADC_Start_DMA+0x208>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	0c9a      	lsrs	r2, r3, #18
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000fa0:	e002      	b.n	8000fa8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f9      	bne.n	8000fa2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fbc:	d107      	bne.n	8000fce <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fcc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	f040 80a3 	bne.w	8001124 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001008:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800101c:	d106      	bne.n	800102c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f023 0206 	bic.w	r2, r3, #6
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	645a      	str	r2, [r3, #68]	@ 0x44
 800102a:	e002      	b.n	8001032 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800103a:	4b45      	ldr	r3, [pc, #276]	@ (8001150 <HAL_ADC_Start_DMA+0x20c>)
 800103c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001042:	4a44      	ldr	r2, [pc, #272]	@ (8001154 <HAL_ADC_Start_DMA+0x210>)
 8001044:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104a:	4a43      	ldr	r2, [pc, #268]	@ (8001158 <HAL_ADC_Start_DMA+0x214>)
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001052:	4a42      	ldr	r2, [pc, #264]	@ (800115c <HAL_ADC_Start_DMA+0x218>)
 8001054:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800105e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800106e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800107e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	334c      	adds	r3, #76	@ 0x4c
 800108a:	4619      	mov	r1, r3
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f000 fcf4 	bl	8001a7c <HAL_DMA_Start_IT>
 8001094:	4603      	mov	r3, r0
 8001096:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d12a      	bne.n	80010fa <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <HAL_ADC_Start_DMA+0x21c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d015      	beq.n	80010da <HAL_ADC_Start_DMA+0x196>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001164 <HAL_ADC_Start_DMA+0x220>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d105      	bne.n	80010c4 <HAL_ADC_Start_DMA+0x180>
 80010b8:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <HAL_ADC_Start_DMA+0x20c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00a      	beq.n	80010da <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a27      	ldr	r2, [pc, #156]	@ (8001168 <HAL_ADC_Start_DMA+0x224>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d136      	bne.n	800113c <HAL_ADC_Start_DMA+0x1f8>
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <HAL_ADC_Start_DMA+0x20c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d130      	bne.n	800113c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d129      	bne.n	800113c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	e020      	b.n	800113c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a18      	ldr	r2, [pc, #96]	@ (8001160 <HAL_ADC_Start_DMA+0x21c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d11b      	bne.n	800113c <HAL_ADC_Start_DMA+0x1f8>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d114      	bne.n	800113c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	e00b      	b.n	800113c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	f043 0210 	orr.w	r2, r3, #16
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83
 8001150:	40012300 	.word	0x40012300
 8001154:	080015e5 	.word	0x080015e5
 8001158:	0800169f 	.word	0x0800169f
 800115c:	080016bb 	.word	0x080016bb
 8001160:	40012000 	.word	0x40012000
 8001164:	40012100 	.word	0x40012100
 8001168:	40012200 	.word	0x40012200

0800116c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1c>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e105      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x228>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d925      	bls.n	8001220 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68d9      	ldr	r1, [r3, #12]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	3b1e      	subs	r3, #30
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43da      	mvns	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	400a      	ands	r2, r1
 80011f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68d9      	ldr	r1, [r3, #12]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	4603      	mov	r3, r0
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4403      	add	r3, r0
 8001212:	3b1e      	subs	r3, #30
 8001214:	409a      	lsls	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	e022      	b.n	8001266 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6919      	ldr	r1, [r3, #16]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	2207      	movs	r2, #7
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	400a      	ands	r2, r1
 8001242:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6919      	ldr	r1, [r3, #16]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	4603      	mov	r3, r0
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4403      	add	r3, r0
 800125c:	409a      	lsls	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b06      	cmp	r3, #6
 800126c:	d824      	bhi.n	80012b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	3b05      	subs	r3, #5
 8001280:	221f      	movs	r2, #31
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	400a      	ands	r2, r1
 800128e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	3b05      	subs	r3, #5
 80012aa:	fa00 f203 	lsl.w	r2, r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b6:	e04c      	b.n	8001352 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d824      	bhi.n	800130a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b23      	subs	r3, #35	@ 0x23
 80012d2:	221f      	movs	r2, #31
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43da      	mvns	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	400a      	ands	r2, r1
 80012e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3b23      	subs	r3, #35	@ 0x23
 80012fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	631a      	str	r2, [r3, #48]	@ 0x30
 8001308:	e023      	b.n	8001352 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	3b41      	subs	r3, #65	@ 0x41
 800131c:	221f      	movs	r2, #31
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	400a      	ands	r2, r1
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b41      	subs	r3, #65	@ 0x41
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <HAL_ADC_ConfigChannel+0x234>)
 8001354:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a21      	ldr	r2, [pc, #132]	@ (80013e0 <HAL_ADC_ConfigChannel+0x238>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d109      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1cc>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d105      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_ADC_ConfigChannel+0x238>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d123      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0x21e>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b10      	cmp	r3, #16
 8001384:	d003      	beq.n	800138e <HAL_ADC_ConfigChannel+0x1e6>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b11      	cmp	r3, #17
 800138c:	d11b      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d111      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <HAL_ADC_ConfigChannel+0x23c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <HAL_ADC_ConfigChannel+0x240>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9a      	lsrs	r2, r3, #18
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013b8:	e002      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f9      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40012300 	.word	0x40012300
 80013e0:	40012000 	.word	0x40012000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f4:	4b79      	ldr	r3, [pc, #484]	@ (80015dc <ADC_Init+0x1f0>)
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	431a      	orrs	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147e:	4a58      	ldr	r2, [pc, #352]	@ (80015e0 <ADC_Init+0x1f4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e00f      	b.n	80014ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0202 	bic.w	r2, r2, #2
 80014f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6899      	ldr	r1, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e1b      	ldrb	r3, [r3, #24]
 8001504:	005a      	lsls	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01b      	beq.n	8001550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001526:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6859      	ldr	r1, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	3b01      	subs	r3, #1
 8001544:	035a      	lsls	r2, r3, #13
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e007      	b.n	8001560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	3b01      	subs	r3, #1
 800157c:	051a      	lsls	r2, r3, #20
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	029a      	lsls	r2, r3, #10
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40012300 	.word	0x40012300
 80015e0:	0f000001 	.word	0x0f000001

080015e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d13c      	bne.n	8001678 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d12b      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800161c:	2b00      	cmp	r3, #0
 800161e:	d127      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001638:	2b00      	cmp	r3, #0
 800163a:	d119      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0220 	bic.w	r2, r2, #32
 800164a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7fe ff66 	bl	8000542 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001676:	e00e      	b.n	8001696 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fd85 	bl	8001194 <HAL_ADC_ErrorCallback>
}
 800168a:	e004      	b.n	8001696 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7ff fd5d 	bl	800116c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2240      	movs	r2, #64	@ 0x40
 80016cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	f043 0204 	orr.w	r2, r3, #4
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff fd5a 	bl	8001194 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <__NVIC_SetPriorityGrouping>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4907      	ldr	r1, [pc, #28]	@ (8001798 <__NVIC_EnableIRQ+0x38>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	@ (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	@ 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	@ 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff29 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff3e 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff8e 	bl	80017f0 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5d 	bl	800179c <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff31 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa2 	bl	8001858 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff f986 	bl	8000c3c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e099      	b.n	8001a70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195c:	e00f      	b.n	800197e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195e:	f7ff f96d 	bl	8000c3c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b05      	cmp	r3, #5
 800196a:	d908      	bls.n	800197e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2203      	movs	r2, #3
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e078      	b.n	8001a70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e8      	bne.n	800195e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <HAL_DMA_Init+0x158>)
 8001998:	4013      	ands	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d107      	bne.n	80019e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	4313      	orrs	r3, r2
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f023 0307 	bic.w	r3, r3, #7
 80019fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d117      	bne.n	8001a42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00e      	beq.n	8001a42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 fa6f 	bl	8001f08 <DMA_CheckFifoParam>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2240      	movs	r2, #64	@ 0x40
 8001a34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e016      	b.n	8001a70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fa26 	bl	8001e9c <DMA_CalcBaseAndBitshift>
 8001a50:	4603      	mov	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	223f      	movs	r2, #63	@ 0x3f
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	f010803f 	.word	0xf010803f

08001a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_DMA_Start_IT+0x26>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e040      	b.n	8001b24 <HAL_DMA_Start_IT+0xa8>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d12f      	bne.n	8001b16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f9b8 	bl	8001e40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad4:	223f      	movs	r2, #63	@ 0x3f
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0216 	orr.w	r2, r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0208 	orr.w	r2, r2, #8
 8001b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e005      	b.n	8001b22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b38:	4b8e      	ldr	r3, [pc, #568]	@ (8001d74 <HAL_DMA_IRQHandler+0x248>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a8e      	ldr	r2, [pc, #568]	@ (8001d78 <HAL_DMA_IRQHandler+0x24c>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	2208      	movs	r2, #8
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b84:	2208      	movs	r2, #8
 8001b86:	409a      	lsls	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bba:	2201      	movs	r2, #1
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	f043 0202 	orr.w	r2, r3, #2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d012      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2210      	movs	r2, #16
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d043      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d03c      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c26:	2210      	movs	r2, #16
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d018      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d108      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d024      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
 8001c5a:	e01f      	b.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01b      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
 8001c6c:	e016      	b.n	8001c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0208 	bic.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 808f 	beq.w	8001dcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8087 	beq.w	8001dcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d136      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0216 	bic.w	r2, r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x1da>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0208 	bic.w	r2, r2, #8
 8001d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1a:	223f      	movs	r2, #63	@ 0x3f
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d07e      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
        }
        return;
 8001d42:	e079      	b.n	8001e38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10d      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d031      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
 8001d70:	e02c      	b.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000
 8001d78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
 8001d8c:	e01e      	b.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10f      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0210 	bic.w	r2, r2, #16
 8001daa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d032      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d022      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2205      	movs	r2, #5
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d307      	bcc.n	8001e14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f2      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x2cc>
 8001e12:	e000      	b.n	8001e16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
 8001e36:	e000      	b.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e38:	bf00      	nop
    }
  }
}
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b40      	cmp	r3, #64	@ 0x40
 8001e6c:	d108      	bne.n	8001e80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e7e:	e007      	b.n	8001e90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3b10      	subs	r3, #16
 8001eac:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <DMA_CalcBaseAndBitshift+0x64>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eb6:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <DMA_CalcBaseAndBitshift+0x68>)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d909      	bls.n	8001ede <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ed2:	f023 0303 	bic.w	r3, r3, #3
 8001ed6:	1d1a      	adds	r2, r3, #4
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	@ 0x58
 8001edc:	e007      	b.n	8001eee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	aaaaaaab 	.word	0xaaaaaaab
 8001f04:	080035f4 	.word	0x080035f4

08001f08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d11f      	bne.n	8001f62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d856      	bhi.n	8001fd6 <DMA_CheckFifoParam+0xce>
 8001f28:	a201      	add	r2, pc, #4	@ (adr r2, 8001f30 <DMA_CheckFifoParam+0x28>)
 8001f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2e:	bf00      	nop
 8001f30:	08001f41 	.word	0x08001f41
 8001f34:	08001f53 	.word	0x08001f53
 8001f38:	08001f41 	.word	0x08001f41
 8001f3c:	08001fd7 	.word	0x08001fd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d046      	beq.n	8001fda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f50:	e043      	b.n	8001fda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f5a:	d140      	bne.n	8001fde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f60:	e03d      	b.n	8001fde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f6a:	d121      	bne.n	8001fb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d837      	bhi.n	8001fe2 <DMA_CheckFifoParam+0xda>
 8001f72:	a201      	add	r2, pc, #4	@ (adr r2, 8001f78 <DMA_CheckFifoParam+0x70>)
 8001f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001f8f 	.word	0x08001f8f
 8001f80:	08001f89 	.word	0x08001f89
 8001f84:	08001fa1 	.word	0x08001fa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8c:	e030      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d025      	beq.n	8001fe6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f9e:	e022      	b.n	8001fe6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fa8:	d11f      	bne.n	8001fea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fae:	e01c      	b.n	8001fea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d903      	bls.n	8001fbe <DMA_CheckFifoParam+0xb6>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d003      	beq.n	8001fc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fbc:	e018      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc2:	e015      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00e      	beq.n	8001fee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd4:	e00b      	b.n	8001fee <DMA_CheckFifoParam+0xe6>
      break;
 8001fd6:	bf00      	nop
 8001fd8:	e00a      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
 8001fdc:	e008      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fde:	bf00      	nop
 8001fe0:	e006      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fe2:	bf00      	nop
 8001fe4:	e004      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fe6:	bf00      	nop
 8001fe8:	e002      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fea:	bf00      	nop
 8001fec:	e000      	b.n	8001ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fee:	bf00      	nop
    }
  } 
  
  return status; 
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e16b      	b.n	80022f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 815a 	bne.w	80022ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d130      	bne.n	80020b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80b4 	beq.w	80022ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b60      	ldr	r3, [pc, #384]	@ (800230c <HAL_GPIO_Init+0x30c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	4a5f      	ldr	r2, [pc, #380]	@ (800230c <HAL_GPIO_Init+0x30c>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002194:	6453      	str	r3, [r2, #68]	@ 0x44
 8002196:	4b5d      	ldr	r3, [pc, #372]	@ (800230c <HAL_GPIO_Init+0x30c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002310 <HAL_GPIO_Init+0x310>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <HAL_GPIO_Init+0x314>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02b      	beq.n	8002226 <HAL_GPIO_Init+0x226>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a51      	ldr	r2, [pc, #324]	@ (8002318 <HAL_GPIO_Init+0x318>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d025      	beq.n	8002222 <HAL_GPIO_Init+0x222>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a50      	ldr	r2, [pc, #320]	@ (800231c <HAL_GPIO_Init+0x31c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <HAL_GPIO_Init+0x21e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002320 <HAL_GPIO_Init+0x320>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x21a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002324 <HAL_GPIO_Init+0x324>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x216>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002328 <HAL_GPIO_Init+0x328>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x212>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4c      	ldr	r2, [pc, #304]	@ (800232c <HAL_GPIO_Init+0x32c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x20e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4b      	ldr	r2, [pc, #300]	@ (8002330 <HAL_GPIO_Init+0x330>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x20a>
 8002206:	2307      	movs	r3, #7
 8002208:	e00e      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800220a:	2308      	movs	r3, #8
 800220c:	e00c      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800220e:	2306      	movs	r3, #6
 8002210:	e00a      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002212:	2305      	movs	r3, #5
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002216:	2304      	movs	r3, #4
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002238:	4935      	ldr	r1, [pc, #212]	@ (8002310 <HAL_GPIO_Init+0x310>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <HAL_GPIO_Init+0x334>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226a:	4a32      	ldr	r2, [pc, #200]	@ (8002334 <HAL_GPIO_Init+0x334>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002270:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <HAL_GPIO_Init+0x334>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002294:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <HAL_GPIO_Init+0x334>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800229a:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <HAL_GPIO_Init+0x334>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022be:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <HAL_GPIO_Init+0x334>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <HAL_GPIO_Init+0x334>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e8:	4a12      	ldr	r2, [pc, #72]	@ (8002334 <HAL_GPIO_Init+0x334>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f ae90 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3724      	adds	r7, #36	@ 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40021400 	.word	0x40021400
 800232c:	40021800 	.word	0x40021800
 8002330:	40021c00 	.word	0x40021c00
 8002334:	40013c00 	.word	0x40013c00

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e267      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002356:	4b88      	ldr	r3, [pc, #544]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4b85      	ldr	r3, [pc, #532]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b82      	ldr	r3, [pc, #520]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b7e      	ldr	r3, [pc, #504]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e242      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b76      	ldr	r3, [pc, #472]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a75      	ldr	r2, [pc, #468]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b70      	ldr	r3, [pc, #448]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b69      	ldr	r3, [pc, #420]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a68      	ldr	r2, [pc, #416]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b66      	ldr	r3, [pc, #408]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a65      	ldr	r2, [pc, #404]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fc24 	bl	8000c3c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fc20 	bl	8000c3c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e207      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b5b      	ldr	r3, [pc, #364]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fc10 	bl	8000c3c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fc0c 	bl	8000c3c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1f3      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b51      	ldr	r3, [pc, #324]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800244e:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b44      	ldr	r3, [pc, #272]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1c7      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4937      	ldr	r1, [pc, #220]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b34      	ldr	r3, [pc, #208]	@ (800257c <HAL_RCC_OscConfig+0x244>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fbc5 	bl	8000c3c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fbc1 	bl	8000c3c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1a8      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4925      	ldr	r1, [pc, #148]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_RCC_OscConfig+0x244>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fba4 	bl	8000c3c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fba0 	bl	8000c3c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e187      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d036      	beq.n	8002590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <HAL_RCC_OscConfig+0x248>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fb84 	bl	8000c3c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fb80 	bl	8000c3c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e167      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e01b      	b.n	8002590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_RCC_OscConfig+0x248>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fb6d 	bl	8000c3c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e00e      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fb69 	bl	8000c3c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d907      	bls.n	8002584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e150      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
 8002578:	40023800 	.word	0x40023800
 800257c:	42470000 	.word	0x42470000
 8002580:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4b88      	ldr	r3, [pc, #544]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ea      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8097 	beq.w	80026cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a2:	4b81      	ldr	r3, [pc, #516]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b7d      	ldr	r3, [pc, #500]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a7c      	ldr	r2, [pc, #496]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025be:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b77      	ldr	r3, [pc, #476]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b74      	ldr	r3, [pc, #464]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a73      	ldr	r2, [pc, #460]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fb29 	bl	8000c3c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fe fb25 	bl	8000c3c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e10c      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x2ea>
 8002614:	4b64      	ldr	r3, [pc, #400]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4a63      	ldr	r2, [pc, #396]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002620:	e01c      	b.n	800265c <HAL_RCC_OscConfig+0x324>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x30c>
 800262a:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	4a5e      	ldr	r2, [pc, #376]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6713      	str	r3, [r2, #112]	@ 0x70
 8002636:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	4a5b      	ldr	r2, [pc, #364]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6713      	str	r3, [r2, #112]	@ 0x70
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0x324>
 8002644:	4b58      	ldr	r3, [pc, #352]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	4a57      	ldr	r2, [pc, #348]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002650:	4b55      	ldr	r3, [pc, #340]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	4a54      	ldr	r2, [pc, #336]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002656:	f023 0304 	bic.w	r3, r3, #4
 800265a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe faea 	bl	8000c3c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fae6 	bl	8000c3c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0cb      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002682:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ee      	beq.n	800266c <HAL_RCC_OscConfig+0x334>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe fad4 	bl	8000c3c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7fe fad0 	bl	8000c3c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0b5      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ee      	bne.n	8002698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	4a38      	ldr	r2, [pc, #224]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a1 	beq.w	8002818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d6:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d05c      	beq.n	800279c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d141      	bne.n	800276e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ea:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe faa4 	bl	8000c3c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f8:	f7fe faa0 	bl	8000c3c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e087      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	491b      	ldr	r1, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fa79 	bl	8000c3c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7fe fa75 	bl	8000c3c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e05c      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x416>
 800276c:	e054      	b.n	8002818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe fa62 	bl	8000c3c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fa5e 	bl	8000c3c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e045      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x444>
 800279a:	e03d      	b.n	8002818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e038      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40007000 	.word	0x40007000
 80027b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCC_OscConfig+0x4ec>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d028      	beq.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d121      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d11a      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d111      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe f990 	bl	8000c3c <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe f98c 	bl	8000c3c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe f8f0 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	080035e4 	.word	0x080035e4
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b094      	sub	sp, #80	@ 0x50
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80e1 	bhi.w	8002be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e0db      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b73      	ldr	r3, [pc, #460]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a2c:	e0db      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b73      	ldr	r3, [pc, #460]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8002a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a32:	e0d8      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	2200      	movs	r2, #0
 8002a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5e:	2300      	movs	r3, #0
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a66:	4622      	mov	r2, r4
 8002a68:	462b      	mov	r3, r5
 8002a6a:	f04f 0000 	mov.w	r0, #0
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	0159      	lsls	r1, r3, #5
 8002a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a78:	0150      	lsls	r0, r2, #5
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4621      	mov	r1, r4
 8002a80:	1a51      	subs	r1, r2, r1
 8002a82:	6139      	str	r1, [r7, #16]
 8002a84:	4629      	mov	r1, r5
 8002a86:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a98:	4659      	mov	r1, fp
 8002a9a:	018b      	lsls	r3, r1, #6
 8002a9c:	4651      	mov	r1, sl
 8002a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	018a      	lsls	r2, r1, #6
 8002aa6:	4651      	mov	r1, sl
 8002aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8002aac:	4659      	mov	r1, fp
 8002aae:	eb63 0901 	sbc.w	r9, r3, r1
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac6:	4690      	mov	r8, r2
 8002ac8:	4699      	mov	r9, r3
 8002aca:	4623      	mov	r3, r4
 8002acc:	eb18 0303 	adds.w	r3, r8, r3
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	eb49 0303 	adc.w	r3, r9, r3
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	024b      	lsls	r3, r1, #9
 8002aea:	4621      	mov	r1, r4
 8002aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002af0:	4621      	mov	r1, r4
 8002af2:	024a      	lsls	r2, r1, #9
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afa:	2200      	movs	r2, #0
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b04:	f7fd fb60 	bl	80001c8 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b10:	e058      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b38      	ldr	r3, [pc, #224]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	464b      	mov	r3, r9
 8002b30:	f04f 0000 	mov.w	r0, #0
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	0159      	lsls	r1, r3, #5
 8002b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3e:	0150      	lsls	r0, r2, #5
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4641      	mov	r1, r8
 8002b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b64:	ebb2 040a 	subs.w	r4, r2, sl
 8002b68:	eb63 050b 	sbc.w	r5, r3, fp
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	464b      	mov	r3, r9
 8002b88:	eb45 0303 	adc.w	r3, r5, r3
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	028b      	lsls	r3, r1, #10
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	028a      	lsls	r2, r1, #10
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	61fa      	str	r2, [r7, #28]
 8002bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb8:	f7fd fb06 	bl	80001c8 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3750      	adds	r7, #80	@ 0x50
 8002bec:	46bd      	mov	sp, r7
 8002bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	007a1200 	.word	0x007a1200

08002c00 <std>:
 8002c00:	2300      	movs	r3, #0
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
 8002c06:	e9c0 3300 	strd	r3, r3, [r0]
 8002c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c0e:	6083      	str	r3, [r0, #8]
 8002c10:	8181      	strh	r1, [r0, #12]
 8002c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c14:	81c2      	strh	r2, [r0, #14]
 8002c16:	6183      	str	r3, [r0, #24]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	305c      	adds	r0, #92	@ 0x5c
 8002c1e:	f000 f9e7 	bl	8002ff0 <memset>
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <std+0x58>)
 8002c24:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c26:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <std+0x5c>)
 8002c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <std+0x60>)
 8002c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <std+0x64>)
 8002c30:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <std+0x68>)
 8002c34:	6224      	str	r4, [r4, #32]
 8002c36:	429c      	cmp	r4, r3
 8002c38:	d006      	beq.n	8002c48 <std+0x48>
 8002c3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c3e:	4294      	cmp	r4, r2
 8002c40:	d002      	beq.n	8002c48 <std+0x48>
 8002c42:	33d0      	adds	r3, #208	@ 0xd0
 8002c44:	429c      	cmp	r4, r3
 8002c46:	d105      	bne.n	8002c54 <std+0x54>
 8002c48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c50:	f000 ba46 	b.w	80030e0 <__retarget_lock_init_recursive>
 8002c54:	bd10      	pop	{r4, pc}
 8002c56:	bf00      	nop
 8002c58:	08002e41 	.word	0x08002e41
 8002c5c:	08002e63 	.word	0x08002e63
 8002c60:	08002e9b 	.word	0x08002e9b
 8002c64:	08002ebf 	.word	0x08002ebf
 8002c68:	20000138 	.word	0x20000138

08002c6c <stdio_exit_handler>:
 8002c6c:	4a02      	ldr	r2, [pc, #8]	@ (8002c78 <stdio_exit_handler+0xc>)
 8002c6e:	4903      	ldr	r1, [pc, #12]	@ (8002c7c <stdio_exit_handler+0x10>)
 8002c70:	4803      	ldr	r0, [pc, #12]	@ (8002c80 <stdio_exit_handler+0x14>)
 8002c72:	f000 b869 	b.w	8002d48 <_fwalk_sglue>
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c
 8002c7c:	080033e1 	.word	0x080033e1
 8002c80:	2000001c 	.word	0x2000001c

08002c84 <cleanup_stdio>:
 8002c84:	6841      	ldr	r1, [r0, #4]
 8002c86:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <cleanup_stdio+0x34>)
 8002c88:	4299      	cmp	r1, r3
 8002c8a:	b510      	push	{r4, lr}
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	d001      	beq.n	8002c94 <cleanup_stdio+0x10>
 8002c90:	f000 fba6 	bl	80033e0 <_fflush_r>
 8002c94:	68a1      	ldr	r1, [r4, #8]
 8002c96:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <cleanup_stdio+0x38>)
 8002c98:	4299      	cmp	r1, r3
 8002c9a:	d002      	beq.n	8002ca2 <cleanup_stdio+0x1e>
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f000 fb9f 	bl	80033e0 <_fflush_r>
 8002ca2:	68e1      	ldr	r1, [r4, #12]
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <cleanup_stdio+0x3c>)
 8002ca6:	4299      	cmp	r1, r3
 8002ca8:	d004      	beq.n	8002cb4 <cleanup_stdio+0x30>
 8002caa:	4620      	mov	r0, r4
 8002cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cb0:	f000 bb96 	b.w	80033e0 <_fflush_r>
 8002cb4:	bd10      	pop	{r4, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000138 	.word	0x20000138
 8002cbc:	200001a0 	.word	0x200001a0
 8002cc0:	20000208 	.word	0x20000208

08002cc4 <global_stdio_init.part.0>:
 8002cc4:	b510      	push	{r4, lr}
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <global_stdio_init.part.0+0x30>)
 8002cc8:	4c0b      	ldr	r4, [pc, #44]	@ (8002cf8 <global_stdio_init.part.0+0x34>)
 8002cca:	4a0c      	ldr	r2, [pc, #48]	@ (8002cfc <global_stdio_init.part.0+0x38>)
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	4620      	mov	r0, r4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	f7ff ff94 	bl	8002c00 <std>
 8002cd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2109      	movs	r1, #9
 8002ce0:	f7ff ff8e 	bl	8002c00 <std>
 8002ce4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ce8:	2202      	movs	r2, #2
 8002cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cee:	2112      	movs	r1, #18
 8002cf0:	f7ff bf86 	b.w	8002c00 <std>
 8002cf4:	20000270 	.word	0x20000270
 8002cf8:	20000138 	.word	0x20000138
 8002cfc:	08002c6d 	.word	0x08002c6d

08002d00 <__sfp_lock_acquire>:
 8002d00:	4801      	ldr	r0, [pc, #4]	@ (8002d08 <__sfp_lock_acquire+0x8>)
 8002d02:	f000 b9ee 	b.w	80030e2 <__retarget_lock_acquire_recursive>
 8002d06:	bf00      	nop
 8002d08:	20000279 	.word	0x20000279

08002d0c <__sfp_lock_release>:
 8002d0c:	4801      	ldr	r0, [pc, #4]	@ (8002d14 <__sfp_lock_release+0x8>)
 8002d0e:	f000 b9e9 	b.w	80030e4 <__retarget_lock_release_recursive>
 8002d12:	bf00      	nop
 8002d14:	20000279 	.word	0x20000279

08002d18 <__sinit>:
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	f7ff fff0 	bl	8002d00 <__sfp_lock_acquire>
 8002d20:	6a23      	ldr	r3, [r4, #32]
 8002d22:	b11b      	cbz	r3, 8002d2c <__sinit+0x14>
 8002d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d28:	f7ff bff0 	b.w	8002d0c <__sfp_lock_release>
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <__sinit+0x28>)
 8002d2e:	6223      	str	r3, [r4, #32]
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <__sinit+0x2c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f5      	bne.n	8002d24 <__sinit+0xc>
 8002d38:	f7ff ffc4 	bl	8002cc4 <global_stdio_init.part.0>
 8002d3c:	e7f2      	b.n	8002d24 <__sinit+0xc>
 8002d3e:	bf00      	nop
 8002d40:	08002c85 	.word	0x08002c85
 8002d44:	20000270 	.word	0x20000270

08002d48 <_fwalk_sglue>:
 8002d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d4c:	4607      	mov	r7, r0
 8002d4e:	4688      	mov	r8, r1
 8002d50:	4614      	mov	r4, r2
 8002d52:	2600      	movs	r6, #0
 8002d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d58:	f1b9 0901 	subs.w	r9, r9, #1
 8002d5c:	d505      	bpl.n	8002d6a <_fwalk_sglue+0x22>
 8002d5e:	6824      	ldr	r4, [r4, #0]
 8002d60:	2c00      	cmp	r4, #0
 8002d62:	d1f7      	bne.n	8002d54 <_fwalk_sglue+0xc>
 8002d64:	4630      	mov	r0, r6
 8002d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d6a:	89ab      	ldrh	r3, [r5, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d907      	bls.n	8002d80 <_fwalk_sglue+0x38>
 8002d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d74:	3301      	adds	r3, #1
 8002d76:	d003      	beq.n	8002d80 <_fwalk_sglue+0x38>
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	47c0      	blx	r8
 8002d7e:	4306      	orrs	r6, r0
 8002d80:	3568      	adds	r5, #104	@ 0x68
 8002d82:	e7e9      	b.n	8002d58 <_fwalk_sglue+0x10>

08002d84 <_puts_r>:
 8002d84:	6a03      	ldr	r3, [r0, #32]
 8002d86:	b570      	push	{r4, r5, r6, lr}
 8002d88:	6884      	ldr	r4, [r0, #8]
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	460e      	mov	r6, r1
 8002d8e:	b90b      	cbnz	r3, 8002d94 <_puts_r+0x10>
 8002d90:	f7ff ffc2 	bl	8002d18 <__sinit>
 8002d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d96:	07db      	lsls	r3, r3, #31
 8002d98:	d405      	bmi.n	8002da6 <_puts_r+0x22>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	0598      	lsls	r0, r3, #22
 8002d9e:	d402      	bmi.n	8002da6 <_puts_r+0x22>
 8002da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002da2:	f000 f99e 	bl	80030e2 <__retarget_lock_acquire_recursive>
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	0719      	lsls	r1, r3, #28
 8002daa:	d502      	bpl.n	8002db2 <_puts_r+0x2e>
 8002dac:	6923      	ldr	r3, [r4, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d135      	bne.n	8002e1e <_puts_r+0x9a>
 8002db2:	4621      	mov	r1, r4
 8002db4:	4628      	mov	r0, r5
 8002db6:	f000 f8c5 	bl	8002f44 <__swsetup_r>
 8002dba:	b380      	cbz	r0, 8002e1e <_puts_r+0x9a>
 8002dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8002dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dc2:	07da      	lsls	r2, r3, #31
 8002dc4:	d405      	bmi.n	8002dd2 <_puts_r+0x4e>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	059b      	lsls	r3, r3, #22
 8002dca:	d402      	bmi.n	8002dd2 <_puts_r+0x4e>
 8002dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dce:	f000 f989 	bl	80030e4 <__retarget_lock_release_recursive>
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da04      	bge.n	8002de4 <_puts_r+0x60>
 8002dda:	69a2      	ldr	r2, [r4, #24]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	dc17      	bgt.n	8002e10 <_puts_r+0x8c>
 8002de0:	290a      	cmp	r1, #10
 8002de2:	d015      	beq.n	8002e10 <_puts_r+0x8c>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	6022      	str	r2, [r4, #0]
 8002dea:	7019      	strb	r1, [r3, #0]
 8002dec:	68a3      	ldr	r3, [r4, #8]
 8002dee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002df2:	3b01      	subs	r3, #1
 8002df4:	60a3      	str	r3, [r4, #8]
 8002df6:	2900      	cmp	r1, #0
 8002df8:	d1ed      	bne.n	8002dd6 <_puts_r+0x52>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	da11      	bge.n	8002e22 <_puts_r+0x9e>
 8002dfe:	4622      	mov	r2, r4
 8002e00:	210a      	movs	r1, #10
 8002e02:	4628      	mov	r0, r5
 8002e04:	f000 f85f 	bl	8002ec6 <__swbuf_r>
 8002e08:	3001      	adds	r0, #1
 8002e0a:	d0d7      	beq.n	8002dbc <_puts_r+0x38>
 8002e0c:	250a      	movs	r5, #10
 8002e0e:	e7d7      	b.n	8002dc0 <_puts_r+0x3c>
 8002e10:	4622      	mov	r2, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	f000 f857 	bl	8002ec6 <__swbuf_r>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d1e7      	bne.n	8002dec <_puts_r+0x68>
 8002e1c:	e7ce      	b.n	8002dbc <_puts_r+0x38>
 8002e1e:	3e01      	subs	r6, #1
 8002e20:	e7e4      	b.n	8002dec <_puts_r+0x68>
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	6022      	str	r2, [r4, #0]
 8002e28:	220a      	movs	r2, #10
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e7ee      	b.n	8002e0c <_puts_r+0x88>
	...

08002e30 <puts>:
 8002e30:	4b02      	ldr	r3, [pc, #8]	@ (8002e3c <puts+0xc>)
 8002e32:	4601      	mov	r1, r0
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	f7ff bfa5 	b.w	8002d84 <_puts_r>
 8002e3a:	bf00      	nop
 8002e3c:	20000018 	.word	0x20000018

08002e40 <__sread>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	460c      	mov	r4, r1
 8002e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e48:	f000 f8fc 	bl	8003044 <_read_r>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	bfab      	itete	ge
 8002e50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e52:	89a3      	ldrhlt	r3, [r4, #12]
 8002e54:	181b      	addge	r3, r3, r0
 8002e56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e5a:	bfac      	ite	ge
 8002e5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e5e:	81a3      	strhlt	r3, [r4, #12]
 8002e60:	bd10      	pop	{r4, pc}

08002e62 <__swrite>:
 8002e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e66:	461f      	mov	r7, r3
 8002e68:	898b      	ldrh	r3, [r1, #12]
 8002e6a:	05db      	lsls	r3, r3, #23
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	4616      	mov	r6, r2
 8002e72:	d505      	bpl.n	8002e80 <__swrite+0x1e>
 8002e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e78:	2302      	movs	r3, #2
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f000 f8d0 	bl	8003020 <_lseek_r>
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e8a:	81a3      	strh	r3, [r4, #12]
 8002e8c:	4632      	mov	r2, r6
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4628      	mov	r0, r5
 8002e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e96:	f000 b8e7 	b.w	8003068 <_write_r>

08002e9a <__sseek>:
 8002e9a:	b510      	push	{r4, lr}
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea2:	f000 f8bd 	bl	8003020 <_lseek_r>
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	bf15      	itete	ne
 8002eac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002eae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002eb6:	81a3      	strheq	r3, [r4, #12]
 8002eb8:	bf18      	it	ne
 8002eba:	81a3      	strhne	r3, [r4, #12]
 8002ebc:	bd10      	pop	{r4, pc}

08002ebe <__sclose>:
 8002ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec2:	f000 b89d 	b.w	8003000 <_close_r>

08002ec6 <__swbuf_r>:
 8002ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec8:	460e      	mov	r6, r1
 8002eca:	4614      	mov	r4, r2
 8002ecc:	4605      	mov	r5, r0
 8002ece:	b118      	cbz	r0, 8002ed8 <__swbuf_r+0x12>
 8002ed0:	6a03      	ldr	r3, [r0, #32]
 8002ed2:	b90b      	cbnz	r3, 8002ed8 <__swbuf_r+0x12>
 8002ed4:	f7ff ff20 	bl	8002d18 <__sinit>
 8002ed8:	69a3      	ldr	r3, [r4, #24]
 8002eda:	60a3      	str	r3, [r4, #8]
 8002edc:	89a3      	ldrh	r3, [r4, #12]
 8002ede:	071a      	lsls	r2, r3, #28
 8002ee0:	d501      	bpl.n	8002ee6 <__swbuf_r+0x20>
 8002ee2:	6923      	ldr	r3, [r4, #16]
 8002ee4:	b943      	cbnz	r3, 8002ef8 <__swbuf_r+0x32>
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f000 f82b 	bl	8002f44 <__swsetup_r>
 8002eee:	b118      	cbz	r0, 8002ef8 <__swbuf_r+0x32>
 8002ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8002ef4:	4638      	mov	r0, r7
 8002ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	6922      	ldr	r2, [r4, #16]
 8002efc:	1a98      	subs	r0, r3, r2
 8002efe:	6963      	ldr	r3, [r4, #20]
 8002f00:	b2f6      	uxtb	r6, r6
 8002f02:	4283      	cmp	r3, r0
 8002f04:	4637      	mov	r7, r6
 8002f06:	dc05      	bgt.n	8002f14 <__swbuf_r+0x4e>
 8002f08:	4621      	mov	r1, r4
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f000 fa68 	bl	80033e0 <_fflush_r>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d1ed      	bne.n	8002ef0 <__swbuf_r+0x2a>
 8002f14:	68a3      	ldr	r3, [r4, #8]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	60a3      	str	r3, [r4, #8]
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	6022      	str	r2, [r4, #0]
 8002f20:	701e      	strb	r6, [r3, #0]
 8002f22:	6962      	ldr	r2, [r4, #20]
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d004      	beq.n	8002f34 <__swbuf_r+0x6e>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	07db      	lsls	r3, r3, #31
 8002f2e:	d5e1      	bpl.n	8002ef4 <__swbuf_r+0x2e>
 8002f30:	2e0a      	cmp	r6, #10
 8002f32:	d1df      	bne.n	8002ef4 <__swbuf_r+0x2e>
 8002f34:	4621      	mov	r1, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 fa52 	bl	80033e0 <_fflush_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d0d9      	beq.n	8002ef4 <__swbuf_r+0x2e>
 8002f40:	e7d6      	b.n	8002ef0 <__swbuf_r+0x2a>
	...

08002f44 <__swsetup_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	4b29      	ldr	r3, [pc, #164]	@ (8002fec <__swsetup_r+0xa8>)
 8002f48:	4605      	mov	r5, r0
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	b118      	cbz	r0, 8002f58 <__swsetup_r+0x14>
 8002f50:	6a03      	ldr	r3, [r0, #32]
 8002f52:	b90b      	cbnz	r3, 8002f58 <__swsetup_r+0x14>
 8002f54:	f7ff fee0 	bl	8002d18 <__sinit>
 8002f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f5c:	0719      	lsls	r1, r3, #28
 8002f5e:	d422      	bmi.n	8002fa6 <__swsetup_r+0x62>
 8002f60:	06da      	lsls	r2, r3, #27
 8002f62:	d407      	bmi.n	8002f74 <__swsetup_r+0x30>
 8002f64:	2209      	movs	r2, #9
 8002f66:	602a      	str	r2, [r5, #0]
 8002f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f6c:	81a3      	strh	r3, [r4, #12]
 8002f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f72:	e033      	b.n	8002fdc <__swsetup_r+0x98>
 8002f74:	0758      	lsls	r0, r3, #29
 8002f76:	d512      	bpl.n	8002f9e <__swsetup_r+0x5a>
 8002f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f7a:	b141      	cbz	r1, 8002f8e <__swsetup_r+0x4a>
 8002f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f80:	4299      	cmp	r1, r3
 8002f82:	d002      	beq.n	8002f8a <__swsetup_r+0x46>
 8002f84:	4628      	mov	r0, r5
 8002f86:	f000 f8af 	bl	80030e8 <_free_r>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	2300      	movs	r3, #0
 8002f98:	6063      	str	r3, [r4, #4]
 8002f9a:	6923      	ldr	r3, [r4, #16]
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	f043 0308 	orr.w	r3, r3, #8
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	6923      	ldr	r3, [r4, #16]
 8002fa8:	b94b      	cbnz	r3, 8002fbe <__swsetup_r+0x7a>
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb4:	d003      	beq.n	8002fbe <__swsetup_r+0x7a>
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 fa5f 	bl	800347c <__smakebuf_r>
 8002fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc2:	f013 0201 	ands.w	r2, r3, #1
 8002fc6:	d00a      	beq.n	8002fde <__swsetup_r+0x9a>
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60a2      	str	r2, [r4, #8]
 8002fcc:	6962      	ldr	r2, [r4, #20]
 8002fce:	4252      	negs	r2, r2
 8002fd0:	61a2      	str	r2, [r4, #24]
 8002fd2:	6922      	ldr	r2, [r4, #16]
 8002fd4:	b942      	cbnz	r2, 8002fe8 <__swsetup_r+0xa4>
 8002fd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fda:	d1c5      	bne.n	8002f68 <__swsetup_r+0x24>
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
 8002fde:	0799      	lsls	r1, r3, #30
 8002fe0:	bf58      	it	pl
 8002fe2:	6962      	ldrpl	r2, [r4, #20]
 8002fe4:	60a2      	str	r2, [r4, #8]
 8002fe6:	e7f4      	b.n	8002fd2 <__swsetup_r+0x8e>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	e7f7      	b.n	8002fdc <__swsetup_r+0x98>
 8002fec:	20000018 	.word	0x20000018

08002ff0 <memset>:
 8002ff0:	4402      	add	r2, r0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <memset+0xa>
 8002ff8:	4770      	bx	lr
 8002ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffe:	e7f9      	b.n	8002ff4 <memset+0x4>

08003000 <_close_r>:
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	4d06      	ldr	r5, [pc, #24]	@ (800301c <_close_r+0x1c>)
 8003004:	2300      	movs	r3, #0
 8003006:	4604      	mov	r4, r0
 8003008:	4608      	mov	r0, r1
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	f7fd fd09 	bl	8000a22 <_close>
 8003010:	1c43      	adds	r3, r0, #1
 8003012:	d102      	bne.n	800301a <_close_r+0x1a>
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	b103      	cbz	r3, 800301a <_close_r+0x1a>
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	20000274 	.word	0x20000274

08003020 <_lseek_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4d07      	ldr	r5, [pc, #28]	@ (8003040 <_lseek_r+0x20>)
 8003024:	4604      	mov	r4, r0
 8003026:	4608      	mov	r0, r1
 8003028:	4611      	mov	r1, r2
 800302a:	2200      	movs	r2, #0
 800302c:	602a      	str	r2, [r5, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	f7fd fd1e 	bl	8000a70 <_lseek>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d102      	bne.n	800303e <_lseek_r+0x1e>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b103      	cbz	r3, 800303e <_lseek_r+0x1e>
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	20000274 	.word	0x20000274

08003044 <_read_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4d07      	ldr	r5, [pc, #28]	@ (8003064 <_read_r+0x20>)
 8003048:	4604      	mov	r4, r0
 800304a:	4608      	mov	r0, r1
 800304c:	4611      	mov	r1, r2
 800304e:	2200      	movs	r2, #0
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7fd fcc8 	bl	80009e8 <_read>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_read_r+0x1e>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_read_r+0x1e>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000274 	.word	0x20000274

08003068 <_write_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d07      	ldr	r5, [pc, #28]	@ (8003088 <_write_r+0x20>)
 800306c:	4604      	mov	r4, r0
 800306e:	4608      	mov	r0, r1
 8003070:	4611      	mov	r1, r2
 8003072:	2200      	movs	r2, #0
 8003074:	602a      	str	r2, [r5, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f7fd fba8 	bl	80007cc <_write>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_write_r+0x1e>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_write_r+0x1e>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	20000274 	.word	0x20000274

0800308c <__errno>:
 800308c:	4b01      	ldr	r3, [pc, #4]	@ (8003094 <__errno+0x8>)
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000018 	.word	0x20000018

08003098 <__libc_init_array>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	4d0d      	ldr	r5, [pc, #52]	@ (80030d0 <__libc_init_array+0x38>)
 800309c:	4c0d      	ldr	r4, [pc, #52]	@ (80030d4 <__libc_init_array+0x3c>)
 800309e:	1b64      	subs	r4, r4, r5
 80030a0:	10a4      	asrs	r4, r4, #2
 80030a2:	2600      	movs	r6, #0
 80030a4:	42a6      	cmp	r6, r4
 80030a6:	d109      	bne.n	80030bc <__libc_init_array+0x24>
 80030a8:	4d0b      	ldr	r5, [pc, #44]	@ (80030d8 <__libc_init_array+0x40>)
 80030aa:	4c0c      	ldr	r4, [pc, #48]	@ (80030dc <__libc_init_array+0x44>)
 80030ac:	f000 fa54 	bl	8003558 <_init>
 80030b0:	1b64      	subs	r4, r4, r5
 80030b2:	10a4      	asrs	r4, r4, #2
 80030b4:	2600      	movs	r6, #0
 80030b6:	42a6      	cmp	r6, r4
 80030b8:	d105      	bne.n	80030c6 <__libc_init_array+0x2e>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c0:	4798      	blx	r3
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7ee      	b.n	80030a4 <__libc_init_array+0xc>
 80030c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ca:	4798      	blx	r3
 80030cc:	3601      	adds	r6, #1
 80030ce:	e7f2      	b.n	80030b6 <__libc_init_array+0x1e>
 80030d0:	08003604 	.word	0x08003604
 80030d4:	08003604 	.word	0x08003604
 80030d8:	08003604 	.word	0x08003604
 80030dc:	08003608 	.word	0x08003608

080030e0 <__retarget_lock_init_recursive>:
 80030e0:	4770      	bx	lr

080030e2 <__retarget_lock_acquire_recursive>:
 80030e2:	4770      	bx	lr

080030e4 <__retarget_lock_release_recursive>:
 80030e4:	4770      	bx	lr
	...

080030e8 <_free_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4605      	mov	r5, r0
 80030ec:	2900      	cmp	r1, #0
 80030ee:	d041      	beq.n	8003174 <_free_r+0x8c>
 80030f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030f4:	1f0c      	subs	r4, r1, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bfb8      	it	lt
 80030fa:	18e4      	addlt	r4, r4, r3
 80030fc:	f000 f8e0 	bl	80032c0 <__malloc_lock>
 8003100:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <_free_r+0x90>)
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	b933      	cbnz	r3, 8003114 <_free_r+0x2c>
 8003106:	6063      	str	r3, [r4, #4]
 8003108:	6014      	str	r4, [r2, #0]
 800310a:	4628      	mov	r0, r5
 800310c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003110:	f000 b8dc 	b.w	80032cc <__malloc_unlock>
 8003114:	42a3      	cmp	r3, r4
 8003116:	d908      	bls.n	800312a <_free_r+0x42>
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	1821      	adds	r1, r4, r0
 800311c:	428b      	cmp	r3, r1
 800311e:	bf01      	itttt	eq
 8003120:	6819      	ldreq	r1, [r3, #0]
 8003122:	685b      	ldreq	r3, [r3, #4]
 8003124:	1809      	addeq	r1, r1, r0
 8003126:	6021      	streq	r1, [r4, #0]
 8003128:	e7ed      	b.n	8003106 <_free_r+0x1e>
 800312a:	461a      	mov	r2, r3
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	b10b      	cbz	r3, 8003134 <_free_r+0x4c>
 8003130:	42a3      	cmp	r3, r4
 8003132:	d9fa      	bls.n	800312a <_free_r+0x42>
 8003134:	6811      	ldr	r1, [r2, #0]
 8003136:	1850      	adds	r0, r2, r1
 8003138:	42a0      	cmp	r0, r4
 800313a:	d10b      	bne.n	8003154 <_free_r+0x6c>
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	4401      	add	r1, r0
 8003140:	1850      	adds	r0, r2, r1
 8003142:	4283      	cmp	r3, r0
 8003144:	6011      	str	r1, [r2, #0]
 8003146:	d1e0      	bne.n	800310a <_free_r+0x22>
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	6053      	str	r3, [r2, #4]
 800314e:	4408      	add	r0, r1
 8003150:	6010      	str	r0, [r2, #0]
 8003152:	e7da      	b.n	800310a <_free_r+0x22>
 8003154:	d902      	bls.n	800315c <_free_r+0x74>
 8003156:	230c      	movs	r3, #12
 8003158:	602b      	str	r3, [r5, #0]
 800315a:	e7d6      	b.n	800310a <_free_r+0x22>
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	1821      	adds	r1, r4, r0
 8003160:	428b      	cmp	r3, r1
 8003162:	bf04      	itt	eq
 8003164:	6819      	ldreq	r1, [r3, #0]
 8003166:	685b      	ldreq	r3, [r3, #4]
 8003168:	6063      	str	r3, [r4, #4]
 800316a:	bf04      	itt	eq
 800316c:	1809      	addeq	r1, r1, r0
 800316e:	6021      	streq	r1, [r4, #0]
 8003170:	6054      	str	r4, [r2, #4]
 8003172:	e7ca      	b.n	800310a <_free_r+0x22>
 8003174:	bd38      	pop	{r3, r4, r5, pc}
 8003176:	bf00      	nop
 8003178:	20000280 	.word	0x20000280

0800317c <sbrk_aligned>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	4e0f      	ldr	r6, [pc, #60]	@ (80031bc <sbrk_aligned+0x40>)
 8003180:	460c      	mov	r4, r1
 8003182:	6831      	ldr	r1, [r6, #0]
 8003184:	4605      	mov	r5, r0
 8003186:	b911      	cbnz	r1, 800318e <sbrk_aligned+0x12>
 8003188:	f000 f9d6 	bl	8003538 <_sbrk_r>
 800318c:	6030      	str	r0, [r6, #0]
 800318e:	4621      	mov	r1, r4
 8003190:	4628      	mov	r0, r5
 8003192:	f000 f9d1 	bl	8003538 <_sbrk_r>
 8003196:	1c43      	adds	r3, r0, #1
 8003198:	d103      	bne.n	80031a2 <sbrk_aligned+0x26>
 800319a:	f04f 34ff 	mov.w	r4, #4294967295
 800319e:	4620      	mov	r0, r4
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
 80031a2:	1cc4      	adds	r4, r0, #3
 80031a4:	f024 0403 	bic.w	r4, r4, #3
 80031a8:	42a0      	cmp	r0, r4
 80031aa:	d0f8      	beq.n	800319e <sbrk_aligned+0x22>
 80031ac:	1a21      	subs	r1, r4, r0
 80031ae:	4628      	mov	r0, r5
 80031b0:	f000 f9c2 	bl	8003538 <_sbrk_r>
 80031b4:	3001      	adds	r0, #1
 80031b6:	d1f2      	bne.n	800319e <sbrk_aligned+0x22>
 80031b8:	e7ef      	b.n	800319a <sbrk_aligned+0x1e>
 80031ba:	bf00      	nop
 80031bc:	2000027c 	.word	0x2000027c

080031c0 <_malloc_r>:
 80031c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031c4:	1ccd      	adds	r5, r1, #3
 80031c6:	f025 0503 	bic.w	r5, r5, #3
 80031ca:	3508      	adds	r5, #8
 80031cc:	2d0c      	cmp	r5, #12
 80031ce:	bf38      	it	cc
 80031d0:	250c      	movcc	r5, #12
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	4606      	mov	r6, r0
 80031d6:	db01      	blt.n	80031dc <_malloc_r+0x1c>
 80031d8:	42a9      	cmp	r1, r5
 80031da:	d904      	bls.n	80031e6 <_malloc_r+0x26>
 80031dc:	230c      	movs	r3, #12
 80031de:	6033      	str	r3, [r6, #0]
 80031e0:	2000      	movs	r0, #0
 80031e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032bc <_malloc_r+0xfc>
 80031ea:	f000 f869 	bl	80032c0 <__malloc_lock>
 80031ee:	f8d8 3000 	ldr.w	r3, [r8]
 80031f2:	461c      	mov	r4, r3
 80031f4:	bb44      	cbnz	r4, 8003248 <_malloc_r+0x88>
 80031f6:	4629      	mov	r1, r5
 80031f8:	4630      	mov	r0, r6
 80031fa:	f7ff ffbf 	bl	800317c <sbrk_aligned>
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	4604      	mov	r4, r0
 8003202:	d158      	bne.n	80032b6 <_malloc_r+0xf6>
 8003204:	f8d8 4000 	ldr.w	r4, [r8]
 8003208:	4627      	mov	r7, r4
 800320a:	2f00      	cmp	r7, #0
 800320c:	d143      	bne.n	8003296 <_malloc_r+0xd6>
 800320e:	2c00      	cmp	r4, #0
 8003210:	d04b      	beq.n	80032aa <_malloc_r+0xea>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	4639      	mov	r1, r7
 8003216:	4630      	mov	r0, r6
 8003218:	eb04 0903 	add.w	r9, r4, r3
 800321c:	f000 f98c 	bl	8003538 <_sbrk_r>
 8003220:	4581      	cmp	r9, r0
 8003222:	d142      	bne.n	80032aa <_malloc_r+0xea>
 8003224:	6821      	ldr	r1, [r4, #0]
 8003226:	1a6d      	subs	r5, r5, r1
 8003228:	4629      	mov	r1, r5
 800322a:	4630      	mov	r0, r6
 800322c:	f7ff ffa6 	bl	800317c <sbrk_aligned>
 8003230:	3001      	adds	r0, #1
 8003232:	d03a      	beq.n	80032aa <_malloc_r+0xea>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	442b      	add	r3, r5
 8003238:	6023      	str	r3, [r4, #0]
 800323a:	f8d8 3000 	ldr.w	r3, [r8]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	bb62      	cbnz	r2, 800329c <_malloc_r+0xdc>
 8003242:	f8c8 7000 	str.w	r7, [r8]
 8003246:	e00f      	b.n	8003268 <_malloc_r+0xa8>
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	1b52      	subs	r2, r2, r5
 800324c:	d420      	bmi.n	8003290 <_malloc_r+0xd0>
 800324e:	2a0b      	cmp	r2, #11
 8003250:	d917      	bls.n	8003282 <_malloc_r+0xc2>
 8003252:	1961      	adds	r1, r4, r5
 8003254:	42a3      	cmp	r3, r4
 8003256:	6025      	str	r5, [r4, #0]
 8003258:	bf18      	it	ne
 800325a:	6059      	strne	r1, [r3, #4]
 800325c:	6863      	ldr	r3, [r4, #4]
 800325e:	bf08      	it	eq
 8003260:	f8c8 1000 	streq.w	r1, [r8]
 8003264:	5162      	str	r2, [r4, r5]
 8003266:	604b      	str	r3, [r1, #4]
 8003268:	4630      	mov	r0, r6
 800326a:	f000 f82f 	bl	80032cc <__malloc_unlock>
 800326e:	f104 000b 	add.w	r0, r4, #11
 8003272:	1d23      	adds	r3, r4, #4
 8003274:	f020 0007 	bic.w	r0, r0, #7
 8003278:	1ac2      	subs	r2, r0, r3
 800327a:	bf1c      	itt	ne
 800327c:	1a1b      	subne	r3, r3, r0
 800327e:	50a3      	strne	r3, [r4, r2]
 8003280:	e7af      	b.n	80031e2 <_malloc_r+0x22>
 8003282:	6862      	ldr	r2, [r4, #4]
 8003284:	42a3      	cmp	r3, r4
 8003286:	bf0c      	ite	eq
 8003288:	f8c8 2000 	streq.w	r2, [r8]
 800328c:	605a      	strne	r2, [r3, #4]
 800328e:	e7eb      	b.n	8003268 <_malloc_r+0xa8>
 8003290:	4623      	mov	r3, r4
 8003292:	6864      	ldr	r4, [r4, #4]
 8003294:	e7ae      	b.n	80031f4 <_malloc_r+0x34>
 8003296:	463c      	mov	r4, r7
 8003298:	687f      	ldr	r7, [r7, #4]
 800329a:	e7b6      	b.n	800320a <_malloc_r+0x4a>
 800329c:	461a      	mov	r2, r3
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	d1fb      	bne.n	800329c <_malloc_r+0xdc>
 80032a4:	2300      	movs	r3, #0
 80032a6:	6053      	str	r3, [r2, #4]
 80032a8:	e7de      	b.n	8003268 <_malloc_r+0xa8>
 80032aa:	230c      	movs	r3, #12
 80032ac:	6033      	str	r3, [r6, #0]
 80032ae:	4630      	mov	r0, r6
 80032b0:	f000 f80c 	bl	80032cc <__malloc_unlock>
 80032b4:	e794      	b.n	80031e0 <_malloc_r+0x20>
 80032b6:	6005      	str	r5, [r0, #0]
 80032b8:	e7d6      	b.n	8003268 <_malloc_r+0xa8>
 80032ba:	bf00      	nop
 80032bc:	20000280 	.word	0x20000280

080032c0 <__malloc_lock>:
 80032c0:	4801      	ldr	r0, [pc, #4]	@ (80032c8 <__malloc_lock+0x8>)
 80032c2:	f7ff bf0e 	b.w	80030e2 <__retarget_lock_acquire_recursive>
 80032c6:	bf00      	nop
 80032c8:	20000278 	.word	0x20000278

080032cc <__malloc_unlock>:
 80032cc:	4801      	ldr	r0, [pc, #4]	@ (80032d4 <__malloc_unlock+0x8>)
 80032ce:	f7ff bf09 	b.w	80030e4 <__retarget_lock_release_recursive>
 80032d2:	bf00      	nop
 80032d4:	20000278 	.word	0x20000278

080032d8 <__sflush_r>:
 80032d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e0:	0716      	lsls	r6, r2, #28
 80032e2:	4605      	mov	r5, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	d454      	bmi.n	8003392 <__sflush_r+0xba>
 80032e8:	684b      	ldr	r3, [r1, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	dc02      	bgt.n	80032f4 <__sflush_r+0x1c>
 80032ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	dd48      	ble.n	8003386 <__sflush_r+0xae>
 80032f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d045      	beq.n	8003386 <__sflush_r+0xae>
 80032fa:	2300      	movs	r3, #0
 80032fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003300:	682f      	ldr	r7, [r5, #0]
 8003302:	6a21      	ldr	r1, [r4, #32]
 8003304:	602b      	str	r3, [r5, #0]
 8003306:	d030      	beq.n	800336a <__sflush_r+0x92>
 8003308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800330a:	89a3      	ldrh	r3, [r4, #12]
 800330c:	0759      	lsls	r1, r3, #29
 800330e:	d505      	bpl.n	800331c <__sflush_r+0x44>
 8003310:	6863      	ldr	r3, [r4, #4]
 8003312:	1ad2      	subs	r2, r2, r3
 8003314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003316:	b10b      	cbz	r3, 800331c <__sflush_r+0x44>
 8003318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	2300      	movs	r3, #0
 800331e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003320:	6a21      	ldr	r1, [r4, #32]
 8003322:	4628      	mov	r0, r5
 8003324:	47b0      	blx	r6
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	d106      	bne.n	800333a <__sflush_r+0x62>
 800332c:	6829      	ldr	r1, [r5, #0]
 800332e:	291d      	cmp	r1, #29
 8003330:	d82b      	bhi.n	800338a <__sflush_r+0xb2>
 8003332:	4a2a      	ldr	r2, [pc, #168]	@ (80033dc <__sflush_r+0x104>)
 8003334:	40ca      	lsrs	r2, r1
 8003336:	07d6      	lsls	r6, r2, #31
 8003338:	d527      	bpl.n	800338a <__sflush_r+0xb2>
 800333a:	2200      	movs	r2, #0
 800333c:	6062      	str	r2, [r4, #4]
 800333e:	04d9      	lsls	r1, r3, #19
 8003340:	6922      	ldr	r2, [r4, #16]
 8003342:	6022      	str	r2, [r4, #0]
 8003344:	d504      	bpl.n	8003350 <__sflush_r+0x78>
 8003346:	1c42      	adds	r2, r0, #1
 8003348:	d101      	bne.n	800334e <__sflush_r+0x76>
 800334a:	682b      	ldr	r3, [r5, #0]
 800334c:	b903      	cbnz	r3, 8003350 <__sflush_r+0x78>
 800334e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003352:	602f      	str	r7, [r5, #0]
 8003354:	b1b9      	cbz	r1, 8003386 <__sflush_r+0xae>
 8003356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800335a:	4299      	cmp	r1, r3
 800335c:	d002      	beq.n	8003364 <__sflush_r+0x8c>
 800335e:	4628      	mov	r0, r5
 8003360:	f7ff fec2 	bl	80030e8 <_free_r>
 8003364:	2300      	movs	r3, #0
 8003366:	6363      	str	r3, [r4, #52]	@ 0x34
 8003368:	e00d      	b.n	8003386 <__sflush_r+0xae>
 800336a:	2301      	movs	r3, #1
 800336c:	4628      	mov	r0, r5
 800336e:	47b0      	blx	r6
 8003370:	4602      	mov	r2, r0
 8003372:	1c50      	adds	r0, r2, #1
 8003374:	d1c9      	bne.n	800330a <__sflush_r+0x32>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0c6      	beq.n	800330a <__sflush_r+0x32>
 800337c:	2b1d      	cmp	r3, #29
 800337e:	d001      	beq.n	8003384 <__sflush_r+0xac>
 8003380:	2b16      	cmp	r3, #22
 8003382:	d11e      	bne.n	80033c2 <__sflush_r+0xea>
 8003384:	602f      	str	r7, [r5, #0]
 8003386:	2000      	movs	r0, #0
 8003388:	e022      	b.n	80033d0 <__sflush_r+0xf8>
 800338a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800338e:	b21b      	sxth	r3, r3
 8003390:	e01b      	b.n	80033ca <__sflush_r+0xf2>
 8003392:	690f      	ldr	r7, [r1, #16]
 8003394:	2f00      	cmp	r7, #0
 8003396:	d0f6      	beq.n	8003386 <__sflush_r+0xae>
 8003398:	0793      	lsls	r3, r2, #30
 800339a:	680e      	ldr	r6, [r1, #0]
 800339c:	bf08      	it	eq
 800339e:	694b      	ldreq	r3, [r1, #20]
 80033a0:	600f      	str	r7, [r1, #0]
 80033a2:	bf18      	it	ne
 80033a4:	2300      	movne	r3, #0
 80033a6:	eba6 0807 	sub.w	r8, r6, r7
 80033aa:	608b      	str	r3, [r1, #8]
 80033ac:	f1b8 0f00 	cmp.w	r8, #0
 80033b0:	dde9      	ble.n	8003386 <__sflush_r+0xae>
 80033b2:	6a21      	ldr	r1, [r4, #32]
 80033b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80033b6:	4643      	mov	r3, r8
 80033b8:	463a      	mov	r2, r7
 80033ba:	4628      	mov	r0, r5
 80033bc:	47b0      	blx	r6
 80033be:	2800      	cmp	r0, #0
 80033c0:	dc08      	bgt.n	80033d4 <__sflush_r+0xfc>
 80033c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ca:	81a3      	strh	r3, [r4, #12]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033d4:	4407      	add	r7, r0
 80033d6:	eba8 0800 	sub.w	r8, r8, r0
 80033da:	e7e7      	b.n	80033ac <__sflush_r+0xd4>
 80033dc:	20400001 	.word	0x20400001

080033e0 <_fflush_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	690b      	ldr	r3, [r1, #16]
 80033e4:	4605      	mov	r5, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	b913      	cbnz	r3, 80033f0 <_fflush_r+0x10>
 80033ea:	2500      	movs	r5, #0
 80033ec:	4628      	mov	r0, r5
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	b118      	cbz	r0, 80033fa <_fflush_r+0x1a>
 80033f2:	6a03      	ldr	r3, [r0, #32]
 80033f4:	b90b      	cbnz	r3, 80033fa <_fflush_r+0x1a>
 80033f6:	f7ff fc8f 	bl	8002d18 <__sinit>
 80033fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f3      	beq.n	80033ea <_fflush_r+0xa>
 8003402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003404:	07d0      	lsls	r0, r2, #31
 8003406:	d404      	bmi.n	8003412 <_fflush_r+0x32>
 8003408:	0599      	lsls	r1, r3, #22
 800340a:	d402      	bmi.n	8003412 <_fflush_r+0x32>
 800340c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800340e:	f7ff fe68 	bl	80030e2 <__retarget_lock_acquire_recursive>
 8003412:	4628      	mov	r0, r5
 8003414:	4621      	mov	r1, r4
 8003416:	f7ff ff5f 	bl	80032d8 <__sflush_r>
 800341a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800341c:	07da      	lsls	r2, r3, #31
 800341e:	4605      	mov	r5, r0
 8003420:	d4e4      	bmi.n	80033ec <_fflush_r+0xc>
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	059b      	lsls	r3, r3, #22
 8003426:	d4e1      	bmi.n	80033ec <_fflush_r+0xc>
 8003428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800342a:	f7ff fe5b 	bl	80030e4 <__retarget_lock_release_recursive>
 800342e:	e7dd      	b.n	80033ec <_fflush_r+0xc>

08003430 <__swhatbuf_r>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	460c      	mov	r4, r1
 8003434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003438:	2900      	cmp	r1, #0
 800343a:	b096      	sub	sp, #88	@ 0x58
 800343c:	4615      	mov	r5, r2
 800343e:	461e      	mov	r6, r3
 8003440:	da0d      	bge.n	800345e <__swhatbuf_r+0x2e>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	bf14      	ite	ne
 800344e:	2340      	movne	r3, #64	@ 0x40
 8003450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003454:	2000      	movs	r0, #0
 8003456:	6031      	str	r1, [r6, #0]
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	b016      	add	sp, #88	@ 0x58
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	466a      	mov	r2, sp
 8003460:	f000 f848 	bl	80034f4 <_fstat_r>
 8003464:	2800      	cmp	r0, #0
 8003466:	dbec      	blt.n	8003442 <__swhatbuf_r+0x12>
 8003468:	9901      	ldr	r1, [sp, #4]
 800346a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800346e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003472:	4259      	negs	r1, r3
 8003474:	4159      	adcs	r1, r3
 8003476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800347a:	e7eb      	b.n	8003454 <__swhatbuf_r+0x24>

0800347c <__smakebuf_r>:
 800347c:	898b      	ldrh	r3, [r1, #12]
 800347e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003480:	079d      	lsls	r5, r3, #30
 8003482:	4606      	mov	r6, r0
 8003484:	460c      	mov	r4, r1
 8003486:	d507      	bpl.n	8003498 <__smakebuf_r+0x1c>
 8003488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	6123      	str	r3, [r4, #16]
 8003490:	2301      	movs	r3, #1
 8003492:	6163      	str	r3, [r4, #20]
 8003494:	b003      	add	sp, #12
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003498:	ab01      	add	r3, sp, #4
 800349a:	466a      	mov	r2, sp
 800349c:	f7ff ffc8 	bl	8003430 <__swhatbuf_r>
 80034a0:	9f00      	ldr	r7, [sp, #0]
 80034a2:	4605      	mov	r5, r0
 80034a4:	4639      	mov	r1, r7
 80034a6:	4630      	mov	r0, r6
 80034a8:	f7ff fe8a 	bl	80031c0 <_malloc_r>
 80034ac:	b948      	cbnz	r0, 80034c2 <__smakebuf_r+0x46>
 80034ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034b2:	059a      	lsls	r2, r3, #22
 80034b4:	d4ee      	bmi.n	8003494 <__smakebuf_r+0x18>
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	e7e2      	b.n	8003488 <__smakebuf_r+0xc>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	6020      	str	r0, [r4, #0]
 80034c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ca:	81a3      	strh	r3, [r4, #12]
 80034cc:	9b01      	ldr	r3, [sp, #4]
 80034ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80034d2:	b15b      	cbz	r3, 80034ec <__smakebuf_r+0x70>
 80034d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f81d 	bl	8003518 <_isatty_r>
 80034de:	b128      	cbz	r0, 80034ec <__smakebuf_r+0x70>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	81a3      	strh	r3, [r4, #12]
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	431d      	orrs	r5, r3
 80034f0:	81a5      	strh	r5, [r4, #12]
 80034f2:	e7cf      	b.n	8003494 <__smakebuf_r+0x18>

080034f4 <_fstat_r>:
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	4d07      	ldr	r5, [pc, #28]	@ (8003514 <_fstat_r+0x20>)
 80034f8:	2300      	movs	r3, #0
 80034fa:	4604      	mov	r4, r0
 80034fc:	4608      	mov	r0, r1
 80034fe:	4611      	mov	r1, r2
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	f7fd fa9a 	bl	8000a3a <_fstat>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d102      	bne.n	8003510 <_fstat_r+0x1c>
 800350a:	682b      	ldr	r3, [r5, #0]
 800350c:	b103      	cbz	r3, 8003510 <_fstat_r+0x1c>
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	20000274 	.word	0x20000274

08003518 <_isatty_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4d06      	ldr	r5, [pc, #24]	@ (8003534 <_isatty_r+0x1c>)
 800351c:	2300      	movs	r3, #0
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	f7fd fa99 	bl	8000a5a <_isatty>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_isatty_r+0x1a>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_isatty_r+0x1a>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	20000274 	.word	0x20000274

08003538 <_sbrk_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4d06      	ldr	r5, [pc, #24]	@ (8003554 <_sbrk_r+0x1c>)
 800353c:	2300      	movs	r3, #0
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	602b      	str	r3, [r5, #0]
 8003544:	f7fd faa2 	bl	8000a8c <_sbrk>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_sbrk_r+0x1a>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_sbrk_r+0x1a>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	20000274 	.word	0x20000274

08003558 <_init>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr

08003564 <_fini>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr
