
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d6c  08006fb8  08006fb8  00007fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d24  08007d24  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d24  08007d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d2c  08007d2c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d2c  08007d2c  00008d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d30  08007d30  00008d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007d34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          00000770  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007d8  200007d8  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004fc56  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000385b  00000000  00000000  00058cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003998  00000000  00000000  0005c550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002b68  00000000  00000000  0005fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002344a  00000000  00000000  00062a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee5d  00000000  00000000  00085e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1f64  00000000  00000000  000a4cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00186c5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000108f4  00000000  00000000  00186ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00197594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fa0 	.word	0x08006fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006fa0 	.word	0x08006fa0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b988 	b.w	80009d0 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	468e      	mov	lr, r1
 80006e0:	4604      	mov	r4, r0
 80006e2:	4688      	mov	r8, r1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d14a      	bne.n	800077e <__udivmoddi4+0xa6>
 80006e8:	428a      	cmp	r2, r1
 80006ea:	4617      	mov	r7, r2
 80006ec:	d962      	bls.n	80007b4 <__udivmoddi4+0xdc>
 80006ee:	fab2 f682 	clz	r6, r2
 80006f2:	b14e      	cbz	r6, 8000708 <__udivmoddi4+0x30>
 80006f4:	f1c6 0320 	rsb	r3, r6, #32
 80006f8:	fa01 f806 	lsl.w	r8, r1, r6
 80006fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000700:	40b7      	lsls	r7, r6
 8000702:	ea43 0808 	orr.w	r8, r3, r8
 8000706:	40b4      	lsls	r4, r6
 8000708:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800070c:	fa1f fc87 	uxth.w	ip, r7
 8000710:	fbb8 f1fe 	udiv	r1, r8, lr
 8000714:	0c23      	lsrs	r3, r4, #16
 8000716:	fb0e 8811 	mls	r8, lr, r1, r8
 800071a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800071e:	fb01 f20c 	mul.w	r2, r1, ip
 8000722:	429a      	cmp	r2, r3
 8000724:	d909      	bls.n	800073a <__udivmoddi4+0x62>
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	f101 30ff 	add.w	r0, r1, #4294967295
 800072c:	f080 80ea 	bcs.w	8000904 <__udivmoddi4+0x22c>
 8000730:	429a      	cmp	r2, r3
 8000732:	f240 80e7 	bls.w	8000904 <__udivmoddi4+0x22c>
 8000736:	3902      	subs	r1, #2
 8000738:	443b      	add	r3, r7
 800073a:	1a9a      	subs	r2, r3, r2
 800073c:	b2a3      	uxth	r3, r4
 800073e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000742:	fb0e 2210 	mls	r2, lr, r0, r2
 8000746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800074a:	fb00 fc0c 	mul.w	ip, r0, ip
 800074e:	459c      	cmp	ip, r3
 8000750:	d909      	bls.n	8000766 <__udivmoddi4+0x8e>
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	f100 32ff 	add.w	r2, r0, #4294967295
 8000758:	f080 80d6 	bcs.w	8000908 <__udivmoddi4+0x230>
 800075c:	459c      	cmp	ip, r3
 800075e:	f240 80d3 	bls.w	8000908 <__udivmoddi4+0x230>
 8000762:	443b      	add	r3, r7
 8000764:	3802      	subs	r0, #2
 8000766:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800076a:	eba3 030c 	sub.w	r3, r3, ip
 800076e:	2100      	movs	r1, #0
 8000770:	b11d      	cbz	r5, 800077a <__udivmoddi4+0xa2>
 8000772:	40f3      	lsrs	r3, r6
 8000774:	2200      	movs	r2, #0
 8000776:	e9c5 3200 	strd	r3, r2, [r5]
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	428b      	cmp	r3, r1
 8000780:	d905      	bls.n	800078e <__udivmoddi4+0xb6>
 8000782:	b10d      	cbz	r5, 8000788 <__udivmoddi4+0xb0>
 8000784:	e9c5 0100 	strd	r0, r1, [r5]
 8000788:	2100      	movs	r1, #0
 800078a:	4608      	mov	r0, r1
 800078c:	e7f5      	b.n	800077a <__udivmoddi4+0xa2>
 800078e:	fab3 f183 	clz	r1, r3
 8000792:	2900      	cmp	r1, #0
 8000794:	d146      	bne.n	8000824 <__udivmoddi4+0x14c>
 8000796:	4573      	cmp	r3, lr
 8000798:	d302      	bcc.n	80007a0 <__udivmoddi4+0xc8>
 800079a:	4282      	cmp	r2, r0
 800079c:	f200 8105 	bhi.w	80009aa <__udivmoddi4+0x2d2>
 80007a0:	1a84      	subs	r4, r0, r2
 80007a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	4690      	mov	r8, r2
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d0e5      	beq.n	800077a <__udivmoddi4+0xa2>
 80007ae:	e9c5 4800 	strd	r4, r8, [r5]
 80007b2:	e7e2      	b.n	800077a <__udivmoddi4+0xa2>
 80007b4:	2a00      	cmp	r2, #0
 80007b6:	f000 8090 	beq.w	80008da <__udivmoddi4+0x202>
 80007ba:	fab2 f682 	clz	r6, r2
 80007be:	2e00      	cmp	r6, #0
 80007c0:	f040 80a4 	bne.w	800090c <__udivmoddi4+0x234>
 80007c4:	1a8a      	subs	r2, r1, r2
 80007c6:	0c03      	lsrs	r3, r0, #16
 80007c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007cc:	b280      	uxth	r0, r0
 80007ce:	b2bc      	uxth	r4, r7
 80007d0:	2101      	movs	r1, #1
 80007d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007de:	fb04 f20c 	mul.w	r2, r4, ip
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d907      	bls.n	80007f6 <__udivmoddi4+0x11e>
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007ec:	d202      	bcs.n	80007f4 <__udivmoddi4+0x11c>
 80007ee:	429a      	cmp	r2, r3
 80007f0:	f200 80e0 	bhi.w	80009b4 <__udivmoddi4+0x2dc>
 80007f4:	46c4      	mov	ip, r8
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000800:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000804:	fb02 f404 	mul.w	r4, r2, r4
 8000808:	429c      	cmp	r4, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x144>
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x142>
 8000814:	429c      	cmp	r4, r3
 8000816:	f200 80ca 	bhi.w	80009ae <__udivmoddi4+0x2d6>
 800081a:	4602      	mov	r2, r0
 800081c:	1b1b      	subs	r3, r3, r4
 800081e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000822:	e7a5      	b.n	8000770 <__udivmoddi4+0x98>
 8000824:	f1c1 0620 	rsb	r6, r1, #32
 8000828:	408b      	lsls	r3, r1
 800082a:	fa22 f706 	lsr.w	r7, r2, r6
 800082e:	431f      	orrs	r7, r3
 8000830:	fa0e f401 	lsl.w	r4, lr, r1
 8000834:	fa20 f306 	lsr.w	r3, r0, r6
 8000838:	fa2e fe06 	lsr.w	lr, lr, r6
 800083c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000840:	4323      	orrs	r3, r4
 8000842:	fa00 f801 	lsl.w	r8, r0, r1
 8000846:	fa1f fc87 	uxth.w	ip, r7
 800084a:	fbbe f0f9 	udiv	r0, lr, r9
 800084e:	0c1c      	lsrs	r4, r3, #16
 8000850:	fb09 ee10 	mls	lr, r9, r0, lr
 8000854:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000858:	fb00 fe0c 	mul.w	lr, r0, ip
 800085c:	45a6      	cmp	lr, r4
 800085e:	fa02 f201 	lsl.w	r2, r2, r1
 8000862:	d909      	bls.n	8000878 <__udivmoddi4+0x1a0>
 8000864:	193c      	adds	r4, r7, r4
 8000866:	f100 3aff 	add.w	sl, r0, #4294967295
 800086a:	f080 809c 	bcs.w	80009a6 <__udivmoddi4+0x2ce>
 800086e:	45a6      	cmp	lr, r4
 8000870:	f240 8099 	bls.w	80009a6 <__udivmoddi4+0x2ce>
 8000874:	3802      	subs	r0, #2
 8000876:	443c      	add	r4, r7
 8000878:	eba4 040e 	sub.w	r4, r4, lr
 800087c:	fa1f fe83 	uxth.w	lr, r3
 8000880:	fbb4 f3f9 	udiv	r3, r4, r9
 8000884:	fb09 4413 	mls	r4, r9, r3, r4
 8000888:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800088c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000890:	45a4      	cmp	ip, r4
 8000892:	d908      	bls.n	80008a6 <__udivmoddi4+0x1ce>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f103 3eff 	add.w	lr, r3, #4294967295
 800089a:	f080 8082 	bcs.w	80009a2 <__udivmoddi4+0x2ca>
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d97f      	bls.n	80009a2 <__udivmoddi4+0x2ca>
 80008a2:	3b02      	subs	r3, #2
 80008a4:	443c      	add	r4, r7
 80008a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008aa:	eba4 040c 	sub.w	r4, r4, ip
 80008ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80008b2:	4564      	cmp	r4, ip
 80008b4:	4673      	mov	r3, lr
 80008b6:	46e1      	mov	r9, ip
 80008b8:	d362      	bcc.n	8000980 <__udivmoddi4+0x2a8>
 80008ba:	d05f      	beq.n	800097c <__udivmoddi4+0x2a4>
 80008bc:	b15d      	cbz	r5, 80008d6 <__udivmoddi4+0x1fe>
 80008be:	ebb8 0203 	subs.w	r2, r8, r3
 80008c2:	eb64 0409 	sbc.w	r4, r4, r9
 80008c6:	fa04 f606 	lsl.w	r6, r4, r6
 80008ca:	fa22 f301 	lsr.w	r3, r2, r1
 80008ce:	431e      	orrs	r6, r3
 80008d0:	40cc      	lsrs	r4, r1
 80008d2:	e9c5 6400 	strd	r6, r4, [r5]
 80008d6:	2100      	movs	r1, #0
 80008d8:	e74f      	b.n	800077a <__udivmoddi4+0xa2>
 80008da:	fbb1 fcf2 	udiv	ip, r1, r2
 80008de:	0c01      	lsrs	r1, r0, #16
 80008e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008e4:	b280      	uxth	r0, r0
 80008e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008ea:	463b      	mov	r3, r7
 80008ec:	4638      	mov	r0, r7
 80008ee:	463c      	mov	r4, r7
 80008f0:	46b8      	mov	r8, r7
 80008f2:	46be      	mov	lr, r7
 80008f4:	2620      	movs	r6, #32
 80008f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008fa:	eba2 0208 	sub.w	r2, r2, r8
 80008fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000902:	e766      	b.n	80007d2 <__udivmoddi4+0xfa>
 8000904:	4601      	mov	r1, r0
 8000906:	e718      	b.n	800073a <__udivmoddi4+0x62>
 8000908:	4610      	mov	r0, r2
 800090a:	e72c      	b.n	8000766 <__udivmoddi4+0x8e>
 800090c:	f1c6 0220 	rsb	r2, r6, #32
 8000910:	fa2e f302 	lsr.w	r3, lr, r2
 8000914:	40b7      	lsls	r7, r6
 8000916:	40b1      	lsls	r1, r6
 8000918:	fa20 f202 	lsr.w	r2, r0, r2
 800091c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000920:	430a      	orrs	r2, r1
 8000922:	fbb3 f8fe 	udiv	r8, r3, lr
 8000926:	b2bc      	uxth	r4, r7
 8000928:	fb0e 3318 	mls	r3, lr, r8, r3
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb08 f904 	mul.w	r9, r8, r4
 8000936:	40b0      	lsls	r0, r6
 8000938:	4589      	cmp	r9, r1
 800093a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800093e:	b280      	uxth	r0, r0
 8000940:	d93e      	bls.n	80009c0 <__udivmoddi4+0x2e8>
 8000942:	1879      	adds	r1, r7, r1
 8000944:	f108 3cff 	add.w	ip, r8, #4294967295
 8000948:	d201      	bcs.n	800094e <__udivmoddi4+0x276>
 800094a:	4589      	cmp	r9, r1
 800094c:	d81f      	bhi.n	800098e <__udivmoddi4+0x2b6>
 800094e:	eba1 0109 	sub.w	r1, r1, r9
 8000952:	fbb1 f9fe 	udiv	r9, r1, lr
 8000956:	fb09 f804 	mul.w	r8, r9, r4
 800095a:	fb0e 1119 	mls	r1, lr, r9, r1
 800095e:	b292      	uxth	r2, r2
 8000960:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000964:	4542      	cmp	r2, r8
 8000966:	d229      	bcs.n	80009bc <__udivmoddi4+0x2e4>
 8000968:	18ba      	adds	r2, r7, r2
 800096a:	f109 31ff 	add.w	r1, r9, #4294967295
 800096e:	d2c4      	bcs.n	80008fa <__udivmoddi4+0x222>
 8000970:	4542      	cmp	r2, r8
 8000972:	d2c2      	bcs.n	80008fa <__udivmoddi4+0x222>
 8000974:	f1a9 0102 	sub.w	r1, r9, #2
 8000978:	443a      	add	r2, r7
 800097a:	e7be      	b.n	80008fa <__udivmoddi4+0x222>
 800097c:	45f0      	cmp	r8, lr
 800097e:	d29d      	bcs.n	80008bc <__udivmoddi4+0x1e4>
 8000980:	ebbe 0302 	subs.w	r3, lr, r2
 8000984:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000988:	3801      	subs	r0, #1
 800098a:	46e1      	mov	r9, ip
 800098c:	e796      	b.n	80008bc <__udivmoddi4+0x1e4>
 800098e:	eba7 0909 	sub.w	r9, r7, r9
 8000992:	4449      	add	r1, r9
 8000994:	f1a8 0c02 	sub.w	ip, r8, #2
 8000998:	fbb1 f9fe 	udiv	r9, r1, lr
 800099c:	fb09 f804 	mul.w	r8, r9, r4
 80009a0:	e7db      	b.n	800095a <__udivmoddi4+0x282>
 80009a2:	4673      	mov	r3, lr
 80009a4:	e77f      	b.n	80008a6 <__udivmoddi4+0x1ce>
 80009a6:	4650      	mov	r0, sl
 80009a8:	e766      	b.n	8000878 <__udivmoddi4+0x1a0>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e6fd      	b.n	80007aa <__udivmoddi4+0xd2>
 80009ae:	443b      	add	r3, r7
 80009b0:	3a02      	subs	r2, #2
 80009b2:	e733      	b.n	800081c <__udivmoddi4+0x144>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	443b      	add	r3, r7
 80009ba:	e71c      	b.n	80007f6 <__udivmoddi4+0x11e>
 80009bc:	4649      	mov	r1, r9
 80009be:	e79c      	b.n	80008fa <__udivmoddi4+0x222>
 80009c0:	eba1 0109 	sub.w	r1, r1, r9
 80009c4:	46c4      	mov	ip, r8
 80009c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ca:	fb09 f804 	mul.w	r8, r9, r4
 80009ce:	e7c4      	b.n	800095a <__udivmoddi4+0x282>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	0000      	movs	r0, r0
	...

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	ed2d 8b02 	vpush	{d8}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e2:	f002 fb9d 	bl	8003120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 fa77 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ea:	f000 fb37 	bl	800105c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ee:	f000 fadd 	bl	8000fac <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80009f2:	f000 fb09 	bl	8001008 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 80009f6:	2201      	movs	r2, #1
 80009f8:	49b9      	ldr	r1, [pc, #740]	@ (8000ce0 <main+0x308>)
 80009fa:	48ba      	ldr	r0, [pc, #744]	@ (8000ce4 <main+0x30c>)
 80009fc:	f004 f977 	bl	8004cee <HAL_UART_Receive_IT>
  u8g2_Setup_sh1106_i2c_128x64_noname_f(
 8000a00:	4bb9      	ldr	r3, [pc, #740]	@ (8000ce8 <main+0x310>)
 8000a02:	4aba      	ldr	r2, [pc, #744]	@ (8000cec <main+0x314>)
 8000a04:	49ba      	ldr	r1, [pc, #744]	@ (8000cf0 <main+0x318>)
 8000a06:	48bb      	ldr	r0, [pc, #748]	@ (8000cf4 <main+0x31c>)
 8000a08:	f000 fe00 	bl	800160c <u8g2_Setup_sh1106_i2c_128x64_noname_f>
      U8G2_R0,
      u8x8_byte_i2c_stm32,
      u8g2_gpio_and_delay_stm32
  );

  u8g2_InitDisplay(&u8g2);
 8000a0c:	48b9      	ldr	r0, [pc, #740]	@ (8000cf4 <main+0x31c>)
 8000a0e:	f002 fabf 	bl	8002f90 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8000a12:	2100      	movs	r1, #0
 8000a14:	48b7      	ldr	r0, [pc, #732]	@ (8000cf4 <main+0x31c>)
 8000a16:	f002 faca 	bl	8002fae <u8x8_SetPowerSave>
	    // ===================================================================
	    // 1. COMMAND HANDLING SECTION
	    //    This part runs on every loop to check if a command has arrived
	    //    from the Python GUI via the UART interrupt.
	    // ===================================================================
	    if (g_command_received_flag) {
 8000a1a:	4bb7      	ldr	r3, [pc, #732]	@ (8000cf8 <main+0x320>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d031      	beq.n	8000a88 <main+0xb0>
	        printf("DBG_MAIN: Flag detected.\r\n");
 8000a24:	48b5      	ldr	r0, [pc, #724]	@ (8000cfc <main+0x324>)
 8000a26:	f005 fae5 	bl	8005ff4 <puts>
	        fflush(stdout);
 8000a2a:	4bb5      	ldr	r3, [pc, #724]	@ (8000d00 <main+0x328>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f005 f999 	bl	8005d68 <fflush>
	        // Compare the received string with our expected command
	        if (strcmp((char*)rx_buffer, "CMD:PERFORM_TEST") == 0) {
 8000a36:	49b3      	ldr	r1, [pc, #716]	@ (8000d04 <main+0x32c>)
 8000a38:	48b3      	ldr	r0, [pc, #716]	@ (8000d08 <main+0x330>)
 8000a3a:	f7ff fbc9 	bl	80001d0 <strcmp>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10c      	bne.n	8000a5e <main+0x86>
	        	printf("DBG_MAIN: Command MATCHED!\r\n");
 8000a44:	48b1      	ldr	r0, [pc, #708]	@ (8000d0c <main+0x334>)
 8000a46:	f005 fad5 	bl	8005ff4 <puts>
	        	fflush(stdout);
 8000a4a:	4bad      	ldr	r3, [pc, #692]	@ (8000d00 <main+0x328>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f005 f989 	bl	8005d68 <fflush>
	            g_test_is_running = 1; // Set the state to "Test Active"
 8000a56:	4bae      	ldr	r3, [pc, #696]	@ (8000d10 <main+0x338>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e009      	b.n	8000a72 <main+0x9a>
	        }
	        else
	        {
	            printf("DBG_MAIN: Command MISMATCH! Received: [%s]\r\n", (char*)rx_buffer);
 8000a5e:	49aa      	ldr	r1, [pc, #680]	@ (8000d08 <main+0x330>)
 8000a60:	48ac      	ldr	r0, [pc, #688]	@ (8000d14 <main+0x33c>)
 8000a62:	f005 fa57 	bl	8005f14 <iprintf>
	            fflush(stdout);
 8000a66:	4ba6      	ldr	r3, [pc, #664]	@ (8000d00 <main+0x328>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f005 f97b 	bl	8005d68 <fflush>
	        // else if (strcmp((char*)rx_buffer, "CMD:STOP_TEST") == 0) {
	        //    g_test_is_running = 0; // Set the state to "Idle"
	        // }

	        // Reset for the next command
	        g_command_received_flag = 0;
 8000a72:	4ba1      	ldr	r3, [pc, #644]	@ (8000cf8 <main+0x320>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
	        rx_index = 0;
 8000a78:	4ba7      	ldr	r3, [pc, #668]	@ (8000d18 <main+0x340>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	        memset((void*)rx_buffer, 0, RX_BUFFER_SIZE);
 8000a7e:	2240      	movs	r2, #64	@ 0x40
 8000a80:	2100      	movs	r1, #0
 8000a82:	48a1      	ldr	r0, [pc, #644]	@ (8000d08 <main+0x330>)
 8000a84:	f005 fbcc 	bl	8006220 <memset>
	    // ===================================================================
	    // 2. STATE-BASED ACTION SECTION
	    //    The device behaves differently based on the g_test_is_running
	    //    state variable.
	    // ===================================================================
	    if (g_test_is_running)
 8000a88:	4ba1      	ldr	r3, [pc, #644]	@ (8000d10 <main+0x338>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 81e7 	beq.w	8000e62 <main+0x48a>
	    {
	        // --- STATE: TEST ACTIVE ---

	        // A. Simulate live data
	        parameters[0] = 3.20 + (HAL_GetTick() % 100) / 1000.0f; // X1 Time Min->Max
 8000a94:	f002 fbaa 	bl	80031ec <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	4ba0      	ldr	r3, [pc, #640]	@ (8000d1c <main+0x344>)
 8000a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa0:	095b      	lsrs	r3, r3, #5
 8000aa2:	2164      	movs	r1, #100	@ 0x64
 8000aa4:	fb01 f303 	mul.w	r3, r1, r3
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	ee07 3a90 	vmov	s15, r3
 8000aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab2:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8000d20 <main+0x348>
 8000ab6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000aba:	ee16 0a90 	vmov	r0, s13
 8000abe:	f7ff fd4b 	bl	8000558 <__aeabi_f2d>
 8000ac2:	a37b      	add	r3, pc, #492	@ (adr r3, 8000cb0 <main+0x2d8>)
 8000ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac8:	f7ff fbe8 	bl	800029c <__adddf3>
 8000acc:	4602      	mov	r2, r0
 8000ace:	460b      	mov	r3, r1
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f7ff fd98 	bl	8000608 <__aeabi_d2f>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a92      	ldr	r2, [pc, #584]	@ (8000d24 <main+0x34c>)
 8000adc:	6013      	str	r3, [r2, #0]
	        parameters[1] = 3.10 + (HAL_GetTick() % 100) / 1000.0f; // X1 Time Max->Min
 8000ade:	f002 fb85 	bl	80031ec <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8000d1c <main+0x344>)
 8000ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2164      	movs	r1, #100	@ 0x64
 8000aee:	fb01 f303 	mul.w	r3, r1, r3
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000afc:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8000d20 <main+0x348>
 8000b00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b04:	ee16 0a90 	vmov	r0, s13
 8000b08:	f7ff fd26 	bl	8000558 <__aeabi_f2d>
 8000b0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8000cb8 <main+0x2e0>)
 8000b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b12:	f7ff fbc3 	bl	800029c <__adddf3>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f7ff fd73 	bl	8000608 <__aeabi_d2f>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a7f      	ldr	r2, [pc, #508]	@ (8000d24 <main+0x34c>)
 8000b26:	6053      	str	r3, [r2, #4]
	        parameters[2] = 3.30 + (HAL_GetTick() % 100) / 1000.0f; // X2 Time Min->Max
 8000b28:	f002 fb60 	bl	80031ec <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d1c <main+0x344>)
 8000b30:	fba3 1302 	umull	r1, r3, r3, r2
 8000b34:	095b      	lsrs	r3, r3, #5
 8000b36:	2164      	movs	r1, #100	@ 0x64
 8000b38:	fb01 f303 	mul.w	r3, r1, r3
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	ee07 3a90 	vmov	s15, r3
 8000b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b46:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8000d20 <main+0x348>
 8000b4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b4e:	ee16 0a90 	vmov	r0, s13
 8000b52:	f7ff fd01 	bl	8000558 <__aeabi_f2d>
 8000b56:	a35a      	add	r3, pc, #360	@ (adr r3, 8000cc0 <main+0x2e8>)
 8000b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5c:	f7ff fb9e 	bl	800029c <__adddf3>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	4610      	mov	r0, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	f7ff fd4e 	bl	8000608 <__aeabi_d2f>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8000d24 <main+0x34c>)
 8000b70:	6093      	str	r3, [r2, #8]
	        parameters[3] = 3.40 + (HAL_GetTick() % 100) / 1000.0f; // X2 Time Max->Min
 8000b72:	f002 fb3b 	bl	80031ec <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	4b68      	ldr	r3, [pc, #416]	@ (8000d1c <main+0x344>)
 8000b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2164      	movs	r1, #100	@ 0x64
 8000b82:	fb01 f303 	mul.w	r3, r1, r3
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b90:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8000d20 <main+0x348>
 8000b94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b98:	ee16 0a90 	vmov	r0, s13
 8000b9c:	f7ff fcdc 	bl	8000558 <__aeabi_f2d>
 8000ba0:	a349      	add	r3, pc, #292	@ (adr r3, 8000cc8 <main+0x2f0>)
 8000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba6:	f7ff fb79 	bl	800029c <__adddf3>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4610      	mov	r0, r2
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fd29 	bl	8000608 <__aeabi_d2f>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8000d24 <main+0x34c>)
 8000bba:	60d3      	str	r3, [r2, #12]
	        parameters[4] = 0.13 + (HAL_GetTick() % 100) / 2000.0f; // X1 +15V I Min->Max
 8000bbc:	f002 fb16 	bl	80031ec <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <main+0x344>)
 8000bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc8:	095b      	lsrs	r3, r3, #5
 8000bca:	2164      	movs	r1, #100	@ 0x64
 8000bcc:	fb01 f303 	mul.w	r3, r1, r3
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	ee07 3a90 	vmov	s15, r3
 8000bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bda:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000d28 <main+0x350>
 8000bde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000be2:	ee16 0a90 	vmov	r0, s13
 8000be6:	f7ff fcb7 	bl	8000558 <__aeabi_f2d>
 8000bea:	a339      	add	r3, pc, #228	@ (adr r3, 8000cd0 <main+0x2f8>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fb54 	bl	800029c <__adddf3>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fd04 	bl	8000608 <__aeabi_d2f>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a48      	ldr	r2, [pc, #288]	@ (8000d24 <main+0x34c>)
 8000c04:	6113      	str	r3, [r2, #16]
	        parameters[5] = 0.10 + (HAL_GetTick() % 100) / 2000.0f; // X1 -15V I Min->Max
 8000c06:	f002 faf1 	bl	80031ec <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	4b43      	ldr	r3, [pc, #268]	@ (8000d1c <main+0x344>)
 8000c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2164      	movs	r1, #100	@ 0x64
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c24:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000d28 <main+0x350>
 8000c28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c2c:	ee16 0a90 	vmov	r0, s13
 8000c30:	f7ff fc92 	bl	8000558 <__aeabi_f2d>
 8000c34:	a328      	add	r3, pc, #160	@ (adr r3, 8000cd8 <main+0x300>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb2f 	bl	800029c <__adddf3>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	f7ff fcdf 	bl	8000608 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a35      	ldr	r2, [pc, #212]	@ (8000d24 <main+0x34c>)
 8000c4e:	6153      	str	r3, [r2, #20]
	        // Fill in the rest of the 24 parameters with real or simulated data
	        for (int i = 6; i < NUM_PARAMETERS; i++) {
 8000c50:	2306      	movs	r3, #6
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c54:	e023      	b.n	8000c9e <main+0x2c6>
	            parameters[i] = (float)i + ((HAL_GetTick() % 1000) / 1000.0f);
 8000c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000c60:	f002 fac4 	bl	80031ec <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <main+0x354>)
 8000c68:	fba3 1302 	umull	r1, r3, r3, r2
 8000c6c:	099b      	lsrs	r3, r3, #6
 8000c6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c72:	fb01 f303 	mul.w	r3, r1, r3
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c80:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000d20 <main+0x348>
 8000c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c88:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000c8c:	4a25      	ldr	r2, [pc, #148]	@ (8000d24 <main+0x34c>)
 8000c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	edc3 7a00 	vstr	s15, [r3]
	        for (int i = 6; i < NUM_PARAMETERS; i++) {
 8000c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca0:	2b17      	cmp	r3, #23
 8000ca2:	ddd8      	ble.n	8000c56 <main+0x27e>
	        }

	        // B. Send data to Python GUI as a CSV string
	        //    **IMPORTANT: Using the corrected "%.3f" specifier**
	        printf("DATA,");
 8000ca4:	4822      	ldr	r0, [pc, #136]	@ (8000d30 <main+0x358>)
 8000ca6:	f005 f935 	bl	8005f14 <iprintf>
	        for (int i = 0; i < NUM_PARAMETERS; i++) {
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cae:	e05b      	b.n	8000d68 <main+0x390>
 8000cb0:	9999999a 	.word	0x9999999a
 8000cb4:	40099999 	.word	0x40099999
 8000cb8:	cccccccd 	.word	0xcccccccd
 8000cbc:	4008cccc 	.word	0x4008cccc
 8000cc0:	66666666 	.word	0x66666666
 8000cc4:	400a6666 	.word	0x400a6666
 8000cc8:	33333333 	.word	0x33333333
 8000ccc:	400b3333 	.word	0x400b3333
 8000cd0:	0a3d70a4 	.word	0x0a3d70a4
 8000cd4:	3fc0a3d7 	.word	0x3fc0a3d7
 8000cd8:	9999999a 	.word	0x9999999a
 8000cdc:	3fb99999 	.word	0x3fb99999
 8000ce0:	20000120 	.word	0x20000120
 8000ce4:	200000d8 	.word	0x200000d8
 8000ce8:	08002935 	.word	0x08002935
 8000cec:	0800285d 	.word	0x0800285d
 8000cf0:	08007c74 	.word	0x08007c74
 8000cf4:	200001c8 	.word	0x200001c8
 8000cf8:	20000165 	.word	0x20000165
 8000cfc:	08007188 	.word	0x08007188
 8000d00:	20000018 	.word	0x20000018
 8000d04:	080071a4 	.word	0x080071a4
 8000d08:	20000124 	.word	0x20000124
 8000d0c:	080071b8 	.word	0x080071b8
 8000d10:	20000166 	.word	0x20000166
 8000d14:	080071d4 	.word	0x080071d4
 8000d18:	20000164 	.word	0x20000164
 8000d1c:	51eb851f 	.word	0x51eb851f
 8000d20:	447a0000 	.word	0x447a0000
 8000d24:	20000168 	.word	0x20000168
 8000d28:	44fa0000 	.word	0x44fa0000
 8000d2c:	10624dd3 	.word	0x10624dd3
 8000d30:	08007204 	.word	0x08007204
	        	printf("%ld", (int32_t)(parameters[i] * 1000.0f));
 8000d34:	4a5a      	ldr	r2, [pc, #360]	@ (8000ea0 <main+0x4c8>)
 8000d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	edd3 7a00 	vldr	s15, [r3]
 8000d40:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8000ea4 <main+0x4cc>
 8000d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4c:	ee17 1a90 	vmov	r1, s15
 8000d50:	4855      	ldr	r0, [pc, #340]	@ (8000ea8 <main+0x4d0>)
 8000d52:	f005 f8df 	bl	8005f14 <iprintf>
	            if (i < NUM_PARAMETERS - 1) {
 8000d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d58:	2b16      	cmp	r3, #22
 8000d5a:	dc02      	bgt.n	8000d62 <main+0x38a>
	                printf(",");
 8000d5c:	202c      	movs	r0, #44	@ 0x2c
 8000d5e:	f005 f8eb 	bl	8005f38 <putchar>
	        for (int i = 0; i < NUM_PARAMETERS; i++) {
 8000d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d64:	3301      	adds	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6a:	2b17      	cmp	r3, #23
 8000d6c:	dde2      	ble.n	8000d34 <main+0x35c>
	            }
	        }
	        printf("\n");
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f005 f8e2 	bl	8005f38 <putchar>
	        fflush(stdout);
 8000d74:	4b4d      	ldr	r3, [pc, #308]	@ (8000eac <main+0x4d4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fff4 	bl	8005d68 <fflush>

	        // C. Update the OLED display with the current status
	        u8g2_ClearBuffer(&u8g2);
 8000d80:	484b      	ldr	r0, [pc, #300]	@ (8000eb0 <main+0x4d8>)
 8000d82:	f000 fbb1 	bl	80014e8 <u8g2_ClearBuffer>
	        u8g2_SetFont(&u8g2, u8g2_font_ncenB10_tr);
 8000d86:	494b      	ldr	r1, [pc, #300]	@ (8000eb4 <main+0x4dc>)
 8000d88:	4849      	ldr	r0, [pc, #292]	@ (8000eb0 <main+0x4d8>)
 8000d8a:	f001 f9ef 	bl	800216c <u8g2_SetFont>
	        u8g2_DrawStr(&u8g2, 0, 18, "Test Running...");
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb8 <main+0x4e0>)
 8000d90:	2212      	movs	r2, #18
 8000d92:	2100      	movs	r1, #0
 8000d94:	4846      	ldr	r0, [pc, #280]	@ (8000eb0 <main+0x4d8>)
 8000d96:	f001 f947 	bl	8002028 <u8g2_DrawStr>
	        u8g2_SetFont(&u8g2, u8g2_font_profont12_tr);
 8000d9a:	4948      	ldr	r1, [pc, #288]	@ (8000ebc <main+0x4e4>)
 8000d9c:	4844      	ldr	r0, [pc, #272]	@ (8000eb0 <main+0x4d8>)
 8000d9e:	f001 f9e5 	bl	800216c <u8g2_SetFont>

	        char display_buf[32]; // Buffer for display lines

	        // --- NEW METHOD for "X1 Time" (replaces snprintf with %.2f) ---
	        int32_t integer_part = (int32_t)parameters[0];
 8000da2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea0 <main+0x4c8>)
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
	        // Use fabsf() to handle the fractional part of negative numbers correctly
	        int32_t fractional_part = (int32_t)(fabsf(parameters[0] * 100.0f)) % 100;
 8000db2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea0 <main+0x4c8>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000ec0 <main+0x4e8>
 8000dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc0:	eef0 7ae7 	vabs.f32	s15, s15
 8000dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc8:	ee17 3a90 	vmov	r3, s15
 8000dcc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ec4 <main+0x4ec>)
 8000dce:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd2:	1151      	asrs	r1, r2, #5
 8000dd4:	17da      	asrs	r2, r3, #31
 8000dd6:	1a8a      	subs	r2, r1, r2
 8000dd8:	2164      	movs	r1, #100	@ 0x64
 8000dda:	fb01 f202 	mul.w	r2, r1, r2
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	623b      	str	r3, [r7, #32]
	        // Use %ld for long int and %02ld to pad the fraction with a zero (e.g., 3.05)
	        snprintf(display_buf, sizeof(display_buf), "X1 Time: %ld.%02ld s", integer_part, fractional_part);
 8000de2:	4638      	mov	r0, r7
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	4a37      	ldr	r2, [pc, #220]	@ (8000ec8 <main+0x4f0>)
 8000dec:	2120      	movs	r1, #32
 8000dee:	f005 f909 	bl	8006004 <sniprintf>
	        u8g2_DrawStr(&u8g2, 0, 40, display_buf);
 8000df2:	463b      	mov	r3, r7
 8000df4:	2228      	movs	r2, #40	@ 0x28
 8000df6:	2100      	movs	r1, #0
 8000df8:	482d      	ldr	r0, [pc, #180]	@ (8000eb0 <main+0x4d8>)
 8000dfa:	f001 f915 	bl	8002028 <u8g2_DrawStr>

	        // --- NEW METHOD for "X1 +15V I" (replaces snprintf with %.2f) ---
	        integer_part = (int32_t)parameters[4];
 8000dfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <main+0x4c8>)
 8000e00:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e08:	ee17 3a90 	vmov	r3, s15
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
	        fractional_part = (int32_t)(fabsf(parameters[4] * 100.0f)) % 100;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <main+0x4c8>)
 8000e10:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e14:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000ec0 <main+0x4e8>
 8000e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e1c:	eef0 7ae7 	vabs.f32	s15, s15
 8000e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e24:	ee17 3a90 	vmov	r3, s15
 8000e28:	4a26      	ldr	r2, [pc, #152]	@ (8000ec4 <main+0x4ec>)
 8000e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2e:	1151      	asrs	r1, r2, #5
 8000e30:	17da      	asrs	r2, r3, #31
 8000e32:	1a8a      	subs	r2, r1, r2
 8000e34:	2164      	movs	r1, #100	@ 0x64
 8000e36:	fb01 f202 	mul.w	r2, r1, r2
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	623b      	str	r3, [r7, #32]
	        snprintf(display_buf, sizeof(display_buf), "X1 +15V I: %ld.%02ld A", integer_part, fractional_part);
 8000e3e:	4638      	mov	r0, r7
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e46:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <main+0x4f4>)
 8000e48:	2120      	movs	r1, #32
 8000e4a:	f005 f8db 	bl	8006004 <sniprintf>
	        u8g2_DrawStr(&u8g2, 0, 55, display_buf);
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2237      	movs	r2, #55	@ 0x37
 8000e52:	2100      	movs	r1, #0
 8000e54:	4816      	ldr	r0, [pc, #88]	@ (8000eb0 <main+0x4d8>)
 8000e56:	f001 f8e7 	bl	8002028 <u8g2_DrawStr>

	        u8g2_SendBuffer(&u8g2);
 8000e5a:	4815      	ldr	r0, [pc, #84]	@ (8000eb0 <main+0x4d8>)
 8000e5c:	f000 fbb7 	bl	80015ce <u8g2_SendBuffer>
 8000e60:	e019      	b.n	8000e96 <main+0x4be>
	    else
	    {
	        // --- STATE: IDLE ---

	        // A. Update the OLED display to show it's ready for a command
	        u8g2_ClearBuffer(&u8g2);
 8000e62:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <main+0x4d8>)
 8000e64:	f000 fb40 	bl	80014e8 <u8g2_ClearBuffer>
	        u8g2_SetFont(&u8g2, u8g2_font_ncenB10_tr);
 8000e68:	4912      	ldr	r1, [pc, #72]	@ (8000eb4 <main+0x4dc>)
 8000e6a:	4811      	ldr	r0, [pc, #68]	@ (8000eb0 <main+0x4d8>)
 8000e6c:	f001 f97e 	bl	800216c <u8g2_SetFont>
	        u8g2_DrawStr(&u8g2, 0, 35, "Ready...");
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <main+0x4f8>)
 8000e72:	2223      	movs	r2, #35	@ 0x23
 8000e74:	2100      	movs	r1, #0
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <main+0x4d8>)
 8000e78:	f001 f8d6 	bl	8002028 <u8g2_DrawStr>
	        u8g2_SetFont(&u8g2, u8g2_font_profont12_tr);
 8000e7c:	490f      	ldr	r1, [pc, #60]	@ (8000ebc <main+0x4e4>)
 8000e7e:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <main+0x4d8>)
 8000e80:	f001 f974 	bl	800216c <u8g2_SetFont>
	        u8g2_DrawStr(&u8g2, 0, 55, "Waiting for command");
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <main+0x4fc>)
 8000e86:	2237      	movs	r2, #55	@ 0x37
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <main+0x4d8>)
 8000e8c:	f001 f8cc 	bl	8002028 <u8g2_DrawStr>
	        u8g2_SendBuffer(&u8g2);
 8000e90:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <main+0x4d8>)
 8000e92:	f000 fb9c 	bl	80015ce <u8g2_SendBuffer>
	        // B. Note: We do NOT send any "DATA,..." here. We are idle.
	    }

	    // A single, short delay at the end of the main loop to prevent the CPU
	    // from running at 100% and to set the update rate of our application.
	    HAL_Delay(500); // Update rate of 2Hz (1000ms / 500ms)
 8000e96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e9a:	f002 f9b3 	bl	8003204 <HAL_Delay>
	    if (g_command_received_flag) {
 8000e9e:	e5bc      	b.n	8000a1a <main+0x42>
 8000ea0:	20000168 	.word	0x20000168
 8000ea4:	447a0000 	.word	0x447a0000
 8000ea8:	0800720c 	.word	0x0800720c
 8000eac:	20000018 	.word	0x20000018
 8000eb0:	200001c8 	.word	0x200001c8
 8000eb4:	0800765c 	.word	0x0800765c
 8000eb8:	08007210 	.word	0x08007210
 8000ebc:	08007288 	.word	0x08007288
 8000ec0:	42c80000 	.word	0x42c80000
 8000ec4:	51eb851f 	.word	0x51eb851f
 8000ec8:	08007220 	.word	0x08007220
 8000ecc:	08007238 	.word	0x08007238
 8000ed0:	08007250 	.word	0x08007250
 8000ed4:	0800725c 	.word	0x0800725c

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	@ 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	@ 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 f99a 	bl	8006220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	4a27      	ldr	r2, [pc, #156]	@ (8000fa4 <SystemClock_Config+0xcc>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <SystemClock_Config+0xcc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <SystemClock_Config+0xd0>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <SystemClock_Config+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f4c:	2354      	movs	r3, #84	@ 0x54
 8000f4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 f953 	bl	8004208 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f68:	f000 f908 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fbb4 	bl	80046f8 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f96:	f000 f8f1 	bl	800117c <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3750      	adds	r7, #80	@ 0x50
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000

08000fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fb2:	4a13      	ldr	r2, [pc, #76]	@ (8001000 <MX_I2C1_Init+0x54>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fb8:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <MX_I2C1_Init+0x58>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fea:	f002 fc6f 	bl	80038cc <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 f8c2 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000084 	.word	0x20000084
 8001000:	40005400 	.word	0x40005400
 8001004:	00061a80 	.word	0x00061a80

08001008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <MX_USART2_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001040:	f003 fd7a 	bl	8004b38 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f000 f897 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000d8 	.word	0x200000d8
 8001058:	40004400 	.word	0x40004400

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <MX_GPIO_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <MX_GPIO_Init+0x68>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_GPIO_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <MX_GPIO_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <MX_GPIO_Init+0x68>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <MX_GPIO_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_GPIO_Init+0x68>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <MX_GPIO_Init+0x68>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_GPIO_Init+0x68>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <HAL_UART_RxCpltCallback+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d130      	bne.n	800113c <HAL_UART_RxCpltCallback+0x74>
    {
        // Check if the received character is a line ending.
        if (uart_rx_byte == '\n' || uart_rx_byte == '\r')
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_UART_RxCpltCallback+0x80>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	d004      	beq.n	80010ee <HAL_UART_RxCpltCallback+0x26>
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <HAL_UART_RxCpltCallback+0x80>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b0d      	cmp	r3, #13
 80010ec:	d10f      	bne.n	800110e <HAL_UART_RxCpltCallback+0x46>
        {
            // If we have received characters, process the command.
            if (rx_index > 0)
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_UART_RxCpltCallback+0x84>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d01c      	beq.n	8001132 <HAL_UART_RxCpltCallback+0x6a>
            {
                // Null-terminate the string in our command buffer.
                rx_buffer[rx_index] = '\0';
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_UART_RxCpltCallback+0x84>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <HAL_UART_RxCpltCallback+0x88>)
 8001102:	2100      	movs	r1, #0
 8001104:	5499      	strb	r1, [r3, r2]

                // Set the flag for the main loop to process the command.
                g_command_received_flag = 1;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_UART_RxCpltCallback+0x8c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
            if (rx_index > 0)
 800110c:	e011      	b.n	8001132 <HAL_UART_RxCpltCallback+0x6a>
            }
        }
        else
        {
            // Add the received byte to our command buffer if there's space.
            if (rx_index < RX_BUFFER_SIZE - 1)
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_UART_RxCpltCallback+0x84>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b3e      	cmp	r3, #62	@ 0x3e
 8001116:	d80c      	bhi.n	8001132 <HAL_UART_RxCpltCallback+0x6a>
            {
                rx_buffer[rx_index++] = uart_rx_byte;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_UART_RxCpltCallback+0x84>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	b2d1      	uxtb	r1, r2
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <HAL_UART_RxCpltCallback+0x84>)
 8001124:	7011      	strb	r1, [r2, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_UART_RxCpltCallback+0x80>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2d9      	uxtb	r1, r3
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_UART_RxCpltCallback+0x88>)
 8001130:	5499      	strb	r1, [r3, r2]
            }
        }

        // CRITICAL: Re-arm the UART receive interrupt to listen for the NEXT single byte.
        // We ALWAYS listen into our 1-byte buffer.
        HAL_UART_Receive_IT(huart, &uart_rx_byte, 1);
 8001132:	2201      	movs	r2, #1
 8001134:	4904      	ldr	r1, [pc, #16]	@ (8001148 <HAL_UART_RxCpltCallback+0x80>)
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f003 fdd9 	bl	8004cee <HAL_UART_Receive_IT>
    }
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40004400 	.word	0x40004400
 8001148:	20000120 	.word	0x20000120
 800114c:	20000164 	.word	0x20000164
 8001150:	20000124 	.word	0x20000124
 8001154:	20000165 	.word	0x20000165

08001158 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  // Change HUART2 to the UART handle you are using
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001160:	1d39      	adds	r1, r7, #4
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	2201      	movs	r2, #1
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <__io_putchar+0x20>)
 800116a:	f003 fd35 	bl	8004bd8 <HAL_UART_Transmit>
  return ch;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000d8 	.word	0x200000d8

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <HAL_MspInit+0x4c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	4a08      	ldr	r2, [pc, #32]	@ (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011c6:	2007      	movs	r0, #7
 80011c8:	f002 f910 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_I2C_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12c      	bne.n	8001254 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_I2C_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <HAL_I2C_MspInit+0x88>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_I2C_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001216:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121c:	2312      	movs	r3, #18
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001228:	2304      	movs	r3, #4
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	@ (8001264 <HAL_I2C_MspInit+0x8c>)
 8001234:	f002 f9ae 	bl	8003594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_I2C_MspInit+0x88>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_I2C_MspInit+0x88>)
 8001242:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001246:	6413      	str	r3, [r2, #64]	@ 0x40
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_I2C_MspInit+0x88>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	@ 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40005400 	.word	0x40005400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020400 	.word	0x40020400

08001268 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1d      	ldr	r2, [pc, #116]	@ (80012fc <HAL_UART_MspInit+0x94>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d133      	bne.n	80012f2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <HAL_UART_MspInit+0x98>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <HAL_UART_MspInit+0x98>)
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_UART_MspInit+0x98>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_UART_MspInit+0x98>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <HAL_UART_MspInit+0x98>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_UART_MspInit+0x98>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c2:	230c      	movs	r3, #12
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d2:	2307      	movs	r3, #7
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <HAL_UART_MspInit+0x9c>)
 80012de:	f002 f959 	bl	8003594 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2026      	movs	r0, #38	@ 0x26
 80012e8:	f002 f88b 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ec:	2026      	movs	r0, #38	@ 0x26
 80012ee:	f002 f8a4 	bl	800343a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <NMI_Handler+0x4>

08001310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <MemManage_Handler+0x4>

08001320 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <UsageFault_Handler+0x4>

08001330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135e:	f001 ff31 	bl	80031c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <USART2_IRQHandler+0x10>)
 800136e:	f003 fce3 	bl	8004d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000d8 	.word	0x200000d8

0800137c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e00a      	b.n	80013a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800138e:	f3af 8000 	nop.w
 8001392:	4601      	mov	r1, r0
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	b2ca      	uxtb	r2, r1
 800139c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbf0      	blt.n	800138e <_read+0x12>
  }

  return len;
 80013ac:	687b      	ldr	r3, [r7, #4]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e009      	b.n	80013dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fec1 	bl	8001158 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbf1      	blt.n	80013c8 <_write+0x12>
  }
  return len;
 80013e4:	687b      	ldr	r3, [r7, #4]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_close>:

int _close(int file)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001416:	605a      	str	r2, [r3, #4]
  return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <_isatty>:

int _isatty(int file)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f004 ff18 	bl	80062bc <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20020000 	.word	0x20020000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	2000025c 	.word	0x2000025c
 80014c0:	200007d8 	.word	0x200007d8

080014c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	7c1b      	ldrb	r3, [r3, #16]
 80014f6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fe82 	bl	8006220 <memset>
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
 8001530:	4613      	mov	r3, r2
 8001532:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	7c1b      	ldrb	r3, [r3, #16]
 800153a:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001544:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	b29b      	uxth	r3, r3
 800154a:	89ba      	ldrh	r2, [r7, #12]
 800154c:	fb12 f303 	smulbb	r3, r2, r3
 8001550:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001552:	89bb      	ldrh	r3, [r7, #12]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001558:	89bb      	ldrh	r3, [r7, #12]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001560:	7bf9      	ldrb	r1, [r7, #15]
 8001562:	78ba      	ldrb	r2, [r7, #2]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	460b      	mov	r3, r1
 800156a:	2100      	movs	r1, #0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 fcde 	bl	8002f2e <u8x8_DrawTile>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800158c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001594:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	7c5b      	ldrb	r3, [r3, #17]
 800159c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800159e:	7bba      	ldrb	r2, [r7, #14]
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	4619      	mov	r1, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ffbd 	bl	8001524 <u8g2_send_tile_row>
    src_row++;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	3301      	adds	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d203      	bcs.n	80015c6 <u8g2_send_buffer+0x4c>
 80015be:	7bba      	ldrb	r2, [r7, #14]
 80015c0:	7b3b      	ldrb	r3, [r7, #12]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d3eb      	bcc.n	800159e <u8g2_send_buffer+0x24>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffcf 	bl	800157a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f001 fcf7 	bl	8002fd0 <u8x8_RefreshDisplay>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2208      	movs	r2, #8
 80015f8:	701a      	strb	r2, [r3, #0]
  return buf;
 80015fa:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000260 	.word	0x20000260

0800160c <u8g2_Setup_sh1106_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 f */
void u8g2_Setup_sh1106_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x44>)
 8001622:	490c      	ldr	r1, [pc, #48]	@ (8001654 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x48>)
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f001 fd33 	bl	8003090 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800162a:	f107 0313 	add.w	r3, r7, #19
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffdc 	bl	80015ec <u8g2_m_16_8_f>
 8001634:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001636:	7cfa      	ldrb	r2, [r7, #19]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x4c>)
 800163e:	6979      	ldr	r1, [r7, #20]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 ffc4 	bl	80025ce <u8g2_SetupBuffer>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	08002bcd 	.word	0x08002bcd
 8001654:	08002e29 	.word	0x08002e29
 8001658:	08002451 	.word	0x08002451

0800165c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	81fb      	strh	r3, [r7, #14]
    font++;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	4413      	add	r3, r2
 80016b0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80016b2:	89fb      	ldrh	r3, [r7, #14]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f7ff ffc5 	bl	800165c <u8g2_font_get_byte>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80016da:	2101      	movs	r1, #1
 80016dc:	6838      	ldr	r0, [r7, #0]
 80016de:	f7ff ffbd 	bl	800165c <u8g2_font_get_byte>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80016ea:	2102      	movs	r1, #2
 80016ec:	6838      	ldr	r0, [r7, #0]
 80016ee:	f7ff ffb5 	bl	800165c <u8g2_font_get_byte>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80016fa:	2103      	movs	r1, #3
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f7ff ffad 	bl	800165c <u8g2_font_get_byte>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800170a:	2104      	movs	r1, #4
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f7ff ffa5 	bl	800165c <u8g2_font_get_byte>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800171a:	2105      	movs	r1, #5
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f7ff ff9d 	bl	800165c <u8g2_font_get_byte>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800172a:	2106      	movs	r1, #6
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	f7ff ff95 	bl	800165c <u8g2_font_get_byte>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800173a:	2107      	movs	r1, #7
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f7ff ff8d 	bl	800165c <u8g2_font_get_byte>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800174a:	2108      	movs	r1, #8
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	f7ff ff85 	bl	800165c <u8g2_font_get_byte>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800175a:	2109      	movs	r1, #9
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f7ff ff7d 	bl	800165c <u8g2_font_get_byte>
 8001762:	4603      	mov	r3, r0
 8001764:	b25a      	sxtb	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800176a:	210a      	movs	r1, #10
 800176c:	6838      	ldr	r0, [r7, #0]
 800176e:	f7ff ff75 	bl	800165c <u8g2_font_get_byte>
 8001772:	4603      	mov	r3, r0
 8001774:	b25a      	sxtb	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800177a:	210b      	movs	r1, #11
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f7ff ff6d 	bl	800165c <u8g2_font_get_byte>
 8001782:	4603      	mov	r3, r0
 8001784:	b25a      	sxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800178a:	210c      	movs	r1, #12
 800178c:	6838      	ldr	r0, [r7, #0]
 800178e:	f7ff ff65 	bl	800165c <u8g2_font_get_byte>
 8001792:	4603      	mov	r3, r0
 8001794:	b25a      	sxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800179a:	210d      	movs	r1, #13
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f7ff ff5d 	bl	800165c <u8g2_font_get_byte>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b25a      	sxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80017aa:	210e      	movs	r1, #14
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f7ff ff55 	bl	800165c <u8g2_font_get_byte>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80017ba:	210f      	movs	r1, #15
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f7ff ff4d 	bl	800165c <u8g2_font_get_byte>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80017ca:	2110      	movs	r1, #16
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f7ff ff45 	bl	800165c <u8g2_font_get_byte>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b25a      	sxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80017da:	2111      	movs	r1, #17
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	f7ff ff4f 	bl	8001680 <u8g2_font_get_word>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80017ea:	2113      	movs	r1, #19
 80017ec:	6838      	ldr	r0, [r7, #0]
 80017ee:	f7ff ff47 	bl	8001680 <u8g2_font_get_word>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80017fa:	2115      	movs	r1, #21
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	f7ff ff3f 	bl	8001680 <u8g2_font_get_word>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	82da      	strh	r2, [r3, #22]
#endif
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7b1b      	ldrb	r3, [r3, #12]
 8001822:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	7b7b      	ldrb	r3, [r7, #13]
 8001830:	fa42 f303 	asr.w	r3, r2, r3
 8001834:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800183a:	7bba      	ldrb	r2, [r7, #14]
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	4413      	add	r3, r2
 8001840:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001842:	7bbb      	ldrb	r3, [r7, #14]
 8001844:	2b07      	cmp	r3, #7
 8001846:	d91a      	bls.n	800187e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001848:	2308      	movs	r3, #8
 800184a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800184c:	7b3a      	ldrb	r2, [r7, #12]
 800184e:	7b7b      	ldrb	r3, [r7, #13]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	7b3b      	ldrb	r3, [r7, #12]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	b25a      	sxtb	r2, r3
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4313      	orrs	r3, r2
 8001874:	b25b      	sxtb	r3, r3
 8001876:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	3b08      	subs	r3, #8
 800187c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	4013      	ands	r3, r2
 8001892:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7bba      	ldrb	r2, [r7, #14]
 8001898:	731a      	strb	r2, [r3, #12]
  return val;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffaa 	bl	8001812 <u8g2_font_decode_get_unsigned_bits>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80018cc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	73fb      	strb	r3, [r7, #15]
  return v;
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80018ee:	b490      	push	{r4, r7}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4604      	mov	r4, r0
 80018f6:	4608      	mov	r0, r1
 80018f8:	4611      	mov	r1, r2
 80018fa:	461a      	mov	r2, r3
 80018fc:	4623      	mov	r3, r4
 80018fe:	80fb      	strh	r3, [r7, #6]
 8001900:	4603      	mov	r3, r0
 8001902:	717b      	strb	r3, [r7, #5]
 8001904:	460b      	mov	r3, r1
 8001906:	713b      	strb	r3, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d014      	beq.n	800193c <u8g2_add_vector_y+0x4e>
 8001912:	2b02      	cmp	r3, #2
 8001914:	dc19      	bgt.n	800194a <u8g2_add_vector_y+0x5c>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <u8g2_add_vector_y+0x32>
 800191a:	2b01      	cmp	r3, #1
 800191c:	d007      	beq.n	800192e <u8g2_add_vector_y+0x40>
 800191e:	e014      	b.n	800194a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001920:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4413      	add	r3, r2
 800192a:	80fb      	strh	r3, [r7, #6]
      break;
 800192c:	e014      	b.n	8001958 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800192e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001932:	b29a      	uxth	r2, r3
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4413      	add	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
      break;
 800193a:	e00d      	b.n	8001958 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800193c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001940:	b29b      	uxth	r3, r3
 8001942:	88fa      	ldrh	r2, [r7, #6]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	80fb      	strh	r3, [r7, #6]
      break;
 8001948:	e006      	b.n	8001958 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800194a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800194e:	b29b      	uxth	r3, r3
 8001950:	88fa      	ldrh	r2, [r7, #6]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	80fb      	strh	r3, [r7, #6]
      break;      
 8001956:	bf00      	nop
  }
  return dy;
 8001958:	88fb      	ldrh	r3, [r7, #6]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bc90      	pop	{r4, r7}
 8001962:	4770      	bx	lr

08001964 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001964:	b490      	push	{r4, r7}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4623      	mov	r3, r4
 8001974:	80fb      	strh	r3, [r7, #6]
 8001976:	4603      	mov	r3, r0
 8001978:	717b      	strb	r3, [r7, #5]
 800197a:	460b      	mov	r3, r1
 800197c:	713b      	strb	r3, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d014      	beq.n	80019b2 <u8g2_add_vector_x+0x4e>
 8001988:	2b02      	cmp	r3, #2
 800198a:	dc19      	bgt.n	80019c0 <u8g2_add_vector_x+0x5c>
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <u8g2_add_vector_x+0x32>
 8001990:	2b01      	cmp	r3, #1
 8001992:	d007      	beq.n	80019a4 <u8g2_add_vector_x+0x40>
 8001994:	e014      	b.n	80019c0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001996:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800199a:	b29a      	uxth	r2, r3
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4413      	add	r3, r2
 80019a0:	80fb      	strh	r3, [r7, #6]
      break;
 80019a2:	e014      	b.n	80019ce <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80019a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	80fb      	strh	r3, [r7, #6]
      break;
 80019b0:	e00d      	b.n	80019ce <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80019b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	80fb      	strh	r3, [r7, #6]
      break;
 80019be:	e006      	b.n	80019ce <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80019c0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4413      	add	r3, r2
 80019ca:	80fb      	strh	r3, [r7, #6]
      break;      
 80019cc:	bf00      	nop
  }
  return dx;
 80019ce:	88fb      	ldrh	r3, [r7, #6]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc90      	pop	{r4, r7}
 80019d8:	4770      	bx	lr

080019da <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b088      	sub	sp, #32
 80019de:	af02      	add	r7, sp, #8
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70fb      	strb	r3, [r7, #3]
 80019e6:	4613      	mov	r3, r2
 80019e8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3360      	adds	r3, #96	@ 0x60
 80019ee:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80019fa:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001a02:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a0a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	7d7b      	ldrb	r3, [r7, #21]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001a18:	7dfa      	ldrb	r2, [r7, #23]
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d201      	bcs.n	8001a24 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	889b      	ldrh	r3, [r3, #4]
 8001a28:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	88db      	ldrh	r3, [r3, #6]
 8001a2e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001a30:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a34:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	7c1b      	ldrb	r3, [r3, #16]
 8001a3c:	89b8      	ldrh	r0, [r7, #12]
 8001a3e:	f7ff ff91 	bl	8001964 <u8g2_add_vector_x>
 8001a42:	4603      	mov	r3, r0
 8001a44:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001a46:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a4a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	7c1b      	ldrb	r3, [r3, #16]
 8001a52:	8978      	ldrh	r0, [r7, #10]
 8001a54:	f7ff ff4b 	bl	80018ee <u8g2_add_vector_y>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001a5c:	78bb      	ldrb	r3, [r7, #2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d010      	beq.n	8001a84 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	7b9a      	ldrb	r2, [r3, #14]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001a6c:	7dbb      	ldrb	r3, [r7, #22]
 8001a6e:	b298      	uxth	r0, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	7c1b      	ldrb	r3, [r3, #16]
 8001a74:	897a      	ldrh	r2, [r7, #10]
 8001a76:	89b9      	ldrh	r1, [r7, #12]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fbfe 	bl	800227e <u8g2_DrawHVLine>
 8001a82:	e013      	b.n	8001aac <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	7b5b      	ldrb	r3, [r3, #13]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10f      	bne.n	8001aac <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	7bda      	ldrb	r2, [r3, #15]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001a96:	7dbb      	ldrb	r3, [r7, #22]
 8001a98:	b298      	uxth	r0, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	7c1b      	ldrb	r3, [r3, #16]
 8001a9e:	897a      	ldrh	r2, [r7, #10]
 8001aa0:	89b9      	ldrh	r1, [r7, #12]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fbe9 	bl	800227e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001aac:	7dfa      	ldrb	r2, [r7, #23]
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d309      	bcc.n	8001ac8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001ab4:	7dfa      	ldrb	r2, [r7, #23]
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	757b      	strb	r3, [r7, #21]
    ly++;
 8001ac0:	7d3b      	ldrb	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001ac6:	e79d      	b.n	8001a04 <u8g2_font_decode_len+0x2a>
      break;
 8001ac8:	bf00      	nop
  }
  lx += cnt;
 8001aca:	7d7a      	ldrb	r2, [r7, #21]
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	4413      	add	r3, r2
 8001ad0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001ad2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001ada:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	725a      	strb	r2, [r3, #9]
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3360      	adds	r3, #96	@ 0x60
 8001af8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fe7f 	bl	8001812 <u8g2_font_decode_get_unsigned_bits>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001b22:	4619      	mov	r1, r3
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff fe74 	bl	8001812 <u8g2_font_decode_get_unsigned_bits>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	7b9b      	ldrb	r3, [r3, #14]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	73da      	strb	r2, [r3, #15]
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3360      	adds	r3, #96	@ 0x60
 8001b66:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffbd 	bl	8001aea <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8001b76:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6978      	ldr	r0, [r7, #20]
 8001b82:	f7ff fe91 	bl	80018a8 <u8g2_font_decode_get_signed_bits>
 8001b86:	4603      	mov	r3, r0
 8001b88:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001b90:	4619      	mov	r1, r3
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff fe88 	bl	80018a8 <u8g2_font_decode_get_signed_bits>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6978      	ldr	r0, [r7, #20]
 8001ba6:	f7ff fe7f 	bl	80018a8 <u8g2_font_decode_get_signed_bits>
 8001baa:	4603      	mov	r3, r0
 8001bac:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f340 80d7 	ble.w	8001d68 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	8898      	ldrh	r0, [r3, #4]
 8001bbe:	7cfa      	ldrb	r2, [r7, #19]
 8001bc0:	7c7b      	ldrb	r3, [r7, #17]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	7c1b      	ldrb	r3, [r3, #16]
 8001bd0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001bd4:	f7ff fec6 	bl	8001964 <u8g2_add_vector_x>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	88d8      	ldrh	r0, [r3, #6]
 8001be4:	7cfa      	ldrb	r2, [r7, #19]
 8001be6:	7c7b      	ldrb	r3, [r7, #17]
 8001be8:	4413      	add	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	425b      	negs	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	7c1b      	ldrb	r3, [r3, #16]
 8001bf6:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001bfa:	f7ff fe78 	bl	80018ee <u8g2_add_vector_y>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	889b      	ldrh	r3, [r3, #4]
 8001c0a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	88db      	ldrh	r3, [r3, #6]
 8001c10:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001c12:	8bfb      	ldrh	r3, [r7, #30]
 8001c14:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001c16:	8b7b      	ldrh	r3, [r7, #26]
 8001c18:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	7c1b      	ldrb	r3, [r3, #16]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d85a      	bhi.n	8001cd8 <u8g2_font_decode_glyph+0x180>
 8001c22:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <u8g2_font_decode_glyph+0xd0>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001c55 	.word	0x08001c55
 8001c30:	08001c7d 	.word	0x08001c7d
 8001c34:	08001cb1 	.word	0x08001cb1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	8bbb      	ldrh	r3, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001c46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	8b3b      	ldrh	r3, [r7, #24]
 8001c4e:	4413      	add	r3, r2
 8001c50:	833b      	strh	r3, [r7, #24]
	    break;
 8001c52:	e041      	b.n	8001cd8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001c54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	8bfa      	ldrh	r2, [r7, #30]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c60:	8bfb      	ldrh	r3, [r7, #30]
 8001c62:	3301      	adds	r3, #1
 8001c64:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001c66:	8bbb      	ldrh	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	8b3b      	ldrh	r3, [r7, #24]
 8001c76:	4413      	add	r3, r2
 8001c78:	833b      	strh	r3, [r7, #24]
	    break;
 8001c7a:	e02d      	b.n	8001cd8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	8bfa      	ldrh	r2, [r7, #30]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c8a:	8bfb      	ldrh	r3, [r7, #30]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001c90:	8bbb      	ldrh	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001c96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	8b7a      	ldrh	r2, [r7, #26]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ca2:	8b7b      	ldrh	r3, [r7, #26]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001ca8:	8b3b      	ldrh	r3, [r7, #24]
 8001caa:	3301      	adds	r3, #1
 8001cac:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001cae:	e013      	b.n	8001cd8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8b7a      	ldrh	r2, [r7, #26]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cca:	8b7b      	ldrh	r3, [r7, #26]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001cd0:	8b3b      	ldrh	r3, [r7, #24]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001cd6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001cd8:	8bb8      	ldrh	r0, [r7, #28]
 8001cda:	8b7a      	ldrh	r2, [r7, #26]
 8001cdc:	8bf9      	ldrh	r1, [r7, #30]
 8001cde:	8b3b      	ldrh	r3, [r7, #24]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fb88 	bl	80023fa <u8g2_IsIntersection>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001cf0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001cf4:	e03a      	b.n	8001d6c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff fd81 	bl	8001812 <u8g2_font_decode_get_unsigned_bits>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6978      	ldr	r0, [r7, #20]
 8001d1e:	f7ff fd78 	bl	8001812 <u8g2_font_decode_get_unsigned_bits>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fe54 	bl	80019da <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001d32:	7bbb      	ldrb	r3, [r7, #14]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4619      	mov	r1, r3
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fe4e 	bl	80019da <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001d3e:	2101      	movs	r1, #1
 8001d40:	6978      	ldr	r0, [r7, #20]
 8001d42:	f7ff fd66 	bl	8001812 <u8g2_font_decode_get_unsigned_bits>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ec      	bne.n	8001d26 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d52:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	dd00      	ble.n	8001d5c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d5a:	e7d2      	b.n	8001d02 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001d5c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	7b9a      	ldrb	r2, [r3, #14]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001d68:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3317      	adds	r3, #23
 8001d8a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	2bff      	cmp	r3, #255	@ 0xff
 8001d90:	d82a      	bhi.n	8001de8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	2b60      	cmp	r3, #96	@ 0x60
 8001d96:	d907      	bls.n	8001da8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001d9e:	461a      	mov	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4413      	add	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	2b40      	cmp	r3, #64	@ 0x40
 8001dac:	d906      	bls.n	8001dbc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001db4:	461a      	mov	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04e      	beq.n	8001e64 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d102      	bne.n	8001dd8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	e049      	b.n	8001e6c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4413      	add	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001de6:	e7e9      	b.n	8001dbc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001dee:	461a      	mov	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4413      	add	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	6938      	ldr	r0, [r7, #16]
 8001dfe:	f7ff fc3f 	bl	8001680 <u8g2_font_get_word>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	4413      	add	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	6938      	ldr	r0, [r7, #16]
 8001e10:	f7ff fc36 	bl	8001680 <u8g2_font_get_word>
 8001e14:	4603      	mov	r3, r0
 8001e16:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001e1e:	89fa      	ldrh	r2, [r7, #14]
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3e9      	bcc.n	8001dfa <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001e46:	89fa      	ldrh	r2, [r7, #14]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d102      	bne.n	8001e54 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3303      	adds	r3, #3
 8001e52:	e00b      	b.n	8001e6c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3302      	adds	r3, #2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4413      	add	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001e62:	e7e0      	b.n	8001e26 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <u8g2_font_get_glyph_data+0xf6>
	break;
 8001e68:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	817b      	strh	r3, [r7, #10]
 8001e86:	460b      	mov	r3, r1
 8001e88:	813b      	strh	r3, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	897a      	ldrh	r2, [r7, #10]
 8001e96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	893a      	ldrh	r2, [r7, #8]
 8001e9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff ff64 	bl	8001d74 <u8g2_font_get_glyph_data>
 8001eac:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001eb4:	6939      	ldr	r1, [r7, #16]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff fe4e 	bl	8001b58 <u8g2_font_decode_glyph>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001ec0:	8afb      	ldrh	r3, [r7, #22]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	813b      	strh	r3, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d833      	bhi.n	8001f58 <u8g2_DrawGlyph+0x8c>
 8001ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef8 <u8g2_DrawGlyph+0x2c>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f09 	.word	0x08001f09
 8001efc:	08001f1d 	.word	0x08001f1d
 8001f00:	08001f31 	.word	0x08001f31
 8001f04:	08001f45 	.word	0x08001f45
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	4798      	blx	r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	893b      	ldrh	r3, [r7, #8]
 8001f16:	4413      	add	r3, r2
 8001f18:	813b      	strh	r3, [r7, #8]
      break;
 8001f1a:	e01d      	b.n	8001f58 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	897b      	ldrh	r3, [r7, #10]
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	817b      	strh	r3, [r7, #10]
      break;
 8001f2e:	e013      	b.n	8001f58 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	4798      	blx	r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	893b      	ldrh	r3, [r7, #8]
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	813b      	strh	r3, [r7, #8]
      break;
 8001f42:	e009      	b.n	8001f58 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	4798      	blx	r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	897b      	ldrh	r3, [r7, #10]
 8001f52:	4413      	add	r3, r2
 8001f54:	817b      	strh	r3, [r7, #10]
      break;
 8001f56:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	893a      	ldrh	r2, [r7, #8]
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f7ff ff88 	bl	8001e74 <u8g2_font_draw_glyph>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop

08001f70 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	817b      	strh	r3, [r7, #10]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fcf4 	bl	8002970 <u8x8_utf8_init>
  sum = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	7812      	ldrb	r2, [r2, #0]
 8001f94:	4611      	mov	r1, r2
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	4798      	blx	r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001f9e:	8abb      	ldrh	r3, [r7, #20]
 8001fa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d038      	beq.n	800201a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3301      	adds	r3, #1
 8001fac:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001fae:	8abb      	ldrh	r3, [r7, #20]
 8001fb0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d0e9      	beq.n	8001f8c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001fb8:	8abb      	ldrh	r3, [r7, #20]
 8001fba:	893a      	ldrh	r2, [r7, #8]
 8001fbc:	8979      	ldrh	r1, [r7, #10]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ff84 	bl	8001ecc <u8g2_DrawGlyph>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d81e      	bhi.n	8002010 <u8g2_draw_string+0xa0>
 8001fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd8 <u8g2_draw_string+0x68>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001ff3 	.word	0x08001ff3
 8001fe0:	08001ffd 	.word	0x08001ffd
 8001fe4:	08002007 	.word	0x08002007
      {
	case 0:
	  x += delta;
 8001fe8:	897a      	ldrh	r2, [r7, #10]
 8001fea:	8a7b      	ldrh	r3, [r7, #18]
 8001fec:	4413      	add	r3, r2
 8001fee:	817b      	strh	r3, [r7, #10]
	  break;
 8001ff0:	e00e      	b.n	8002010 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ff2:	893a      	ldrh	r2, [r7, #8]
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	813b      	strh	r3, [r7, #8]
	  break;
 8001ffa:	e009      	b.n	8002010 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001ffc:	897a      	ldrh	r2, [r7, #10]
 8001ffe:	8a7b      	ldrh	r3, [r7, #18]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	817b      	strh	r3, [r7, #10]
	  break;
 8002004:	e004      	b.n	8002010 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002006:	893a      	ldrh	r2, [r7, #8]
 8002008:	8a7b      	ldrh	r3, [r7, #18]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	813b      	strh	r3, [r7, #8]
	  break;
 800200e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002010:	8afa      	ldrh	r2, [r7, #22]
 8002012:	8a7b      	ldrh	r3, [r7, #18]
 8002014:	4413      	add	r3, r2
 8002016:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002018:	e7b8      	b.n	8001f8c <u8g2_draw_string+0x1c>
      break;
 800201a:	bf00      	nop
    }
  }
  return sum;
 800201c:	8afb      	ldrh	r3, [r7, #22]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop

08002028 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	817b      	strh	r3, [r7, #10]
 8002036:	4613      	mov	r3, r2
 8002038:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a06      	ldr	r2, [pc, #24]	@ (8002058 <u8g2_DrawStr+0x30>)
 800203e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff ff92 	bl	8001f70 <u8g2_draw_string>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	0800298d 	.word	0x0800298d

0800205c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05d      	beq.n	8002128 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800208a:	2b00      	cmp	r3, #0
 800208c:	d04d      	beq.n	800212a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002094:	2b01      	cmp	r3, #1
 8002096:	d11c      	bne.n	80020d2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 80020a4:	429a      	cmp	r2, r3
 80020a6:	da05      	bge.n	80020b4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dd32      	ble.n	800212a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80020d0:	e02b      	b.n	800212a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 80020d8:	461a      	mov	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80020e0:	4619      	mov	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80020e8:	440b      	add	r3, r1
 80020ea:	429a      	cmp	r2, r3
 80020ec:	da0d      	bge.n	800210a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4413      	add	r3, r2
 8002100:	b2db      	uxtb	r3, r3
 8002102:	b25a      	sxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002116:	429a      	cmp	r2, r3
 8002118:	dd07      	ble.n	800212a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002126:	e000      	b.n	800212a <u8g2_UpdateRefHeight+0xce>
    return;
 8002128:	bf00      	nop
  }  
}
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <u8g2_SetFontPosBaseline+0x1c>)
 8002158:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	08002135 	.word	0x08002135

0800216c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d00b      	beq.n	8002198 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3374      	adds	r3, #116	@ 0x74
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fa97 	bl	80016c0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff62 	bl	800205c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	460b      	mov	r3, r1
 80021b0:	80fb      	strh	r3, [r7, #6]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80021bc:	8afb      	ldrh	r3, [r7, #22]
 80021be:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	881a      	ldrh	r2, [r3, #0]
 80021c4:	8abb      	ldrh	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80021ca:	8afa      	ldrh	r2, [r7, #22]
 80021cc:	8abb      	ldrh	r3, [r7, #20]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d90b      	bls.n	80021ea <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80021d2:	8afa      	ldrh	r2, [r7, #22]
 80021d4:	88bb      	ldrh	r3, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d205      	bcs.n	80021e6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80021da:	88bb      	ldrh	r3, [r7, #4]
 80021dc:	82bb      	strh	r3, [r7, #20]
      b--;
 80021de:	8abb      	ldrh	r3, [r7, #20]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	82bb      	strh	r3, [r7, #20]
 80021e4:	e001      	b.n	80021ea <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80021ea:	8afa      	ldrh	r2, [r7, #22]
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d301      	bcc.n	80021f6 <u8g2_clip_intersection2+0x56>
    return 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e01c      	b.n	8002230 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80021f6:	8aba      	ldrh	r2, [r7, #20]
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d801      	bhi.n	8002202 <u8g2_clip_intersection2+0x62>
    return 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	e016      	b.n	8002230 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002202:	8afa      	ldrh	r2, [r7, #22]
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	429a      	cmp	r2, r3
 8002208:	d201      	bcs.n	800220e <u8g2_clip_intersection2+0x6e>
    a = c;
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800220e:	8aba      	ldrh	r2, [r7, #20]
 8002210:	88bb      	ldrh	r3, [r7, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	d901      	bls.n	800221a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8afa      	ldrh	r2, [r7, #22]
 800221e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002220:	8aba      	ldrh	r2, [r7, #20]
 8002222:	8afb      	ldrh	r3, [r7, #22]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	8aba      	ldrh	r2, [r7, #20]
 800222c:	801a      	strh	r2, [r3, #0]
  return 1;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b087      	sub	sp, #28
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800225a:	893a      	ldrh	r2, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002264:	88f8      	ldrh	r0, [r7, #6]
 8002266:	893a      	ldrh	r2, [r7, #8]
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4603      	mov	r3, r0
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	47a0      	blx	r4
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}

0800227e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800227e:	b590      	push	{r4, r7, lr}
 8002280:	b087      	sub	sp, #28
 8002282:	af02      	add	r7, sp, #8
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	4608      	mov	r0, r1
 8002288:	4611      	mov	r1, r2
 800228a:	461a      	mov	r2, r3
 800228c:	4603      	mov	r3, r0
 800228e:	817b      	strh	r3, [r7, #10]
 8002290:	460b      	mov	r3, r1
 8002292:	813b      	strh	r3, [r7, #8]
 8002294:	4613      	mov	r3, r2
 8002296:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d075      	beq.n	800238e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d072      	beq.n	800238e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d91a      	bls.n	80022e4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80022ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d109      	bne.n	80022ca <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80022b6:	897a      	ldrh	r2, [r7, #10]
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	b29b      	uxth	r3, r3
 80022be:	817b      	strh	r3, [r7, #10]
	  x++;
 80022c0:	897b      	ldrh	r3, [r7, #10]
 80022c2:	3301      	adds	r3, #1
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	817b      	strh	r3, [r7, #10]
 80022c8:	e00c      	b.n	80022e4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80022ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d108      	bne.n	80022e4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80022d2:	893a      	ldrh	r2, [r7, #8]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	813b      	strh	r3, [r7, #8]
	  y++;
 80022dc:	893b      	ldrh	r3, [r7, #8]
 80022de:	3301      	adds	r3, #1
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80022e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80022f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11a      	bne.n	800232e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80022fe:	893b      	ldrh	r3, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d83b      	bhi.n	800237c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800230a:	893b      	ldrh	r3, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d937      	bls.n	8002380 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800231c:	1db9      	adds	r1, r7, #6
 800231e:	f107 000a 	add.w	r0, r7, #10
 8002322:	f7ff ff3d 	bl	80021a0 <u8g2_clip_intersection2>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d11a      	bne.n	8002362 <u8g2_DrawHVLine+0xe4>
	  return;
 800232c:	e02f      	b.n	800238e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002334:	897b      	ldrh	r3, [r7, #10]
 8002336:	429a      	cmp	r2, r3
 8002338:	d824      	bhi.n	8002384 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002340:	897b      	ldrh	r3, [r7, #10]
 8002342:	429a      	cmp	r2, r3
 8002344:	d920      	bls.n	8002388 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002352:	1db9      	adds	r1, r7, #6
 8002354:	f107 0008 	add.w	r0, r7, #8
 8002358:	f7ff ff22 	bl	80021a0 <u8g2_clip_intersection2>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d014      	beq.n	800238c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	689c      	ldr	r4, [r3, #8]
 8002368:	8979      	ldrh	r1, [r7, #10]
 800236a:	893a      	ldrh	r2, [r7, #8]
 800236c:	88f8      	ldrh	r0, [r7, #6]
 800236e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4603      	mov	r3, r0
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	47a0      	blx	r4
 800237a:	e008      	b.n	800238e <u8g2_DrawHVLine+0x110>
	  return;
 800237c:	bf00      	nop
 800237e:	e006      	b.n	800238e <u8g2_DrawHVLine+0x110>
	  return;
 8002380:	bf00      	nop
 8002382:	e004      	b.n	800238e <u8g2_DrawHVLine+0x110>
	  return;
 8002384:	bf00      	nop
 8002386:	e002      	b.n	800238e <u8g2_DrawHVLine+0x110>
	  return;
 8002388:	bf00      	nop
 800238a:	e000      	b.n	800238e <u8g2_DrawHVLine+0x110>
	  return;
 800238c:	bf00      	nop
    }
}
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002394:	b490      	push	{r4, r7}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	4611      	mov	r1, r2
 80023a0:	461a      	mov	r2, r3
 80023a2:	4623      	mov	r3, r4
 80023a4:	80fb      	strh	r3, [r7, #6]
 80023a6:	4603      	mov	r3, r0
 80023a8:	80bb      	strh	r3, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	807b      	strh	r3, [r7, #2]
 80023ae:	4613      	mov	r3, r2
 80023b0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	88bb      	ldrh	r3, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20d      	bcs.n	80023d6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80023ba:	883a      	ldrh	r2, [r7, #0]
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d901      	bls.n	80023c6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e014      	b.n	80023f0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	883b      	ldrh	r3, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d901      	bls.n	80023d2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e00c      	b.n	80023f0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80023d6:	883a      	ldrh	r2, [r7, #0]
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d907      	bls.n	80023ee <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	883b      	ldrh	r3, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d901      	bls.n	80023ea <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e002      	b.n	80023f0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80023ee:	2300      	movs	r3, #0
    }
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc90      	pop	{r4, r7}
 80023f8:	4770      	bx	lr

080023fa <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	4608      	mov	r0, r1
 8002404:	4611      	mov	r1, r2
 8002406:	461a      	mov	r2, r3
 8002408:	4603      	mov	r3, r0
 800240a:	817b      	strh	r3, [r7, #10]
 800240c:	460b      	mov	r3, r1
 800240e:	813b      	strh	r3, [r7, #8]
 8002410:	4613      	mov	r3, r2
 8002412:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002420:	8b3b      	ldrh	r3, [r7, #24]
 8002422:	893a      	ldrh	r2, [r7, #8]
 8002424:	f7ff ffb6 	bl	8002394 <u8g2_is_intersection_decision_tree>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <u8g2_IsIntersection+0x38>
    return 0; 
 800242e:	2300      	movs	r3, #0
 8002430:	e00a      	b.n	8002448 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	897a      	ldrh	r2, [r7, #10]
 8002442:	f7ff ffa7 	bl	8002394 <u8g2_is_intersection_decision_tree>
 8002446:	4603      	mov	r3, r0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	461a      	mov	r2, r3
 800245e:	4603      	mov	r3, r0
 8002460:	817b      	strh	r3, [r7, #10]
 8002462:	460b      	mov	r3, r1
 8002464:	813b      	strh	r3, [r7, #8]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800246a:	893b      	ldrh	r3, [r7, #8]
 800246c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800246e:	7efb      	ldrb	r3, [r7, #27]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800247a:	7e3a      	ldrb	r2, [r7, #24]
 800247c:	7efb      	ldrb	r3, [r7, #27]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002492:	2b01      	cmp	r3, #1
 8002494:	d801      	bhi.n	800249a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002496:	7e3b      	ldrb	r3, [r7, #24]
 8002498:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80024a4:	7e3b      	ldrb	r3, [r7, #24]
 80024a6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80024a8:	893b      	ldrh	r3, [r7, #8]
 80024aa:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80024ac:	8afb      	ldrh	r3, [r7, #22]
 80024ae:	f023 0307 	bic.w	r3, r3, #7
 80024b2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	7c1b      	ldrb	r3, [r3, #16]
 80024ba:	461a      	mov	r2, r3
 80024bc:	8afb      	ldrh	r3, [r7, #22]
 80024be:	fb13 f302 	smulbb	r3, r3, r2
 80024c2:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c8:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80024ca:	8afb      	ldrh	r3, [r7, #22]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80024d2:	897b      	ldrh	r3, [r7, #10]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	4413      	add	r3, r2
 80024d8:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80024da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d117      	bne.n	8002512 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	7ebb      	ldrb	r3, [r7, #26]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	7e7b      	ldrb	r3, [r7, #25]
 80024f6:	4053      	eors	r3, r2
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	701a      	strb	r2, [r3, #0]
	ptr++;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
	len--;
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	3b01      	subs	r3, #1
 8002508:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e8      	bne.n	80024e2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002510:	e038      	b.n	8002584 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	7ebb      	ldrb	r3, [r7, #26]
 8002518:	4313      	orrs	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	7e7b      	ldrb	r3, [r7, #25]
 8002526:	4053      	eors	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800252e:	7efb      	ldrb	r3, [r7, #27]
 8002530:	3301      	adds	r3, #1
 8002532:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002534:	7efb      	ldrb	r3, [r7, #27]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	76fb      	strb	r3, [r7, #27]
      len--;
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	3b01      	subs	r3, #1
 8002540:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002542:	7efb      	ldrb	r3, [r7, #27]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d114      	bne.n	8002572 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800254c:	461a      	mov	r2, r3
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800255a:	2b01      	cmp	r3, #1
 800255c:	d801      	bhi.n	8002562 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002568:	2b01      	cmp	r3, #1
 800256a:	d008      	beq.n	800257e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800256c:	2301      	movs	r3, #1
 800256e:	767b      	strb	r3, [r7, #25]
 8002570:	e005      	b.n	800257e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002572:	7ebb      	ldrb	r3, [r7, #26]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002578:	7e7b      	ldrb	r3, [r7, #25]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1c6      	bne.n	8002512 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002584:	bf00      	nop
 8002586:	3724      	adds	r7, #36	@ 0x24
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	79fa      	ldrb	r2, [r7, #7]
 80025f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff ffa9 	bl	8002590 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff fd84 	bl	800214c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002668:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	89fa      	ldrh	r2, [r7, #14]
 8002674:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	7c1b      	ldrb	r3, [r3, #16]
 800267a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800267c:	89fb      	ldrh	r3, [r7, #14]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	89fa      	ldrh	r2, [r7, #14]
 8002686:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800268e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002690:	89fb      	ldrh	r3, [r7, #14]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	89fa      	ldrh	r2, [r7, #14]
 800269a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026a2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80026a4:	89fb      	ldrh	r3, [r7, #14]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80026ac:	4413      	add	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	7c52      	ldrb	r2, [r2, #17]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	dd07      	ble.n	80026c6 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	7c5b      	ldrb	r3, [r3, #17]
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	4413      	add	r3, r2
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	8a9a      	ldrh	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	8ada      	ldrh	r2, [r3, #22]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af02      	add	r7, sp, #8
 800271a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	4603      	mov	r3, r0
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fe5e 	bl	80023fa <u8g2_IsIntersection>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d104      	bne.n	800274e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800274c:	e03b      	b.n	80027c6 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002762:	429a      	cmp	r2, r3
 8002764:	d205      	bcs.n	8002772 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800277e:	429a      	cmp	r2, r3
 8002780:	d905      	bls.n	800278e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800279a:	429a      	cmp	r2, r3
 800279c:	d205      	bcs.n	80027aa <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d905      	bls.n	80027c6 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ff3c 	bl	8002654 <u8g2_update_dimension_common>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff7b 	bl	8002714 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af02      	add	r7, sp, #8
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	4608      	mov	r0, r1
 8002830:	4611      	mov	r1, r2
 8002832:	461a      	mov	r2, r3
 8002834:	4603      	mov	r3, r0
 8002836:	817b      	strh	r3, [r7, #10]
 8002838:	460b      	mov	r3, r1
 800283a:	813b      	strh	r3, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002840:	88f8      	ldrh	r0, [r7, #6]
 8002842:	893a      	ldrh	r2, [r7, #8]
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	7e3b      	ldrb	r3, [r7, #24]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4603      	mov	r3, r0
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff fcf5 	bl	800223c <u8g2_draw_hv_line_2dir>
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <u8x8_byte_i2c_stm32>:
 */
#include "u8g2_stm32.h"

extern I2C_HandleTypeDef hi2c1; // Make sure this matches your I2C handle in main.c

uint8_t u8x8_byte_i2c_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	72fb      	strb	r3, [r7, #11]
 800286a:	4613      	mov	r3, r2
 800286c:	72bb      	strb	r3, [r7, #10]
    static uint8_t buffer[32];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg) {
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	3b14      	subs	r3, #20
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d84d      	bhi.n	8002912 <u8x8_byte_i2c_stm32+0xb6>
 8002876:	a201      	add	r2, pc, #4	@ (adr r2, 800287c <u8x8_byte_i2c_stm32+0x20>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	080028b1 	.word	0x080028b1
 8002880:	08002913 	.word	0x08002913
 8002884:	08002913 	.word	0x08002913
 8002888:	080028b9 	.word	0x080028b9
 800288c:	080028e9 	.word	0x080028e9
 8002890:	080028f1 	.word	0x080028f1
 8002894:	08002913 	.word	0x08002913
 8002898:	08002913 	.word	0x08002913
 800289c:	08002913 	.word	0x08002913
 80028a0:	08002913 	.word	0x08002913
 80028a4:	08002913 	.word	0x08002913
 80028a8:	08002913 	.word	0x08002913
 80028ac:	08002917 	.word	0x08002917
    case U8X8_MSG_BYTE_INIT:
        buf_idx = 0;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <u8x8_byte_i2c_stm32+0xcc>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
        break;
 80028b6:	e031      	b.n	800291c <u8x8_byte_i2c_stm32+0xc0>
    case U8X8_MSG_BYTE_SEND:
        data = (uint8_t *)arg_ptr;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	617b      	str	r3, [r7, #20]
        while (arg_int > 0) {
 80028bc:	e010      	b.n	80028e0 <u8x8_byte_i2c_stm32+0x84>
            buffer[buf_idx++] = *data;
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <u8x8_byte_i2c_stm32+0xcc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	b2d1      	uxtb	r1, r2
 80028c6:	4a18      	ldr	r2, [pc, #96]	@ (8002928 <u8x8_byte_i2c_stm32+0xcc>)
 80028c8:	7011      	strb	r1, [r2, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	7819      	ldrb	r1, [r3, #0]
 80028d0:	4b16      	ldr	r3, [pc, #88]	@ (800292c <u8x8_byte_i2c_stm32+0xd0>)
 80028d2:	5499      	strb	r1, [r3, r2]
            data++;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
            arg_int--;
 80028da:	7abb      	ldrb	r3, [r7, #10]
 80028dc:	3b01      	subs	r3, #1
 80028de:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0) {
 80028e0:	7abb      	ldrb	r3, [r7, #10]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1eb      	bne.n	80028be <u8x8_byte_i2c_stm32+0x62>
        }
        break;
 80028e6:	e019      	b.n	800291c <u8x8_byte_i2c_stm32+0xc0>
    case U8X8_MSG_BYTE_SET_DC:
        // Not used in I2C
        break;
    case U8X8_MSG_BYTE_START_TRANSFER:
        buf_idx = 0;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <u8x8_byte_i2c_stm32+0xcc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
        break;
 80028ee:	e015      	b.n	800291c <u8x8_byte_i2c_stm32+0xc0>
    case U8X8_MSG_BYTE_END_TRANSFER:
        if (HAL_I2C_Master_Transmit(&hi2c1, OLED_I2C_ADDR, buffer, buf_idx, HAL_MAX_DELAY) != HAL_OK) {
 80028f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <u8x8_byte_i2c_stm32+0xcc>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	4a0b      	ldr	r2, [pc, #44]	@ (800292c <u8x8_byte_i2c_stm32+0xd0>)
 8002900:	2178      	movs	r1, #120	@ 0x78
 8002902:	480b      	ldr	r0, [pc, #44]	@ (8002930 <u8x8_byte_i2c_stm32+0xd4>)
 8002904:	f001 f926 	bl	8003b54 <HAL_I2C_Master_Transmit>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <u8x8_byte_i2c_stm32+0xbe>
            return 0;
 800290e:	2300      	movs	r3, #0
 8002910:	e005      	b.n	800291e <u8x8_byte_i2c_stm32+0xc2>
        }
        break;
    default:
        return 0;
 8002912:	2300      	movs	r3, #0
 8002914:	e003      	b.n	800291e <u8x8_byte_i2c_stm32+0xc2>
        break;
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <u8x8_byte_i2c_stm32+0xc0>
        break;
 800291a:	bf00      	nop
    }
    return 1;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000660 	.word	0x20000660
 800292c:	20000664 	.word	0x20000664
 8002930:	20000084 	.word	0x20000084

08002934 <u8g2_gpio_and_delay_stm32>:

uint8_t u8g2_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	72fb      	strb	r3, [r7, #11]
 8002942:	4613      	mov	r3, r2
 8002944:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8002946:	7afb      	ldrb	r3, [r7, #11]
 8002948:	2b28      	cmp	r3, #40	@ 0x28
 800294a:	d00b      	beq.n	8002964 <u8g2_gpio_and_delay_stm32+0x30>
 800294c:	2b29      	cmp	r3, #41	@ 0x29
 800294e:	d104      	bne.n	800295a <u8g2_gpio_and_delay_stm32+0x26>
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
        break;
    case U8X8_MSG_DELAY_MILLI:
        HAL_Delay(arg_int);
 8002950:	7abb      	ldrb	r3, [r7, #10]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fc56 	bl	8003204 <HAL_Delay>
        break;
 8002958:	e005      	b.n	8002966 <u8g2_gpio_and_delay_stm32+0x32>
    default:
        u8x8_SetGPIOResult(u8x8, 1);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        break;
 8002962:	e000      	b.n	8002966 <u8g2_gpio_and_delay_stm32+0x32>
        break;
 8002964:	bf00      	nop
    }
    return 1;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <u8x8_ascii_next+0x18>
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	2b0a      	cmp	r3, #10
 80029a2:	d102      	bne.n	80029aa <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80029a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029a8:	e001      	b.n	80029ae <u8x8_ascii_next+0x22>
  return b;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	b29b      	uxth	r3, r3
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80029ba:	b590      	push	{r4, r7, lr}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	460b      	mov	r3, r1
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691c      	ldr	r4, [r3, #16]
 80029cc:	7afa      	ldrb	r2, [r7, #11]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2117      	movs	r1, #23
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	47a0      	blx	r4
 80029d6:	4603      	mov	r3, r0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}

080029e0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80029ec:	1cfb      	adds	r3, r7, #3
 80029ee:	461a      	mov	r2, r3
 80029f0:	2101      	movs	r1, #1
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffe1 	bl	80029ba <u8x8_byte_SendBytes>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002a02:	b590      	push	{r4, r7, lr}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691c      	ldr	r4, [r3, #16]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2200      	movs	r2, #0
 8002a12:	2118      	movs	r1, #24
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	47a0      	blx	r4
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002a22:	b590      	push	{r4, r7, lr}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691c      	ldr	r4, [r3, #16]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2200      	movs	r2, #0
 8002a32:	2119      	movs	r1, #25
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	47a0      	blx	r4
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}

08002a42 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002a42:	b590      	push	{r4, r7, lr}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68dc      	ldr	r4, [r3, #12]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	2300      	movs	r3, #0
 8002a56:	2115      	movs	r1, #21
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	47a0      	blx	r4
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}

08002a66 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002a66:	b590      	push	{r4, r7, lr}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68dc      	ldr	r4, [r3, #12]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2116      	movs	r1, #22
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	47a0      	blx	r4
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}

08002a8a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002a8a:	b590      	push	{r4, r7, lr}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	460b      	mov	r3, r1
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68dc      	ldr	r4, [r3, #12]
 8002a9c:	7afa      	ldrb	r2, [r7, #11]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2117      	movs	r1, #23
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	47a0      	blx	r4
 8002aa6:	4603      	mov	r3, r0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd90      	pop	{r4, r7, pc}

08002ab0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68dc      	ldr	r4, [r3, #12]
 8002abc:	2300      	movs	r3, #0
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2118      	movs	r1, #24
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	47a0      	blx	r4
 8002ac6:	4603      	mov	r3, r0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}

08002ad0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68dc      	ldr	r4, [r3, #12]
 8002adc:	2300      	movs	r3, #0
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2119      	movs	r1, #25
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	47a0      	blx	r4
 8002ae6:	4603      	mov	r3, r0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd90      	pop	{r4, r7, pc}

08002af0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	73fb      	strb	r3, [r7, #15]
    data++;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2bfe      	cmp	r3, #254	@ 0xfe
 8002b0a:	d031      	beq.n	8002b70 <u8x8_cad_SendSequence+0x80>
 8002b0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8002b0e:	dc3d      	bgt.n	8002b8c <u8x8_cad_SendSequence+0x9c>
 8002b10:	2b19      	cmp	r3, #25
 8002b12:	dc3b      	bgt.n	8002b8c <u8x8_cad_SendSequence+0x9c>
 8002b14:	2b18      	cmp	r3, #24
 8002b16:	da23      	bge.n	8002b60 <u8x8_cad_SendSequence+0x70>
 8002b18:	2b16      	cmp	r3, #22
 8002b1a:	dc02      	bgt.n	8002b22 <u8x8_cad_SendSequence+0x32>
 8002b1c:	2b15      	cmp	r3, #21
 8002b1e:	da03      	bge.n	8002b28 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002b20:	e034      	b.n	8002b8c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002b22:	2b17      	cmp	r3, #23
 8002b24:	d00e      	beq.n	8002b44 <u8x8_cad_SendSequence+0x54>
	return;
 8002b26:	e031      	b.n	8002b8c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68dc      	ldr	r4, [r3, #12]
 8002b32:	7bba      	ldrb	r2, [r7, #14]
 8002b34:	7bf9      	ldrb	r1, [r7, #15]
 8002b36:	2300      	movs	r3, #0
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	47a0      	blx	r4
	  data++;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	603b      	str	r3, [r7, #0]
	  break;
 8002b42:	e022      	b.n	8002b8a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002b4a:	f107 030e 	add.w	r3, r7, #14
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2101      	movs	r1, #1
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ff99 	bl	8002a8a <u8x8_cad_SendData>
	  data++;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	603b      	str	r3, [r7, #0]
	  break;
 8002b5e:	e014      	b.n	8002b8a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68dc      	ldr	r4, [r3, #12]
 8002b64:	7bf9      	ldrb	r1, [r7, #15]
 8002b66:	2300      	movs	r3, #0
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	47a0      	blx	r4
	  break;
 8002b6e:	e00c      	b.n	8002b8a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2129      	movs	r1, #41	@ 0x29
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fa36 	bl	8002fee <u8x8_gpio_call>
	  data++;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	603b      	str	r3, [r7, #0]
	  break;
 8002b88:	bf00      	nop
    cmd = *data;
 8002b8a:	e7b6      	b.n	8002afa <u8x8_cad_SendSequence+0xa>
	return;
 8002b8c:	bf00      	nop
    }
  }
}
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}

08002b94 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7ff ff2d 	bl	8002a02 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002ba8:	2140      	movs	r1, #64	@ 0x40
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff ff18 	bl	80029e0 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	691c      	ldr	r4, [r3, #16]
 8002bb4:	7afa      	ldrb	r2, [r7, #11]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2117      	movs	r1, #23
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff ff2f 	bl	8002a22 <u8x8_byte_EndTransfer>
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd90      	pop	{r4, r7, pc}

08002bcc <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	72fb      	strb	r3, [r7, #11]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	3b14      	subs	r3, #20
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d86e      	bhi.n	8002cc4 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8002be6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c83 	.word	0x08002c83
 8002bf0:	08002c05 	.word	0x08002c05
 8002bf4:	08002c33 	.word	0x08002c33
 8002bf8:	08002c3f 	.word	0x08002c3f
 8002bfc:	08002ca7 	.word	0x08002ca7
 8002c00:	08002caf 	.word	0x08002caf
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8002c04:	4b33      	ldr	r3, [pc, #204]	@ (8002cd4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ff08 	bl	8002a22 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fef5 	bl	8002a02 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002c18:	2100      	movs	r1, #0
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fee0 	bl	80029e0 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002c20:	7abb      	ldrb	r3, [r7, #10]
 8002c22:	4619      	mov	r1, r3
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fedb 	bl	80029e0 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002c30:	e04a      	b.n	8002cc8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8002c32:	7abb      	ldrb	r3, [r7, #10]
 8002c34:	4619      	mov	r1, r3
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff fed2 	bl	80029e0 <u8x8_byte_SendByte>
      break;      
 8002c3c:	e044      	b.n	8002cc8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff feeb 	bl	8002a22 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002c50:	e00a      	b.n	8002c68 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	2118      	movs	r1, #24
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff ff9c 	bl	8002b94 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002c5c:	7abb      	ldrb	r3, [r7, #10]
 8002c5e:	3b18      	subs	r3, #24
 8002c60:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3318      	adds	r3, #24
 8002c66:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002c68:	7abb      	ldrb	r3, [r7, #10]
 8002c6a:	2b18      	cmp	r3, #24
 8002c6c:	d8f1      	bhi.n	8002c52 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002c6e:	7abb      	ldrb	r3, [r7, #10]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4619      	mov	r1, r3
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff ff8d 	bl	8002b94 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
      break;
 8002c80:	e022      	b.n	8002cc8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c88:	2bff      	cmp	r3, #255	@ 0xff
 8002c8a:	d103      	bne.n	8002c94 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2278      	movs	r2, #120	@ 0x78
 8002c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691c      	ldr	r4, [r3, #16]
 8002c98:	7aba      	ldrb	r2, [r7, #10]
 8002c9a:	7af9      	ldrb	r1, [r7, #11]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	47a0      	blx	r4
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	e011      	b.n	8002cca <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
      break;
 8002cac:	e00c      	b.n	8002cc8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002cae:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff feb3 	bl	8002a22 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
      break;
 8002cc2:	e001      	b.n	8002cc8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8002cc8:	2301      	movs	r3, #1
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000684 	.word	0x20000684

08002cd8 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	72fb      	strb	r3, [r7, #11]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	3b0b      	subs	r3, #11
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	f200 808a 	bhi.w	8002e08 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8002cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cfc <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d11 	.word	0x08002d11
 8002d00:	08002e09 	.word	0x08002e09
 8002d04:	08002d2b 	.word	0x08002d2b
 8002d08:	08002d5d 	.word	0x08002d5d
 8002d0c:	08002d7d 	.word	0x08002d7d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002d10:	7abb      	ldrb	r3, [r7, #10]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002d16:	4940      	ldr	r1, [pc, #256]	@ (8002e18 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff fee9 	bl	8002af0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002d1e:	e075      	b.n	8002e0c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002d20:	493e      	ldr	r1, [pc, #248]	@ (8002e1c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff fee4 	bl	8002af0 <u8x8_cad_SendSequence>
      break;
 8002d28:	e070      	b.n	8002e0c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002d2a:	7abb      	ldrb	r3, [r7, #10]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002d30:	493b      	ldr	r1, [pc, #236]	@ (8002e20 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fedc 	bl	8002af0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	7c9a      	ldrb	r2, [r3, #18]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002d44:	e062      	b.n	8002e0c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002d46:	4937      	ldr	r1, [pc, #220]	@ (8002e24 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff fed1 	bl	8002af0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	7cda      	ldrb	r2, [r3, #19]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8002d5a:	e057      	b.n	8002e0c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff fea7 	bl	8002ab0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002d62:	2181      	movs	r1, #129	@ 0x81
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fe6c 	bl	8002a42 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002d6a:	7abb      	ldrb	r3, [r7, #10]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f7ff fe79 	bl	8002a66 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff feab 	bl	8002ad0 <u8x8_cad_EndTransfer>
      break;
 8002d7a:	e047      	b.n	8002e0c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fe97 	bl	8002ab0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	795b      	ldrb	r3, [r3, #5]
 8002d86:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	4413      	add	r3, r2
 8002d98:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002d9a:	2140      	movs	r1, #64	@ 0x40
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff fe50 	bl	8002a42 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0310 	orr.w	r3, r3, #16
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	4619      	mov	r1, r3
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fe46 	bl	8002a42 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff fe50 	bl	8002a66 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	799b      	ldrb	r3, [r3, #6]
 8002dca:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f7ff fe47 	bl	8002a66 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	791b      	ldrb	r3, [r3, #4]
 8002ddc:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002de4:	7dbb      	ldrb	r3, [r7, #22]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4619      	mov	r1, r3
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff fe4b 	bl	8002a8a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002df4:	7abb      	ldrb	r3, [r7, #10]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002dfa:	7abb      	ldrb	r3, [r7, #10]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1eb      	bne.n	8002dd8 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fe65 	bl	8002ad0 <u8x8_cad_EndTransfer>
      break;
 8002e06:	e001      	b.n	8002e0c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8002e0c:	2301      	movs	r3, #1
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	08007cb8 	.word	0x08007cb8
 8002e1c:	08007cc0 	.word	0x08007cc0
 8002e20:	08007cc8 	.word	0x08007cc8
 8002e24:	08007cd0 	.word	0x08007cd0

08002e28 <u8x8_d_sh1106_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	72fb      	strb	r3, [r7, #11]
 8002e36:	4613      	mov	r3, r2
 8002e38:	72bb      	strb	r3, [r7, #10]
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002e3a:	7aba      	ldrb	r2, [r7, #10]
 8002e3c:	7af9      	ldrb	r1, [r7, #11]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff49 	bl	8002cd8 <u8x8_d_ssd1306_sh1106_generic>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <u8x8_d_sh1106_128x64_noname+0x28>
    return 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e014      	b.n	8002e7a <u8x8_d_sh1106_128x64_noname+0x52>
  
  switch(msg)
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	2b09      	cmp	r3, #9
 8002e54:	d009      	beq.n	8002e6a <u8x8_d_sh1106_128x64_noname+0x42>
 8002e56:	2b0a      	cmp	r3, #10
 8002e58:	d10c      	bne.n	8002e74 <u8x8_d_sh1106_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f82a 	bl	8002eb4 <u8x8_d_helper_display_init>
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002e60:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <u8x8_d_sh1106_128x64_noname+0x5c>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff fe44 	bl	8002af0 <u8x8_cad_SendSequence>
      break;
 8002e68:	e006      	b.n	8002e78 <u8x8_d_sh1106_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
 8002e6a:	4907      	ldr	r1, [pc, #28]	@ (8002e88 <u8x8_d_sh1106_128x64_noname+0x60>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f80d 	bl	8002e8c <u8x8_d_helper_display_setup_memory>
      break;
 8002e72:	e001      	b.n	8002e78 <u8x8_d_sh1106_128x64_noname+0x50>
    default:
      return 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <u8x8_d_sh1106_128x64_noname+0x52>
  }
  return 1;
 8002e78:	2301      	movs	r3, #1
    
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	08007c80 	.word	0x08007c80
 8002e88:	08007cd8 	.word	0x08007cd8

08002e8c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	7c9a      	ldrb	r2, [r3, #18]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695c      	ldr	r4, [r3, #20]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2128      	movs	r1, #40	@ 0x28
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68dc      	ldr	r4, [r3, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2114      	movs	r1, #20
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	214b      	movs	r1, #75	@ 0x4b
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f886 	bl	8002fee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	791b      	ldrb	r3, [r3, #4]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2129      	movs	r1, #41	@ 0x29
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f87e 	bl	8002fee <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	214b      	movs	r1, #75	@ 0x4b
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f879 	bl	8002fee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	791b      	ldrb	r3, [r3, #4]
 8002f02:	461a      	mov	r2, r3
 8002f04:	2129      	movs	r1, #41	@ 0x29
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f871 	bl	8002fee <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	214b      	movs	r1, #75	@ 0x4b
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f86c 	bl	8002fee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	795b      	ldrb	r3, [r3, #5]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2129      	movs	r1, #41	@ 0x29
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f864 	bl	8002fee <u8x8_gpio_call>
}    
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}

08002f2e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002f2e:	b590      	push	{r4, r7, lr}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	4608      	mov	r0, r1
 8002f38:	4611      	mov	r1, r2
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	70fb      	strb	r3, [r7, #3]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70bb      	strb	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002f4c:	78bb      	ldrb	r3, [r7, #2]
 8002f4e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002f50:	787b      	ldrb	r3, [r7, #1]
 8002f52:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689c      	ldr	r4, [r3, #8]
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	2201      	movs	r2, #1
 8002f62:	210f      	movs	r1, #15
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	47a0      	blx	r4
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}

08002f72 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002f72:	b590      	push	{r4, r7, lr}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689c      	ldr	r4, [r3, #8]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2200      	movs	r2, #0
 8002f82:	2109      	movs	r1, #9
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	47a0      	blx	r4
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}

08002f90 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689c      	ldr	r4, [r3, #8]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	210a      	movs	r1, #10
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd90      	pop	{r4, r7, pc}

08002fae <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002fae:	b590      	push	{r4, r7, lr}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689c      	ldr	r4, [r3, #8]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	210b      	movs	r1, #11
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	47a0      	blx	r4
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689c      	ldr	r4, [r3, #8]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2110      	movs	r1, #16
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	47a0      	blx	r4
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}

08002fee <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695c      	ldr	r4, [r3, #20]
 8003002:	78ba      	ldrb	r2, [r7, #2]
 8003004:	78f9      	ldrb	r1, [r7, #3]
 8003006:	2300      	movs	r3, #0
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	47a0      	blx	r4
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bd90      	pop	{r4, r7, pc}

08003014 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	72fb      	strb	r3, [r7, #11]
 8003022:	4613      	mov	r3, r2
 8003024:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a11      	ldr	r2, [pc, #68]	@ (800308c <u8x8_SetupDefaults+0x58>)
 8003046:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a10      	ldr	r2, [pc, #64]	@ (800308c <u8x8_SetupDefaults+0x58>)
 800304c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a0e      	ldr	r2, [pc, #56]	@ (800308c <u8x8_SetupDefaults+0x58>)
 8003052:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <u8x8_SetupDefaults+0x58>)
 8003058:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	22ff      	movs	r2, #255	@ 0xff
 8003074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	22ff      	movs	r2, #255	@ 0xff
 800307c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	08003015 	.word	0x08003015

08003090 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff ffc8 	bl	8003034 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff ff58 	bl	8002f72 <u8x8_SetupMemory>
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030d0:	f7fe f9f8 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030d4:	480c      	ldr	r0, [pc, #48]	@ (8003108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030d6:	490d      	ldr	r1, [pc, #52]	@ (800310c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030dc:	e002      	b.n	80030e4 <LoopCopyDataInit>

080030de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e2:	3304      	adds	r3, #4

080030e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e8:	d3f9      	bcc.n	80030de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f0:	e001      	b.n	80030f6 <LoopFillZerobss>

080030f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f4:	3204      	adds	r2, #4

080030f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f8:	d3fb      	bcc.n	80030f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030fa:	f003 f8e5 	bl	80062c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030fe:	f7fd fc6b 	bl	80009d8 <main>
  bx  lr    
 8003102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800310c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003110:	08007d34 	.word	0x08007d34
  ldr r2, =_sbss
 8003114:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003118:	200007d8 	.word	0x200007d8

0800311c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800311c:	e7fe      	b.n	800311c <ADC_IRQHandler>
	...

08003120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003124:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <HAL_Init+0x40>)
 800312a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800312e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <HAL_Init+0x40>)
 8003136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800313a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800313c:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a07      	ldr	r2, [pc, #28]	@ (8003160 <HAL_Init+0x40>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003148:	2003      	movs	r0, #3
 800314a:	f000 f94f 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314e:	2000      	movs	r0, #0
 8003150:	f000 f808 	bl	8003164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003154:	f7fe f818 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00

08003164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800316c:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_InitTick+0x54>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_InitTick+0x58>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800317a:	fbb3 f3f1 	udiv	r3, r3, r1
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f967 	bl	8003456 <HAL_SYSTICK_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00e      	b.n	80031b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d80a      	bhi.n	80031ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003198:	2200      	movs	r2, #0
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f000 f92f 	bl	8003402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a4:	4a06      	ldr	r2, [pc, #24]	@ (80031c0 <HAL_InitTick+0x5c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000008 	.word	0x20000008
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c8:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_IncTick+0x20>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_IncTick+0x24>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	4a04      	ldr	r2, [pc, #16]	@ (80031e8 <HAL_IncTick+0x24>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000008 	.word	0x20000008
 80031e8:	20000688 	.word	0x20000688

080031ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return uwTick;
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <HAL_GetTick+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000688 	.word	0x20000688

08003204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff ffee 	bl	80031ec <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d005      	beq.n	800322a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321e:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <HAL_Delay+0x44>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800322a:	bf00      	nop
 800322c:	f7ff ffde 	bl	80031ec <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d8f7      	bhi.n	800322c <HAL_Delay+0x28>
  {
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000008 	.word	0x20000008

0800324c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0b      	blt.n	80032da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4907      	ldr	r1, [pc, #28]	@ (80032e8 <__NVIC_EnableIRQ+0x38>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	@ (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	@ (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	@ 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f7ff ff8e 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff29 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff3e 	bl	8003294 <__NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff8e 	bl	8003340 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5d 	bl	80032ec <__NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff31 	bl	80032b0 <__NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffa2 	bl	80033a8 <SysTick_Config>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff feb6 	bl	80031ec <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d008      	beq.n	80034a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2280      	movs	r2, #128	@ 0x80
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e052      	b.n	8003546 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0216 	bic.w	r2, r2, #22
 80034ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <HAL_DMA_Abort+0x62>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0208 	bic.w	r2, r2, #8
 80034de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	e013      	b.n	800351a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f2:	f7ff fe7b 	bl	80031ec <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d90c      	bls.n	800351a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2203      	movs	r2, #3
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e015      	b.n	8003546 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e4      	bne.n	80034f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	223f      	movs	r2, #63	@ 0x3f
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d004      	beq.n	800356c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2280      	movs	r2, #128	@ 0x80
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e00c      	b.n	8003586 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2205      	movs	r2, #5
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e16b      	b.n	8003888 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	f040 815a 	bne.w	8003882 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d130      	bne.n	8003648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 0201 	and.w	r2, r3, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d017      	beq.n	8003684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d123      	bne.n	80036d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	08da      	lsrs	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3208      	adds	r2, #8
 8003698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80b4 	beq.w	8003882 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b60      	ldr	r3, [pc, #384]	@ (80038a0 <HAL_GPIO_Init+0x30c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	4a5f      	ldr	r2, [pc, #380]	@ (80038a0 <HAL_GPIO_Init+0x30c>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003728:	6453      	str	r3, [r2, #68]	@ 0x44
 800372a:	4b5d      	ldr	r3, [pc, #372]	@ (80038a0 <HAL_GPIO_Init+0x30c>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003736:	4a5b      	ldr	r2, [pc, #364]	@ (80038a4 <HAL_GPIO_Init+0x310>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_GPIO_Init+0x314>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <HAL_GPIO_Init+0x226>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a51      	ldr	r2, [pc, #324]	@ (80038ac <HAL_GPIO_Init+0x318>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d025      	beq.n	80037b6 <HAL_GPIO_Init+0x222>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a50      	ldr	r2, [pc, #320]	@ (80038b0 <HAL_GPIO_Init+0x31c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <HAL_GPIO_Init+0x21e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4f      	ldr	r2, [pc, #316]	@ (80038b4 <HAL_GPIO_Init+0x320>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x21a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4e      	ldr	r2, [pc, #312]	@ (80038b8 <HAL_GPIO_Init+0x324>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x216>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4d      	ldr	r2, [pc, #308]	@ (80038bc <HAL_GPIO_Init+0x328>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x212>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4c      	ldr	r2, [pc, #304]	@ (80038c0 <HAL_GPIO_Init+0x32c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x20e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4b      	ldr	r2, [pc, #300]	@ (80038c4 <HAL_GPIO_Init+0x330>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x20a>
 800379a:	2307      	movs	r3, #7
 800379c:	e00e      	b.n	80037bc <HAL_GPIO_Init+0x228>
 800379e:	2308      	movs	r3, #8
 80037a0:	e00c      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037a2:	2306      	movs	r3, #6
 80037a4:	e00a      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e008      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037ba:	2300      	movs	r3, #0
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f002 0203 	and.w	r2, r2, #3
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	4093      	lsls	r3, r2
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037cc:	4935      	ldr	r1, [pc, #212]	@ (80038a4 <HAL_GPIO_Init+0x310>)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037da:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037fe:	4a32      	ldr	r2, [pc, #200]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003804:	4b30      	ldr	r3, [pc, #192]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003828:	4a27      	ldr	r2, [pc, #156]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800382e:	4b26      	ldr	r3, [pc, #152]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003852:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003858:	4b1b      	ldr	r3, [pc, #108]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800387c:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3301      	adds	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	f67f ae90 	bls.w	80035b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3724      	adds	r7, #36	@ 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40020000 	.word	0x40020000
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40020c00 	.word	0x40020c00
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40021400 	.word	0x40021400
 80038c0:	40021800 	.word	0x40021800
 80038c4:	40021c00 	.word	0x40021c00
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e12b      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fc70 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	@ 0x24
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800391e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800392e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003930:	f001 f8da 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8003934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a81      	ldr	r2, [pc, #516]	@ (8003b40 <HAL_I2C_Init+0x274>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d807      	bhi.n	8003950 <HAL_I2C_Init+0x84>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a80      	ldr	r2, [pc, #512]	@ (8003b44 <HAL_I2C_Init+0x278>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e006      	b.n	800395e <HAL_I2C_Init+0x92>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a7d      	ldr	r2, [pc, #500]	@ (8003b48 <HAL_I2C_Init+0x27c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	bf94      	ite	ls
 8003958:	2301      	movls	r3, #1
 800395a:	2300      	movhi	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0e7      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a78      	ldr	r2, [pc, #480]	@ (8003b4c <HAL_I2C_Init+0x280>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0c9b      	lsrs	r3, r3, #18
 8003970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a6a      	ldr	r2, [pc, #424]	@ (8003b40 <HAL_I2C_Init+0x274>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d802      	bhi.n	80039a0 <HAL_I2C_Init+0xd4>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3301      	adds	r3, #1
 800399e:	e009      	b.n	80039b4 <HAL_I2C_Init+0xe8>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	4a69      	ldr	r2, [pc, #420]	@ (8003b50 <HAL_I2C_Init+0x284>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	495c      	ldr	r1, [pc, #368]	@ (8003b40 <HAL_I2C_Init+0x274>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d819      	bhi.n	8003a08 <HAL_I2C_Init+0x13c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e59      	subs	r1, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e2:	1c59      	adds	r1, r3, #1
 80039e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039e8:	400b      	ands	r3, r1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_I2C_Init+0x138>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e59      	subs	r1, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	e051      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a04:	2304      	movs	r3, #4
 8003a06:	e04f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <HAL_I2C_Init+0x168>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e012      	b.n	8003a5a <HAL_I2C_Init+0x18e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	0099      	lsls	r1, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Init+0x196>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e022      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10e      	bne.n	8003a88 <HAL_I2C_Init+0x1bc>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e58      	subs	r0, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	440b      	add	r3, r1
 8003a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	0099      	lsls	r1, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	6809      	ldr	r1, [r1, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ad6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6911      	ldr	r1, [r2, #16]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	000186a0 	.word	0x000186a0
 8003b44:	001e847f 	.word	0x001e847f
 8003b48:	003d08ff 	.word	0x003d08ff
 8003b4c:	431bde83 	.word	0x431bde83
 8003b50:	10624dd3 	.word	0x10624dd3

08003b54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	460b      	mov	r3, r1
 8003b62:	817b      	strh	r3, [r7, #10]
 8003b64:	4613      	mov	r3, r2
 8003b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b68:	f7ff fb40 	bl	80031ec <HAL_GetTick>
 8003b6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	f040 80e0 	bne.w	8003d3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2319      	movs	r3, #25
 8003b82:	2201      	movs	r2, #1
 8003b84:	4970      	ldr	r1, [pc, #448]	@ (8003d48 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f964 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0d3      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2C_Master_Transmit+0x50>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0cc      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d007      	beq.n	8003bca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	@ 0x21
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2210      	movs	r2, #16
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	893a      	ldrh	r2, [r7, #8]
 8003bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a50      	ldr	r2, [pc, #320]	@ (8003d4c <HAL_I2C_Master_Transmit+0x1f8>)
 8003c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c0c:	8979      	ldrh	r1, [r7, #10]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f89c 	bl	8003d50 <I2C_MasterRequestWrite>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e08d      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c38:	e066      	b.n	8003d08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa22 	bl	8004088 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06b      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_I2C_Master_Transmit+0x188>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d017      	beq.n	8003cdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	6a39      	ldr	r1, [r7, #32]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fa19 	bl	8004118 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d107      	bne.n	8003d04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e01a      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d194      	bne.n	8003c3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	00100002 	.word	0x00100002
 8003d4c:	ffff0000 	.word	0xffff0000

08003d50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d006      	beq.n	8003d7a <I2C_MasterRequestWrite+0x2a>
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d003      	beq.n	8003d7a <I2C_MasterRequestWrite+0x2a>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d78:	d108      	bne.n	8003d8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e00b      	b.n	8003da4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	2b12      	cmp	r3, #18
 8003d92:	d107      	bne.n	8003da4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f84f 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dca:	d103      	bne.n	8003dd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e035      	b.n	8003e44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003de0:	d108      	bne.n	8003df4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003df0:	611a      	str	r2, [r3, #16]
 8003df2:	e01b      	b.n	8003e2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003df4:	897b      	ldrh	r3, [r7, #10]
 8003df6:	11db      	asrs	r3, r3, #7
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f063 030f 	orn	r3, r3, #15
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	490e      	ldr	r1, [pc, #56]	@ (8003e4c <I2C_MasterRequestWrite+0xfc>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f898 	bl	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e010      	b.n	8003e44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4907      	ldr	r1, [pc, #28]	@ (8003e50 <I2C_MasterRequestWrite+0x100>)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f888 	bl	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	00010008 	.word	0x00010008
 8003e50:	00010002 	.word	0x00010002

08003e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e64:	e048      	b.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d044      	beq.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7ff f9bd 	bl	80031ec <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d139      	bne.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10d      	bne.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	e00c      	b.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d116      	bne.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e023      	b.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10d      	bne.n	8003f1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	43da      	mvns	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf0c      	ite	eq
 8003f14:	2301      	moveq	r3, #1
 8003f16:	2300      	movne	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	e00c      	b.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d093      	beq.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f56:	e071      	b.n	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f66:	d123      	bne.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	f043 0204 	orr.w	r2, r3, #4
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e067      	b.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d041      	beq.n	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb8:	f7ff f918 	bl	80031ec <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d136      	bne.n	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d10c      	bne.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e00b      	b.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	43da      	mvns	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e021      	b.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d10c      	bne.n	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e00b      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	f47f af6d 	bne.w	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004094:	e034      	b.n	8004100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f886 	bl	80041a8 <I2C_IsAcknowledgeFailed>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e034      	b.n	8004110 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d028      	beq.n	8004100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7ff f89d 	bl	80031ec <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d11d      	bne.n	8004100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ce:	2b80      	cmp	r3, #128	@ 0x80
 80040d0:	d016      	beq.n	8004100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e007      	b.n	8004110 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410a:	2b80      	cmp	r3, #128	@ 0x80
 800410c:	d1c3      	bne.n	8004096 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004124:	e034      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f83e 	bl	80041a8 <I2C_IsAcknowledgeFailed>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e034      	b.n	80041a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d028      	beq.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7ff f855 	bl	80031ec <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11d      	bne.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b04      	cmp	r3, #4
 8004160:	d016      	beq.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e007      	b.n	80041a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d1c3      	bne.n	8004126 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041be:	d11b      	bne.n	80041f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	f043 0204 	orr.w	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e267      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d075      	beq.n	8004312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d00c      	beq.n	800424c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800423a:	2b08      	cmp	r3, #8
 800423c:	d112      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423e:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800424a:	d10b      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	4b7e      	ldr	r3, [pc, #504]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05b      	beq.n	8004310 <HAL_RCC_OscConfig+0x108>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d157      	bne.n	8004310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e242      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x74>
 800426e:	4b76      	ldr	r3, [pc, #472]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a75      	ldr	r2, [pc, #468]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x98>
 8004286:	4b70      	ldr	r3, [pc, #448]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6f      	ldr	r2, [pc, #444]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6d      	ldr	r3, [pc, #436]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6c      	ldr	r2, [pc, #432]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 80042a0:	4b69      	ldr	r3, [pc, #420]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b66      	ldr	r3, [pc, #408]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a65      	ldr	r2, [pc, #404]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe ff94 	bl	80031ec <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe ff90 	bl	80031ec <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e207      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xc0>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe ff80 	bl	80031ec <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe ff7c 	bl	80031ec <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1f3      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b51      	ldr	r3, [pc, #324]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0xe8>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800431e:	4b4a      	ldr	r3, [pc, #296]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	4b44      	ldr	r3, [pc, #272]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b41      	ldr	r3, [pc, #260]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1c7      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4937      	ldr	r1, [pc, #220]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b34      	ldr	r3, [pc, #208]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fe ff35 	bl	80031ec <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fe ff31 	bl	80031ec <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1a8      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2b      	ldr	r3, [pc, #172]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b28      	ldr	r3, [pc, #160]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4925      	ldr	r1, [pc, #148]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe ff14 	bl	80031ec <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fe ff10 	bl	80031ec <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e187      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d036      	beq.n	8004460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fe fef4 	bl	80031ec <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004408:	f7fe fef0 	bl	80031ec <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e167      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x200>
 8004426:	e01b      	b.n	8004460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fe fedd 	bl	80031ec <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	e00e      	b.n	8004454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004436:	f7fe fed9 	bl	80031ec <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d907      	bls.n	8004454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e150      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004448:	40023800 	.word	0x40023800
 800444c:	42470000 	.word	0x42470000
 8004450:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004454:	4b88      	ldr	r3, [pc, #544]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ea      	bne.n	8004436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8097 	beq.w	800459c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b81      	ldr	r3, [pc, #516]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	4b7d      	ldr	r3, [pc, #500]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a7c      	ldr	r2, [pc, #496]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b7a      	ldr	r3, [pc, #488]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b77      	ldr	r3, [pc, #476]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b74      	ldr	r3, [pc, #464]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a73      	ldr	r2, [pc, #460]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fe fe99 	bl	80031ec <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe fe95 	bl	80031ec <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e10c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b6a      	ldr	r3, [pc, #424]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2ea>
 80044e4:	4b64      	ldr	r3, [pc, #400]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a63      	ldr	r2, [pc, #396]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	e01c      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x30c>
 80044fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	4a5b      	ldr	r2, [pc, #364]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 8004514:	4b58      	ldr	r3, [pc, #352]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	4a57      	ldr	r2, [pc, #348]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004520:	4b55      	ldr	r3, [pc, #340]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4a54      	ldr	r2, [pc, #336]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004526:	f023 0304 	bic.w	r3, r3, #4
 800452a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe fe5a 	bl	80031ec <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fe fe56 	bl	80031ec <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0cb      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	4b49      	ldr	r3, [pc, #292]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ee      	beq.n	800453c <HAL_RCC_OscConfig+0x334>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f7fe fe44 	bl	80031ec <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fe fe40 	bl	80031ec <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0b5      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457e:	4b3e      	ldr	r3, [pc, #248]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ee      	bne.n	8004568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	4a38      	ldr	r2, [pc, #224]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a1 	beq.w	80046e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d05c      	beq.n	800466c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d141      	bne.n	800463e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe fe14 	bl	80031ec <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fe fe10 	bl	80031ec <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e087      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	491b      	ldr	r1, [pc, #108]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe fde9 	bl	80031ec <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe fde5 	bl	80031ec <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e05c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004630:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x416>
 800463c:	e054      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fdd2 	bl	80031ec <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe fdce 	bl	80031ec <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e045      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x444>
 800466a:	e03d      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e038      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000
 8004680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x4ec>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d028      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d121      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	4293      	cmp	r3, r2
 80046be:	d111      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	3b01      	subs	r3, #1
 80046ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800

080046f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0cc      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b68      	ldr	r3, [pc, #416]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d90c      	bls.n	8004734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b65      	ldr	r3, [pc, #404]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b63      	ldr	r3, [pc, #396]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0b8      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474c:	4b59      	ldr	r3, [pc, #356]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a58      	ldr	r2, [pc, #352]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004756:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a52      	ldr	r2, [pc, #328]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800476e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b50      	ldr	r3, [pc, #320]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	494d      	ldr	r1, [pc, #308]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d044      	beq.n	8004818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b47      	ldr	r3, [pc, #284]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d119      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b3f      	ldr	r3, [pc, #252]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e067      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b37      	ldr	r3, [pc, #220]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4934      	ldr	r1, [pc, #208]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7fe fd00 	bl	80031ec <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fe fcfc 	bl	80031ec <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e04f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d20c      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b22      	ldr	r3, [pc, #136]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b20      	ldr	r3, [pc, #128]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e032      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4916      	ldr	r1, [pc, #88]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486a:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	490e      	ldr	r1, [pc, #56]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800487e:	f000 f821 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004882:	4602      	mov	r2, r0
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	490a      	ldr	r1, [pc, #40]	@ (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a09      	ldr	r2, [pc, #36]	@ (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fc60 	bl	8003164 <HAL_InitTick>

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023c00 	.word	0x40023c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	08007270 	.word	0x08007270
 80048bc:	20000000 	.word	0x20000000
 80048c0:	20000004 	.word	0x20000004

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b094      	sub	sp, #80	@ 0x50
 80048ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048dc:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d00d      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x40>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	f200 80e1 	bhi.w	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x34>
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x3a>
 80048f6:	e0db      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b73      	ldr	r3, [pc, #460]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048fc:	e0db      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048fe:	4b73      	ldr	r3, [pc, #460]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x208>)
 8004900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004902:	e0d8      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004904:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2200      	movs	r2, #0
 8004922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	633b      	str	r3, [r7, #48]	@ 0x30
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4621      	mov	r1, r4
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	6139      	str	r1, [r7, #16]
 8004954:	4629      	mov	r1, r5
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004968:	4659      	mov	r1, fp
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4651      	mov	r1, sl
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4651      	mov	r1, sl
 8004978:	ebb2 0801 	subs.w	r8, r2, r1
 800497c:	4659      	mov	r1, fp
 800497e:	eb63 0901 	sbc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	462b      	mov	r3, r5
 80049a4:	eb49 0303 	adc.w	r3, r9, r3
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049b6:	4629      	mov	r1, r5
 80049b8:	024b      	lsls	r3, r1, #9
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c0:	4621      	mov	r1, r4
 80049c2:	024a      	lsls	r2, r1, #9
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	2200      	movs	r2, #0
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049d4:	f7fb fe68 	bl	80006a8 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	e058      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	2200      	movs	r2, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	4611      	mov	r1, r2
 80049ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a0e:	0150      	lsls	r0, r2, #5
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4641      	mov	r1, r8
 8004a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a34:	ebb2 040a 	subs.w	r4, r2, sl
 8004a38:	eb63 050b 	sbc.w	r5, r3, fp
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	00eb      	lsls	r3, r5, #3
 8004a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4a:	00e2      	lsls	r2, r4, #3
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	18e3      	adds	r3, r4, r3
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	464b      	mov	r3, r9
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	028b      	lsls	r3, r1, #10
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a74:	4621      	mov	r1, r4
 8004a76:	028a      	lsls	r2, r1, #10
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	61fa      	str	r2, [r7, #28]
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	f7fb fe0e 	bl	80006a8 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3750      	adds	r7, #80	@ 0x50
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000000 	.word	0x20000000

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aec:	f7ff fff0 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	08007280 	.word	0x08007280

08004b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b14:	f7ff ffdc 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0b5b      	lsrs	r3, r3, #13
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4903      	ldr	r1, [pc, #12]	@ (8004b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	08007280 	.word	0x08007280

08004b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e042      	b.n	8004bd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc fb82 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2224      	movs	r2, #36	@ 0x24
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fdd3 	bl	8005728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	@ 0x28
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	4613      	mov	r3, r2
 8004be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d175      	bne.n	8004ce4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_UART_Transmit+0x2c>
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e06e      	b.n	8004ce6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2221      	movs	r2, #33	@ 0x21
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c16:	f7fe fae9 	bl	80031ec <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c30:	d108      	bne.n	8004c44 <HAL_UART_Transmit+0x6c>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e003      	b.n	8004c4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c4c:	e02e      	b.n	8004cac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2180      	movs	r1, #128	@ 0x80
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fb37 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e03a      	b.n	8004ce6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	e007      	b.n	8004c9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1cb      	bne.n	8004c4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2140      	movs	r1, #64	@ 0x40
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fb03 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e006      	b.n	8004ce6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d112      	bne.n	8004d2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_UART_Receive_IT+0x26>
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e00b      	b.n	8004d30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fb2a 	bl	800537e <UART_Start_Receive_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	e000      	b.n	8004d30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
  }
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_UART_IRQHandler+0x66>
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fc07 	bl	80055aa <UART_Receive_IT>
      return;
 8004d9c:	e273      	b.n	8005286 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80de 	beq.w	8004f64 <HAL_UART_IRQHandler+0x22c>
 8004da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80d1 	beq.w	8004f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xae>
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_UART_IRQHandler+0xd2>
 8004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e02:	f043 0202 	orr.w	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <HAL_UART_IRQHandler+0xf6>
 8004e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d011      	beq.n	8004e5e <HAL_UART_IRQHandler+0x126>
 8004e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d105      	bne.n	8004e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	f043 0208 	orr.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 820a 	beq.w	800527c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_UART_IRQHandler+0x14e>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fb92 	bl	80055aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x17a>
 8004eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04f      	beq.n	8004f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fa9d 	bl	80053f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d141      	bne.n	8004f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3314      	adds	r3, #20
 8004eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1d9      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d013      	beq.n	8004f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1e:	4a8a      	ldr	r2, [pc, #552]	@ (8005148 <HAL_UART_IRQHandler+0x410>)
 8004f20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fb11 	bl	800354e <HAL_DMA_Abort_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f40:	e00e      	b.n	8004f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f9ac 	bl	80052a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	e00a      	b.n	8004f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9a8 	bl	80052a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e006      	b.n	8004f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9a4 	bl	80052a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f5e:	e18d      	b.n	800527c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	bf00      	nop
    return;
 8004f62:	e18b      	b.n	800527c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	f040 8167 	bne.w	800523c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8160 	beq.w	800523c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8159 	beq.w	800523c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	f040 80ce 	bne.w	800514c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80a9 	beq.w	8005118 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	f080 80a2 	bcs.w	8005118 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fe6:	f000 8088 	beq.w	80050fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005000:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005016:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800501a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005022:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800502e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1d9      	bne.n	8004fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3314      	adds	r3, #20
 800503c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800505a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800505e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005062:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800506c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e1      	bne.n	8005036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3314      	adds	r3, #20
 8005078:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005096:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005098:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800509c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e3      	bne.n	8005072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ca:	f023 0310 	bic.w	r3, r3, #16
 80050ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e3      	bne.n	80050b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fe f9ba 	bl	800346e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	b29b      	uxth	r3, r3
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8cf 	bl	80052b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005116:	e0b3      	b.n	8005280 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800511c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005120:	429a      	cmp	r2, r3
 8005122:	f040 80ad 	bne.w	8005280 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005130:	f040 80a6 	bne.w	8005280 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8b7 	bl	80052b4 <HAL_UARTEx_RxEventCallback>
      return;
 8005146:	e09b      	b.n	8005280 <HAL_UART_IRQHandler+0x548>
 8005148:	080054b9 	.word	0x080054b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005154:	b29b      	uxth	r3, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 808e 	beq.w	8005284 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8089 	beq.w	8005284 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005196:	647a      	str	r2, [r7, #68]	@ 0x44
 8005198:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800519c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e3      	bne.n	8005172 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3314      	adds	r3, #20
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	623b      	str	r3, [r7, #32]
   return(result);
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3314      	adds	r3, #20
 80051ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80051d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e3      	bne.n	80051aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0310 	bic.w	r3, r3, #16
 8005206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	617b      	str	r3, [r7, #20]
   return(result);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e3      	bne.n	80051f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800522e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f83d 	bl	80052b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800523a:	e023      	b.n	8005284 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_UART_IRQHandler+0x524>
 8005248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800524c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f940 	bl	80054da <UART_Transmit_IT>
    return;
 800525a:	e014      	b.n	8005286 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800525c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00e      	beq.n	8005286 <HAL_UART_IRQHandler+0x54e>
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f980 	bl	800557a <UART_EndTransmit_IT>
    return;
 800527a:	e004      	b.n	8005286 <HAL_UART_IRQHandler+0x54e>
    return;
 800527c:	bf00      	nop
 800527e:	e002      	b.n	8005286 <HAL_UART_IRQHandler+0x54e>
      return;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_UART_IRQHandler+0x54e>
      return;
 8005284:	bf00      	nop
  }
}
 8005286:	37e8      	adds	r7, #232	@ 0xe8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052dc:	e03b      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d037      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e6:	f7fd ff81 	bl	80031ec <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d302      	bcc.n	80052fc <UART_WaitOnFlagUntilTimeout+0x30>
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e03a      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d023      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0x8a>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b80      	cmp	r3, #128	@ 0x80
 8005312:	d020      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d01d      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d116      	bne.n	8005356 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f857 	bl	80053f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2208      	movs	r2, #8
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e00f      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	bf0c      	ite	eq
 8005366:	2301      	moveq	r3, #1
 8005368:	2300      	movne	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	461a      	mov	r2, r3
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	429a      	cmp	r2, r3
 8005372:	d0b4      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2222      	movs	r2, #34	@ 0x22
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0220 	orr.w	r2, r2, #32
 80053e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b095      	sub	sp, #84	@ 0x54
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800541a:	643a      	str	r2, [r7, #64]	@ 0x40
 800541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005420:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e5      	bne.n	80053fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3314      	adds	r3, #20
 8005434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	61fb      	str	r3, [r7, #28]
   return(result);
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3314      	adds	r3, #20
 800544c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e5      	bne.n	800542e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	2b01      	cmp	r3, #1
 8005468:	d119      	bne.n	800549e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	60bb      	str	r3, [r7, #8]
   return(result);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f023 0310 	bic.w	r3, r3, #16
 8005480:	647b      	str	r3, [r7, #68]	@ 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800548a:	61ba      	str	r2, [r7, #24]
 800548c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6979      	ldr	r1, [r7, #20]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	613b      	str	r3, [r7, #16]
   return(result);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e5      	bne.n	800546a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054ac:	bf00      	nop
 80054ae:	3754      	adds	r7, #84	@ 0x54
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff fee7 	bl	80052a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b21      	cmp	r3, #33	@ 0x21
 80054ec:	d13e      	bne.n	800556c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f6:	d114      	bne.n	8005522 <UART_Transmit_IT+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005514:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]
 8005520:	e008      	b.n	8005534 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6211      	str	r1, [r2, #32]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10f      	bne.n	8005568 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005556:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005566:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005590:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fe76 	bl	800528c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b08c      	sub	sp, #48	@ 0x30
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b22      	cmp	r3, #34	@ 0x22
 80055c4:	f040 80aa 	bne.w	800571c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d0:	d115      	bne.n	80055fe <UART_Receive_IT+0x54>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d111      	bne.n	80055fe <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80055fc:	e024      	b.n	8005648 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560c:	d007      	beq.n	800561e <UART_Receive_IT+0x74>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <UART_Receive_IT+0x82>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e008      	b.n	800563e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005638:	b2da      	uxtb	r2, r3
 800563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29b      	uxth	r3, r3
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4619      	mov	r1, r3
 8005656:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005658:	2b00      	cmp	r3, #0
 800565a:	d15d      	bne.n	8005718 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0220 	bic.w	r2, r2, #32
 800566a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800567a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d135      	bne.n	800570e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	613b      	str	r3, [r7, #16]
   return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f023 0310 	bic.w	r3, r3, #16
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c8:	623a      	str	r2, [r7, #32]
 80056ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	69f9      	ldr	r1, [r7, #28]
 80056ce:	6a3a      	ldr	r2, [r7, #32]
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d10a      	bne.n	8005700 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fdd4 	bl	80052b4 <HAL_UARTEx_RxEventCallback>
 800570c:	e002      	b.n	8005714 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb fcda 	bl	80010c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	e002      	b.n	800571e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3730      	adds	r7, #48	@ 0x30
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b0c0      	sub	sp, #256	@ 0x100
 800572e:	af00      	add	r7, sp, #0
 8005730:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	68d9      	ldr	r1, [r3, #12]
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	ea40 0301 	orr.w	r3, r0, r1
 8005750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	431a      	orrs	r2, r3
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	431a      	orrs	r2, r3
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005780:	f021 010c 	bic.w	r1, r1, #12
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800578e:	430b      	orrs	r3, r1
 8005790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a2:	6999      	ldr	r1, [r3, #24]
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	ea40 0301 	orr.w	r3, r0, r1
 80057ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b8f      	ldr	r3, [pc, #572]	@ (80059f4 <UART_SetConfig+0x2cc>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d005      	beq.n	80057c8 <UART_SetConfig+0xa0>
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b8d      	ldr	r3, [pc, #564]	@ (80059f8 <UART_SetConfig+0x2d0>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d104      	bne.n	80057d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7ff f9a2 	bl	8004b10 <HAL_RCC_GetPCLK2Freq>
 80057cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057d0:	e003      	b.n	80057da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057d2:	f7ff f989 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 80057d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e4:	f040 810c 	bne.w	8005a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005802:	415b      	adcs	r3, r3
 8005804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800580a:	4621      	mov	r1, r4
 800580c:	eb12 0801 	adds.w	r8, r2, r1
 8005810:	4629      	mov	r1, r5
 8005812:	eb43 0901 	adc.w	r9, r3, r1
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582a:	4690      	mov	r8, r2
 800582c:	4699      	mov	r9, r3
 800582e:	4623      	mov	r3, r4
 8005830:	eb18 0303 	adds.w	r3, r8, r3
 8005834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005838:	462b      	mov	r3, r5
 800583a:	eb49 0303 	adc.w	r3, r9, r3
 800583e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800584e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005856:	460b      	mov	r3, r1
 8005858:	18db      	adds	r3, r3, r3
 800585a:	653b      	str	r3, [r7, #80]	@ 0x50
 800585c:	4613      	mov	r3, r2
 800585e:	eb42 0303 	adc.w	r3, r2, r3
 8005862:	657b      	str	r3, [r7, #84]	@ 0x54
 8005864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800586c:	f7fa ff1c 	bl	80006a8 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4b61      	ldr	r3, [pc, #388]	@ (80059fc <UART_SetConfig+0x2d4>)
 8005876:	fba3 2302 	umull	r2, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	011c      	lsls	r4, r3, #4
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005888:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800588c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005898:	415b      	adcs	r3, r3
 800589a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800589c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058a0:	4641      	mov	r1, r8
 80058a2:	eb12 0a01 	adds.w	sl, r2, r1
 80058a6:	4649      	mov	r1, r9
 80058a8:	eb43 0b01 	adc.w	fp, r3, r1
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c0:	4692      	mov	sl, r2
 80058c2:	469b      	mov	fp, r3
 80058c4:	4643      	mov	r3, r8
 80058c6:	eb1a 0303 	adds.w	r3, sl, r3
 80058ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058ce:	464b      	mov	r3, r9
 80058d0:	eb4b 0303 	adc.w	r3, fp, r3
 80058d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058ec:	460b      	mov	r3, r1
 80058ee:	18db      	adds	r3, r3, r3
 80058f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058f2:	4613      	mov	r3, r2
 80058f4:	eb42 0303 	adc.w	r3, r2, r3
 80058f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005902:	f7fa fed1 	bl	80006a8 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4611      	mov	r1, r2
 800590c:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <UART_SetConfig+0x2d4>)
 800590e:	fba3 2301 	umull	r2, r3, r3, r1
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	@ 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005922:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <UART_SetConfig+0x2d4>)
 8005924:	fba3 2302 	umull	r2, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005930:	441c      	add	r4, r3
 8005932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800593c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	1891      	adds	r1, r2, r2
 800594a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800594c:	415b      	adcs	r3, r3
 800594e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005954:	4641      	mov	r1, r8
 8005956:	1851      	adds	r1, r2, r1
 8005958:	6339      	str	r1, [r7, #48]	@ 0x30
 800595a:	4649      	mov	r1, r9
 800595c:	414b      	adcs	r3, r1
 800595e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800596c:	4659      	mov	r1, fp
 800596e:	00cb      	lsls	r3, r1, #3
 8005970:	4651      	mov	r1, sl
 8005972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005976:	4651      	mov	r1, sl
 8005978:	00ca      	lsls	r2, r1, #3
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	4603      	mov	r3, r0
 8005980:	4642      	mov	r2, r8
 8005982:	189b      	adds	r3, r3, r2
 8005984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005988:	464b      	mov	r3, r9
 800598a:	460a      	mov	r2, r1
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059be:	f7fa fe73 	bl	80006a8 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <UART_SetConfig+0x2d4>)
 80059c8:	fba3 1302 	umull	r1, r3, r3, r2
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	2164      	movs	r1, #100	@ 0x64
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	3332      	adds	r3, #50	@ 0x32
 80059da:	4a08      	ldr	r2, [pc, #32]	@ (80059fc <UART_SetConfig+0x2d4>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	f003 0207 	and.w	r2, r3, #7
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4422      	add	r2, r4
 80059ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059f0:	e106      	b.n	8005c00 <UART_SetConfig+0x4d8>
 80059f2:	bf00      	nop
 80059f4:	40011000 	.word	0x40011000
 80059f8:	40011400 	.word	0x40011400
 80059fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a12:	4642      	mov	r2, r8
 8005a14:	464b      	mov	r3, r9
 8005a16:	1891      	adds	r1, r2, r2
 8005a18:	6239      	str	r1, [r7, #32]
 8005a1a:	415b      	adcs	r3, r3
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a22:	4641      	mov	r1, r8
 8005a24:	1854      	adds	r4, r2, r1
 8005a26:	4649      	mov	r1, r9
 8005a28:	eb43 0501 	adc.w	r5, r3, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	00eb      	lsls	r3, r5, #3
 8005a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3a:	00e2      	lsls	r2, r4, #3
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	461d      	mov	r5, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	18e3      	adds	r3, r4, r3
 8005a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a48:	464b      	mov	r3, r9
 8005a4a:	eb45 0303 	adc.w	r3, r5, r3
 8005a4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a6e:	4629      	mov	r1, r5
 8005a70:	008b      	lsls	r3, r1, #2
 8005a72:	4621      	mov	r1, r4
 8005a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a78:	4621      	mov	r1, r4
 8005a7a:	008a      	lsls	r2, r1, #2
 8005a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a80:	f7fa fe12 	bl	80006a8 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4b60      	ldr	r3, [pc, #384]	@ (8005c0c <UART_SetConfig+0x4e4>)
 8005a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	011c      	lsls	r4, r3, #4
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	61b9      	str	r1, [r7, #24]
 8005aac:	415b      	adcs	r3, r3
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6139      	str	r1, [r7, #16]
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ae8:	464b      	mov	r3, r9
 8005aea:	460a      	mov	r2, r1
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005afe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	008b      	lsls	r3, r1, #2
 8005b10:	4641      	mov	r1, r8
 8005b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b16:	4641      	mov	r1, r8
 8005b18:	008a      	lsls	r2, r1, #2
 8005b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b1e:	f7fa fdc3 	bl	80006a8 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	4b38      	ldr	r3, [pc, #224]	@ (8005c0c <UART_SetConfig+0x4e4>)
 8005b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	2264      	movs	r2, #100	@ 0x64
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	1acb      	subs	r3, r1, r3
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	3332      	adds	r3, #50	@ 0x32
 8005b3c:	4a33      	ldr	r2, [pc, #204]	@ (8005c0c <UART_SetConfig+0x4e4>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b48:	441c      	add	r4, r3
 8005b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b4e:	2200      	movs	r2, #0
 8005b50:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b52:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	1891      	adds	r1, r2, r2
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	415b      	adcs	r3, r3
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b68:	4641      	mov	r1, r8
 8005b6a:	1851      	adds	r1, r2, r1
 8005b6c:	6039      	str	r1, [r7, #0]
 8005b6e:	4649      	mov	r1, r9
 8005b70:	414b      	adcs	r3, r1
 8005b72:	607b      	str	r3, [r7, #4]
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b80:	4659      	mov	r1, fp
 8005b82:	00cb      	lsls	r3, r1, #3
 8005b84:	4651      	mov	r1, sl
 8005b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b8a:	4651      	mov	r1, sl
 8005b8c:	00ca      	lsls	r2, r1, #3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	4642      	mov	r2, r8
 8005b96:	189b      	adds	r3, r3, r2
 8005b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	460a      	mov	r2, r1
 8005b9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bae:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	008b      	lsls	r3, r1, #2
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	008a      	lsls	r2, r1, #2
 8005bca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bce:	f7fa fd6b 	bl	80006a8 <__aeabi_uldivmod>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <UART_SetConfig+0x4e4>)
 8005bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	2164      	movs	r1, #100	@ 0x64
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	3332      	adds	r3, #50	@ 0x32
 8005bea:	4a08      	ldr	r2, [pc, #32]	@ (8005c0c <UART_SetConfig+0x4e4>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	f003 020f 	and.w	r2, r3, #15
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4422      	add	r2, r4
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c06:	46bd      	mov	sp, r7
 8005c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0c:	51eb851f 	.word	0x51eb851f

08005c10 <__sflush_r>:
 8005c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c18:	0716      	lsls	r6, r2, #28
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	d454      	bmi.n	8005cca <__sflush_r+0xba>
 8005c20:	684b      	ldr	r3, [r1, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dc02      	bgt.n	8005c2c <__sflush_r+0x1c>
 8005c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dd48      	ble.n	8005cbe <__sflush_r+0xae>
 8005c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	d045      	beq.n	8005cbe <__sflush_r+0xae>
 8005c32:	2300      	movs	r3, #0
 8005c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c38:	682f      	ldr	r7, [r5, #0]
 8005c3a:	6a21      	ldr	r1, [r4, #32]
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	d030      	beq.n	8005ca2 <__sflush_r+0x92>
 8005c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	0759      	lsls	r1, r3, #29
 8005c46:	d505      	bpl.n	8005c54 <__sflush_r+0x44>
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c4e:	b10b      	cbz	r3, 8005c54 <__sflush_r+0x44>
 8005c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c58:	6a21      	ldr	r1, [r4, #32]
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b0      	blx	r6
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	d106      	bne.n	8005c72 <__sflush_r+0x62>
 8005c64:	6829      	ldr	r1, [r5, #0]
 8005c66:	291d      	cmp	r1, #29
 8005c68:	d82b      	bhi.n	8005cc2 <__sflush_r+0xb2>
 8005c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d14 <__sflush_r+0x104>)
 8005c6c:	40ca      	lsrs	r2, r1
 8005c6e:	07d6      	lsls	r6, r2, #31
 8005c70:	d527      	bpl.n	8005cc2 <__sflush_r+0xb2>
 8005c72:	2200      	movs	r2, #0
 8005c74:	6062      	str	r2, [r4, #4]
 8005c76:	04d9      	lsls	r1, r3, #19
 8005c78:	6922      	ldr	r2, [r4, #16]
 8005c7a:	6022      	str	r2, [r4, #0]
 8005c7c:	d504      	bpl.n	8005c88 <__sflush_r+0x78>
 8005c7e:	1c42      	adds	r2, r0, #1
 8005c80:	d101      	bne.n	8005c86 <__sflush_r+0x76>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	b903      	cbnz	r3, 8005c88 <__sflush_r+0x78>
 8005c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c8a:	602f      	str	r7, [r5, #0]
 8005c8c:	b1b9      	cbz	r1, 8005cbe <__sflush_r+0xae>
 8005c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c92:	4299      	cmp	r1, r3
 8005c94:	d002      	beq.n	8005c9c <__sflush_r+0x8c>
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 fb3e 	bl	8006318 <_free_r>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ca0:	e00d      	b.n	8005cbe <__sflush_r+0xae>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	4602      	mov	r2, r0
 8005caa:	1c50      	adds	r0, r2, #1
 8005cac:	d1c9      	bne.n	8005c42 <__sflush_r+0x32>
 8005cae:	682b      	ldr	r3, [r5, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0c6      	beq.n	8005c42 <__sflush_r+0x32>
 8005cb4:	2b1d      	cmp	r3, #29
 8005cb6:	d001      	beq.n	8005cbc <__sflush_r+0xac>
 8005cb8:	2b16      	cmp	r3, #22
 8005cba:	d11e      	bne.n	8005cfa <__sflush_r+0xea>
 8005cbc:	602f      	str	r7, [r5, #0]
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e022      	b.n	8005d08 <__sflush_r+0xf8>
 8005cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	e01b      	b.n	8005d02 <__sflush_r+0xf2>
 8005cca:	690f      	ldr	r7, [r1, #16]
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	d0f6      	beq.n	8005cbe <__sflush_r+0xae>
 8005cd0:	0793      	lsls	r3, r2, #30
 8005cd2:	680e      	ldr	r6, [r1, #0]
 8005cd4:	bf08      	it	eq
 8005cd6:	694b      	ldreq	r3, [r1, #20]
 8005cd8:	600f      	str	r7, [r1, #0]
 8005cda:	bf18      	it	ne
 8005cdc:	2300      	movne	r3, #0
 8005cde:	eba6 0807 	sub.w	r8, r6, r7
 8005ce2:	608b      	str	r3, [r1, #8]
 8005ce4:	f1b8 0f00 	cmp.w	r8, #0
 8005ce8:	dde9      	ble.n	8005cbe <__sflush_r+0xae>
 8005cea:	6a21      	ldr	r1, [r4, #32]
 8005cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cee:	4643      	mov	r3, r8
 8005cf0:	463a      	mov	r2, r7
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b0      	blx	r6
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	dc08      	bgt.n	8005d0c <__sflush_r+0xfc>
 8005cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0c:	4407      	add	r7, r0
 8005d0e:	eba8 0800 	sub.w	r8, r8, r0
 8005d12:	e7e7      	b.n	8005ce4 <__sflush_r+0xd4>
 8005d14:	20400001 	.word	0x20400001

08005d18 <_fflush_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b913      	cbnz	r3, 8005d28 <_fflush_r+0x10>
 8005d22:	2500      	movs	r5, #0
 8005d24:	4628      	mov	r0, r5
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	b118      	cbz	r0, 8005d32 <_fflush_r+0x1a>
 8005d2a:	6a03      	ldr	r3, [r0, #32]
 8005d2c:	b90b      	cbnz	r3, 8005d32 <_fflush_r+0x1a>
 8005d2e:	f000 f8bb 	bl	8005ea8 <__sinit>
 8005d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f3      	beq.n	8005d22 <_fflush_r+0xa>
 8005d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d3c:	07d0      	lsls	r0, r2, #31
 8005d3e:	d404      	bmi.n	8005d4a <_fflush_r+0x32>
 8005d40:	0599      	lsls	r1, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_fflush_r+0x32>
 8005d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d46:	f000 fae4 	bl	8006312 <__retarget_lock_acquire_recursive>
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f7ff ff5f 	bl	8005c10 <__sflush_r>
 8005d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d54:	07da      	lsls	r2, r3, #31
 8005d56:	4605      	mov	r5, r0
 8005d58:	d4e4      	bmi.n	8005d24 <_fflush_r+0xc>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	059b      	lsls	r3, r3, #22
 8005d5e:	d4e1      	bmi.n	8005d24 <_fflush_r+0xc>
 8005d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d62:	f000 fad7 	bl	8006314 <__retarget_lock_release_recursive>
 8005d66:	e7dd      	b.n	8005d24 <_fflush_r+0xc>

08005d68 <fflush>:
 8005d68:	4601      	mov	r1, r0
 8005d6a:	b920      	cbnz	r0, 8005d76 <fflush+0xe>
 8005d6c:	4a04      	ldr	r2, [pc, #16]	@ (8005d80 <fflush+0x18>)
 8005d6e:	4905      	ldr	r1, [pc, #20]	@ (8005d84 <fflush+0x1c>)
 8005d70:	4805      	ldr	r0, [pc, #20]	@ (8005d88 <fflush+0x20>)
 8005d72:	f000 b8b1 	b.w	8005ed8 <_fwalk_sglue>
 8005d76:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <fflush+0x24>)
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f7ff bfcd 	b.w	8005d18 <_fflush_r>
 8005d7e:	bf00      	nop
 8005d80:	2000000c 	.word	0x2000000c
 8005d84:	08005d19 	.word	0x08005d19
 8005d88:	2000001c 	.word	0x2000001c
 8005d8c:	20000018 	.word	0x20000018

08005d90 <std>:
 8005d90:	2300      	movs	r3, #0
 8005d92:	b510      	push	{r4, lr}
 8005d94:	4604      	mov	r4, r0
 8005d96:	e9c0 3300 	strd	r3, r3, [r0]
 8005d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d9e:	6083      	str	r3, [r0, #8]
 8005da0:	8181      	strh	r1, [r0, #12]
 8005da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005da4:	81c2      	strh	r2, [r0, #14]
 8005da6:	6183      	str	r3, [r0, #24]
 8005da8:	4619      	mov	r1, r3
 8005daa:	2208      	movs	r2, #8
 8005dac:	305c      	adds	r0, #92	@ 0x5c
 8005dae:	f000 fa37 	bl	8006220 <memset>
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <std+0x58>)
 8005db4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <std+0x5c>)
 8005db8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005dba:	4b0d      	ldr	r3, [pc, #52]	@ (8005df0 <std+0x60>)
 8005dbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005df4 <std+0x64>)
 8005dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <std+0x68>)
 8005dc4:	6224      	str	r4, [r4, #32]
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	d006      	beq.n	8005dd8 <std+0x48>
 8005dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005dce:	4294      	cmp	r4, r2
 8005dd0:	d002      	beq.n	8005dd8 <std+0x48>
 8005dd2:	33d0      	adds	r3, #208	@ 0xd0
 8005dd4:	429c      	cmp	r4, r3
 8005dd6:	d105      	bne.n	8005de4 <std+0x54>
 8005dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de0:	f000 ba96 	b.w	8006310 <__retarget_lock_init_recursive>
 8005de4:	bd10      	pop	{r4, pc}
 8005de6:	bf00      	nop
 8005de8:	08006071 	.word	0x08006071
 8005dec:	08006093 	.word	0x08006093
 8005df0:	080060cb 	.word	0x080060cb
 8005df4:	080060ef 	.word	0x080060ef
 8005df8:	2000068c 	.word	0x2000068c

08005dfc <stdio_exit_handler>:
 8005dfc:	4a02      	ldr	r2, [pc, #8]	@ (8005e08 <stdio_exit_handler+0xc>)
 8005dfe:	4903      	ldr	r1, [pc, #12]	@ (8005e0c <stdio_exit_handler+0x10>)
 8005e00:	4803      	ldr	r0, [pc, #12]	@ (8005e10 <stdio_exit_handler+0x14>)
 8005e02:	f000 b869 	b.w	8005ed8 <_fwalk_sglue>
 8005e06:	bf00      	nop
 8005e08:	2000000c 	.word	0x2000000c
 8005e0c:	08005d19 	.word	0x08005d19
 8005e10:	2000001c 	.word	0x2000001c

08005e14 <cleanup_stdio>:
 8005e14:	6841      	ldr	r1, [r0, #4]
 8005e16:	4b0c      	ldr	r3, [pc, #48]	@ (8005e48 <cleanup_stdio+0x34>)
 8005e18:	4299      	cmp	r1, r3
 8005e1a:	b510      	push	{r4, lr}
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	d001      	beq.n	8005e24 <cleanup_stdio+0x10>
 8005e20:	f7ff ff7a 	bl	8005d18 <_fflush_r>
 8005e24:	68a1      	ldr	r1, [r4, #8]
 8005e26:	4b09      	ldr	r3, [pc, #36]	@ (8005e4c <cleanup_stdio+0x38>)
 8005e28:	4299      	cmp	r1, r3
 8005e2a:	d002      	beq.n	8005e32 <cleanup_stdio+0x1e>
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7ff ff73 	bl	8005d18 <_fflush_r>
 8005e32:	68e1      	ldr	r1, [r4, #12]
 8005e34:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <cleanup_stdio+0x3c>)
 8005e36:	4299      	cmp	r1, r3
 8005e38:	d004      	beq.n	8005e44 <cleanup_stdio+0x30>
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e40:	f7ff bf6a 	b.w	8005d18 <_fflush_r>
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	bf00      	nop
 8005e48:	2000068c 	.word	0x2000068c
 8005e4c:	200006f4 	.word	0x200006f4
 8005e50:	2000075c 	.word	0x2000075c

08005e54 <global_stdio_init.part.0>:
 8005e54:	b510      	push	{r4, lr}
 8005e56:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <global_stdio_init.part.0+0x30>)
 8005e58:	4c0b      	ldr	r4, [pc, #44]	@ (8005e88 <global_stdio_init.part.0+0x34>)
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e8c <global_stdio_init.part.0+0x38>)
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	4620      	mov	r0, r4
 8005e60:	2200      	movs	r2, #0
 8005e62:	2104      	movs	r1, #4
 8005e64:	f7ff ff94 	bl	8005d90 <std>
 8005e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	2109      	movs	r1, #9
 8005e70:	f7ff ff8e 	bl	8005d90 <std>
 8005e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e78:	2202      	movs	r2, #2
 8005e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7e:	2112      	movs	r1, #18
 8005e80:	f7ff bf86 	b.w	8005d90 <std>
 8005e84:	200007c4 	.word	0x200007c4
 8005e88:	2000068c 	.word	0x2000068c
 8005e8c:	08005dfd 	.word	0x08005dfd

08005e90 <__sfp_lock_acquire>:
 8005e90:	4801      	ldr	r0, [pc, #4]	@ (8005e98 <__sfp_lock_acquire+0x8>)
 8005e92:	f000 ba3e 	b.w	8006312 <__retarget_lock_acquire_recursive>
 8005e96:	bf00      	nop
 8005e98:	200007cd 	.word	0x200007cd

08005e9c <__sfp_lock_release>:
 8005e9c:	4801      	ldr	r0, [pc, #4]	@ (8005ea4 <__sfp_lock_release+0x8>)
 8005e9e:	f000 ba39 	b.w	8006314 <__retarget_lock_release_recursive>
 8005ea2:	bf00      	nop
 8005ea4:	200007cd 	.word	0x200007cd

08005ea8 <__sinit>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	4604      	mov	r4, r0
 8005eac:	f7ff fff0 	bl	8005e90 <__sfp_lock_acquire>
 8005eb0:	6a23      	ldr	r3, [r4, #32]
 8005eb2:	b11b      	cbz	r3, 8005ebc <__sinit+0x14>
 8005eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb8:	f7ff bff0 	b.w	8005e9c <__sfp_lock_release>
 8005ebc:	4b04      	ldr	r3, [pc, #16]	@ (8005ed0 <__sinit+0x28>)
 8005ebe:	6223      	str	r3, [r4, #32]
 8005ec0:	4b04      	ldr	r3, [pc, #16]	@ (8005ed4 <__sinit+0x2c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f5      	bne.n	8005eb4 <__sinit+0xc>
 8005ec8:	f7ff ffc4 	bl	8005e54 <global_stdio_init.part.0>
 8005ecc:	e7f2      	b.n	8005eb4 <__sinit+0xc>
 8005ece:	bf00      	nop
 8005ed0:	08005e15 	.word	0x08005e15
 8005ed4:	200007c4 	.word	0x200007c4

08005ed8 <_fwalk_sglue>:
 8005ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005edc:	4607      	mov	r7, r0
 8005ede:	4688      	mov	r8, r1
 8005ee0:	4614      	mov	r4, r2
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8005eec:	d505      	bpl.n	8005efa <_fwalk_sglue+0x22>
 8005eee:	6824      	ldr	r4, [r4, #0]
 8005ef0:	2c00      	cmp	r4, #0
 8005ef2:	d1f7      	bne.n	8005ee4 <_fwalk_sglue+0xc>
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005efa:	89ab      	ldrh	r3, [r5, #12]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d907      	bls.n	8005f10 <_fwalk_sglue+0x38>
 8005f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f04:	3301      	adds	r3, #1
 8005f06:	d003      	beq.n	8005f10 <_fwalk_sglue+0x38>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	47c0      	blx	r8
 8005f0e:	4306      	orrs	r6, r0
 8005f10:	3568      	adds	r5, #104	@ 0x68
 8005f12:	e7e9      	b.n	8005ee8 <_fwalk_sglue+0x10>

08005f14 <iprintf>:
 8005f14:	b40f      	push	{r0, r1, r2, r3}
 8005f16:	b507      	push	{r0, r1, r2, lr}
 8005f18:	4906      	ldr	r1, [pc, #24]	@ (8005f34 <iprintf+0x20>)
 8005f1a:	ab04      	add	r3, sp, #16
 8005f1c:	6808      	ldr	r0, [r1, #0]
 8005f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f22:	6881      	ldr	r1, [r0, #8]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	f000 fc71 	bl	800680c <_vfiprintf_r>
 8005f2a:	b003      	add	sp, #12
 8005f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f30:	b004      	add	sp, #16
 8005f32:	4770      	bx	lr
 8005f34:	20000018 	.word	0x20000018

08005f38 <putchar>:
 8005f38:	4b02      	ldr	r3, [pc, #8]	@ (8005f44 <putchar+0xc>)
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	6882      	ldr	r2, [r0, #8]
 8005f40:	f000 bf6a 	b.w	8006e18 <_putc_r>
 8005f44:	20000018 	.word	0x20000018

08005f48 <_puts_r>:
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	b570      	push	{r4, r5, r6, lr}
 8005f4c:	6884      	ldr	r4, [r0, #8]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	460e      	mov	r6, r1
 8005f52:	b90b      	cbnz	r3, 8005f58 <_puts_r+0x10>
 8005f54:	f7ff ffa8 	bl	8005ea8 <__sinit>
 8005f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f5a:	07db      	lsls	r3, r3, #31
 8005f5c:	d405      	bmi.n	8005f6a <_puts_r+0x22>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	0598      	lsls	r0, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_puts_r+0x22>
 8005f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f66:	f000 f9d4 	bl	8006312 <__retarget_lock_acquire_recursive>
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	0719      	lsls	r1, r3, #28
 8005f6e:	d502      	bpl.n	8005f76 <_puts_r+0x2e>
 8005f70:	6923      	ldr	r3, [r4, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d135      	bne.n	8005fe2 <_puts_r+0x9a>
 8005f76:	4621      	mov	r1, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 f8fb 	bl	8006174 <__swsetup_r>
 8005f7e:	b380      	cbz	r0, 8005fe2 <_puts_r+0x9a>
 8005f80:	f04f 35ff 	mov.w	r5, #4294967295
 8005f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f86:	07da      	lsls	r2, r3, #31
 8005f88:	d405      	bmi.n	8005f96 <_puts_r+0x4e>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_puts_r+0x4e>
 8005f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f92:	f000 f9bf 	bl	8006314 <__retarget_lock_release_recursive>
 8005f96:	4628      	mov	r0, r5
 8005f98:	bd70      	pop	{r4, r5, r6, pc}
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da04      	bge.n	8005fa8 <_puts_r+0x60>
 8005f9e:	69a2      	ldr	r2, [r4, #24]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	dc17      	bgt.n	8005fd4 <_puts_r+0x8c>
 8005fa4:	290a      	cmp	r1, #10
 8005fa6:	d015      	beq.n	8005fd4 <_puts_r+0x8c>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	7019      	strb	r1, [r3, #0]
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	60a3      	str	r3, [r4, #8]
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d1ed      	bne.n	8005f9a <_puts_r+0x52>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da11      	bge.n	8005fe6 <_puts_r+0x9e>
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	210a      	movs	r1, #10
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 f895 	bl	80060f6 <__swbuf_r>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d0d7      	beq.n	8005f80 <_puts_r+0x38>
 8005fd0:	250a      	movs	r5, #10
 8005fd2:	e7d7      	b.n	8005f84 <_puts_r+0x3c>
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 f88d 	bl	80060f6 <__swbuf_r>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d1e7      	bne.n	8005fb0 <_puts_r+0x68>
 8005fe0:	e7ce      	b.n	8005f80 <_puts_r+0x38>
 8005fe2:	3e01      	subs	r6, #1
 8005fe4:	e7e4      	b.n	8005fb0 <_puts_r+0x68>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	220a      	movs	r2, #10
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	e7ee      	b.n	8005fd0 <_puts_r+0x88>
	...

08005ff4 <puts>:
 8005ff4:	4b02      	ldr	r3, [pc, #8]	@ (8006000 <puts+0xc>)
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	f7ff bfa5 	b.w	8005f48 <_puts_r>
 8005ffe:	bf00      	nop
 8006000:	20000018 	.word	0x20000018

08006004 <sniprintf>:
 8006004:	b40c      	push	{r2, r3}
 8006006:	b530      	push	{r4, r5, lr}
 8006008:	4b18      	ldr	r3, [pc, #96]	@ (800606c <sniprintf+0x68>)
 800600a:	1e0c      	subs	r4, r1, #0
 800600c:	681d      	ldr	r5, [r3, #0]
 800600e:	b09d      	sub	sp, #116	@ 0x74
 8006010:	da08      	bge.n	8006024 <sniprintf+0x20>
 8006012:	238b      	movs	r3, #139	@ 0x8b
 8006014:	602b      	str	r3, [r5, #0]
 8006016:	f04f 30ff 	mov.w	r0, #4294967295
 800601a:	b01d      	add	sp, #116	@ 0x74
 800601c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006020:	b002      	add	sp, #8
 8006022:	4770      	bx	lr
 8006024:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006028:	f8ad 3014 	strh.w	r3, [sp, #20]
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006032:	bf14      	ite	ne
 8006034:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006038:	4623      	moveq	r3, r4
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006042:	9002      	str	r0, [sp, #8]
 8006044:	9006      	str	r0, [sp, #24]
 8006046:	f8ad 3016 	strh.w	r3, [sp, #22]
 800604a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800604c:	ab21      	add	r3, sp, #132	@ 0x84
 800604e:	a902      	add	r1, sp, #8
 8006050:	4628      	mov	r0, r5
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f000 fab4 	bl	80065c0 <_svfiprintf_r>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	bfbc      	itt	lt
 800605c:	238b      	movlt	r3, #139	@ 0x8b
 800605e:	602b      	strlt	r3, [r5, #0]
 8006060:	2c00      	cmp	r4, #0
 8006062:	d0da      	beq.n	800601a <sniprintf+0x16>
 8006064:	9b02      	ldr	r3, [sp, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e7d6      	b.n	800601a <sniprintf+0x16>
 800606c:	20000018 	.word	0x20000018

08006070 <__sread>:
 8006070:	b510      	push	{r4, lr}
 8006072:	460c      	mov	r4, r1
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	f000 f8fc 	bl	8006274 <_read_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	bfab      	itete	ge
 8006080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006082:	89a3      	ldrhlt	r3, [r4, #12]
 8006084:	181b      	addge	r3, r3, r0
 8006086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800608a:	bfac      	ite	ge
 800608c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800608e:	81a3      	strhlt	r3, [r4, #12]
 8006090:	bd10      	pop	{r4, pc}

08006092 <__swrite>:
 8006092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	461f      	mov	r7, r3
 8006098:	898b      	ldrh	r3, [r1, #12]
 800609a:	05db      	lsls	r3, r3, #23
 800609c:	4605      	mov	r5, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	4616      	mov	r6, r2
 80060a2:	d505      	bpl.n	80060b0 <__swrite+0x1e>
 80060a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a8:	2302      	movs	r3, #2
 80060aa:	2200      	movs	r2, #0
 80060ac:	f000 f8d0 	bl	8006250 <_lseek_r>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	4632      	mov	r2, r6
 80060be:	463b      	mov	r3, r7
 80060c0:	4628      	mov	r0, r5
 80060c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	f000 b8e7 	b.w	8006298 <_write_r>

080060ca <__sseek>:
 80060ca:	b510      	push	{r4, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d2:	f000 f8bd 	bl	8006250 <_lseek_r>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	bf15      	itete	ne
 80060dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060e6:	81a3      	strheq	r3, [r4, #12]
 80060e8:	bf18      	it	ne
 80060ea:	81a3      	strhne	r3, [r4, #12]
 80060ec:	bd10      	pop	{r4, pc}

080060ee <__sclose>:
 80060ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f2:	f000 b89d 	b.w	8006230 <_close_r>

080060f6 <__swbuf_r>:
 80060f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f8:	460e      	mov	r6, r1
 80060fa:	4614      	mov	r4, r2
 80060fc:	4605      	mov	r5, r0
 80060fe:	b118      	cbz	r0, 8006108 <__swbuf_r+0x12>
 8006100:	6a03      	ldr	r3, [r0, #32]
 8006102:	b90b      	cbnz	r3, 8006108 <__swbuf_r+0x12>
 8006104:	f7ff fed0 	bl	8005ea8 <__sinit>
 8006108:	69a3      	ldr	r3, [r4, #24]
 800610a:	60a3      	str	r3, [r4, #8]
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	071a      	lsls	r2, r3, #28
 8006110:	d501      	bpl.n	8006116 <__swbuf_r+0x20>
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	b943      	cbnz	r3, 8006128 <__swbuf_r+0x32>
 8006116:	4621      	mov	r1, r4
 8006118:	4628      	mov	r0, r5
 800611a:	f000 f82b 	bl	8006174 <__swsetup_r>
 800611e:	b118      	cbz	r0, 8006128 <__swbuf_r+0x32>
 8006120:	f04f 37ff 	mov.w	r7, #4294967295
 8006124:	4638      	mov	r0, r7
 8006126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	6922      	ldr	r2, [r4, #16]
 800612c:	1a98      	subs	r0, r3, r2
 800612e:	6963      	ldr	r3, [r4, #20]
 8006130:	b2f6      	uxtb	r6, r6
 8006132:	4283      	cmp	r3, r0
 8006134:	4637      	mov	r7, r6
 8006136:	dc05      	bgt.n	8006144 <__swbuf_r+0x4e>
 8006138:	4621      	mov	r1, r4
 800613a:	4628      	mov	r0, r5
 800613c:	f7ff fdec 	bl	8005d18 <_fflush_r>
 8006140:	2800      	cmp	r0, #0
 8006142:	d1ed      	bne.n	8006120 <__swbuf_r+0x2a>
 8006144:	68a3      	ldr	r3, [r4, #8]
 8006146:	3b01      	subs	r3, #1
 8006148:	60a3      	str	r3, [r4, #8]
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	701e      	strb	r6, [r3, #0]
 8006152:	6962      	ldr	r2, [r4, #20]
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	429a      	cmp	r2, r3
 8006158:	d004      	beq.n	8006164 <__swbuf_r+0x6e>
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	07db      	lsls	r3, r3, #31
 800615e:	d5e1      	bpl.n	8006124 <__swbuf_r+0x2e>
 8006160:	2e0a      	cmp	r6, #10
 8006162:	d1df      	bne.n	8006124 <__swbuf_r+0x2e>
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f7ff fdd6 	bl	8005d18 <_fflush_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	d0d9      	beq.n	8006124 <__swbuf_r+0x2e>
 8006170:	e7d6      	b.n	8006120 <__swbuf_r+0x2a>
	...

08006174 <__swsetup_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4b29      	ldr	r3, [pc, #164]	@ (800621c <__swsetup_r+0xa8>)
 8006178:	4605      	mov	r5, r0
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	460c      	mov	r4, r1
 800617e:	b118      	cbz	r0, 8006188 <__swsetup_r+0x14>
 8006180:	6a03      	ldr	r3, [r0, #32]
 8006182:	b90b      	cbnz	r3, 8006188 <__swsetup_r+0x14>
 8006184:	f7ff fe90 	bl	8005ea8 <__sinit>
 8006188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618c:	0719      	lsls	r1, r3, #28
 800618e:	d422      	bmi.n	80061d6 <__swsetup_r+0x62>
 8006190:	06da      	lsls	r2, r3, #27
 8006192:	d407      	bmi.n	80061a4 <__swsetup_r+0x30>
 8006194:	2209      	movs	r2, #9
 8006196:	602a      	str	r2, [r5, #0]
 8006198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800619c:	81a3      	strh	r3, [r4, #12]
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	e033      	b.n	800620c <__swsetup_r+0x98>
 80061a4:	0758      	lsls	r0, r3, #29
 80061a6:	d512      	bpl.n	80061ce <__swsetup_r+0x5a>
 80061a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061aa:	b141      	cbz	r1, 80061be <__swsetup_r+0x4a>
 80061ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061b0:	4299      	cmp	r1, r3
 80061b2:	d002      	beq.n	80061ba <__swsetup_r+0x46>
 80061b4:	4628      	mov	r0, r5
 80061b6:	f000 f8af 	bl	8006318 <_free_r>
 80061ba:	2300      	movs	r3, #0
 80061bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061c4:	81a3      	strh	r3, [r4, #12]
 80061c6:	2300      	movs	r3, #0
 80061c8:	6063      	str	r3, [r4, #4]
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	f043 0308 	orr.w	r3, r3, #8
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	b94b      	cbnz	r3, 80061ee <__swsetup_r+0x7a>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e4:	d003      	beq.n	80061ee <__swsetup_r+0x7a>
 80061e6:	4621      	mov	r1, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 fdd9 	bl	8006da0 <__smakebuf_r>
 80061ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f2:	f013 0201 	ands.w	r2, r3, #1
 80061f6:	d00a      	beq.n	800620e <__swsetup_r+0x9a>
 80061f8:	2200      	movs	r2, #0
 80061fa:	60a2      	str	r2, [r4, #8]
 80061fc:	6962      	ldr	r2, [r4, #20]
 80061fe:	4252      	negs	r2, r2
 8006200:	61a2      	str	r2, [r4, #24]
 8006202:	6922      	ldr	r2, [r4, #16]
 8006204:	b942      	cbnz	r2, 8006218 <__swsetup_r+0xa4>
 8006206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800620a:	d1c5      	bne.n	8006198 <__swsetup_r+0x24>
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	0799      	lsls	r1, r3, #30
 8006210:	bf58      	it	pl
 8006212:	6962      	ldrpl	r2, [r4, #20]
 8006214:	60a2      	str	r2, [r4, #8]
 8006216:	e7f4      	b.n	8006202 <__swsetup_r+0x8e>
 8006218:	2000      	movs	r0, #0
 800621a:	e7f7      	b.n	800620c <__swsetup_r+0x98>
 800621c:	20000018 	.word	0x20000018

08006220 <memset>:
 8006220:	4402      	add	r2, r0
 8006222:	4603      	mov	r3, r0
 8006224:	4293      	cmp	r3, r2
 8006226:	d100      	bne.n	800622a <memset+0xa>
 8006228:	4770      	bx	lr
 800622a:	f803 1b01 	strb.w	r1, [r3], #1
 800622e:	e7f9      	b.n	8006224 <memset+0x4>

08006230 <_close_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d06      	ldr	r5, [pc, #24]	@ (800624c <_close_r+0x1c>)
 8006234:	2300      	movs	r3, #0
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	f7fb f8d7 	bl	80013ee <_close>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_close_r+0x1a>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_close_r+0x1a>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	200007c8 	.word	0x200007c8

08006250 <_lseek_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d07      	ldr	r5, [pc, #28]	@ (8006270 <_lseek_r+0x20>)
 8006254:	4604      	mov	r4, r0
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	2200      	movs	r2, #0
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fb f8ec 	bl	800143c <_lseek>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_lseek_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_lseek_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	200007c8 	.word	0x200007c8

08006274 <_read_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d07      	ldr	r5, [pc, #28]	@ (8006294 <_read_r+0x20>)
 8006278:	4604      	mov	r4, r0
 800627a:	4608      	mov	r0, r1
 800627c:	4611      	mov	r1, r2
 800627e:	2200      	movs	r2, #0
 8006280:	602a      	str	r2, [r5, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	f7fb f87a 	bl	800137c <_read>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_read_r+0x1e>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_read_r+0x1e>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	200007c8 	.word	0x200007c8

08006298 <_write_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d07      	ldr	r5, [pc, #28]	@ (80062b8 <_write_r+0x20>)
 800629c:	4604      	mov	r4, r0
 800629e:	4608      	mov	r0, r1
 80062a0:	4611      	mov	r1, r2
 80062a2:	2200      	movs	r2, #0
 80062a4:	602a      	str	r2, [r5, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f7fb f885 	bl	80013b6 <_write>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_write_r+0x1e>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_write_r+0x1e>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	200007c8 	.word	0x200007c8

080062bc <__errno>:
 80062bc:	4b01      	ldr	r3, [pc, #4]	@ (80062c4 <__errno+0x8>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000018 	.word	0x20000018

080062c8 <__libc_init_array>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006300 <__libc_init_array+0x38>)
 80062cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006304 <__libc_init_array+0x3c>)
 80062ce:	1b64      	subs	r4, r4, r5
 80062d0:	10a4      	asrs	r4, r4, #2
 80062d2:	2600      	movs	r6, #0
 80062d4:	42a6      	cmp	r6, r4
 80062d6:	d109      	bne.n	80062ec <__libc_init_array+0x24>
 80062d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006308 <__libc_init_array+0x40>)
 80062da:	4c0c      	ldr	r4, [pc, #48]	@ (800630c <__libc_init_array+0x44>)
 80062dc:	f000 fe60 	bl	8006fa0 <_init>
 80062e0:	1b64      	subs	r4, r4, r5
 80062e2:	10a4      	asrs	r4, r4, #2
 80062e4:	2600      	movs	r6, #0
 80062e6:	42a6      	cmp	r6, r4
 80062e8:	d105      	bne.n	80062f6 <__libc_init_array+0x2e>
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f0:	4798      	blx	r3
 80062f2:	3601      	adds	r6, #1
 80062f4:	e7ee      	b.n	80062d4 <__libc_init_array+0xc>
 80062f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fa:	4798      	blx	r3
 80062fc:	3601      	adds	r6, #1
 80062fe:	e7f2      	b.n	80062e6 <__libc_init_array+0x1e>
 8006300:	08007d2c 	.word	0x08007d2c
 8006304:	08007d2c 	.word	0x08007d2c
 8006308:	08007d2c 	.word	0x08007d2c
 800630c:	08007d30 	.word	0x08007d30

08006310 <__retarget_lock_init_recursive>:
 8006310:	4770      	bx	lr

08006312 <__retarget_lock_acquire_recursive>:
 8006312:	4770      	bx	lr

08006314 <__retarget_lock_release_recursive>:
 8006314:	4770      	bx	lr
	...

08006318 <_free_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4605      	mov	r5, r0
 800631c:	2900      	cmp	r1, #0
 800631e:	d041      	beq.n	80063a4 <_free_r+0x8c>
 8006320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006324:	1f0c      	subs	r4, r1, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	bfb8      	it	lt
 800632a:	18e4      	addlt	r4, r4, r3
 800632c:	f000 f8e0 	bl	80064f0 <__malloc_lock>
 8006330:	4a1d      	ldr	r2, [pc, #116]	@ (80063a8 <_free_r+0x90>)
 8006332:	6813      	ldr	r3, [r2, #0]
 8006334:	b933      	cbnz	r3, 8006344 <_free_r+0x2c>
 8006336:	6063      	str	r3, [r4, #4]
 8006338:	6014      	str	r4, [r2, #0]
 800633a:	4628      	mov	r0, r5
 800633c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006340:	f000 b8dc 	b.w	80064fc <__malloc_unlock>
 8006344:	42a3      	cmp	r3, r4
 8006346:	d908      	bls.n	800635a <_free_r+0x42>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	1821      	adds	r1, r4, r0
 800634c:	428b      	cmp	r3, r1
 800634e:	bf01      	itttt	eq
 8006350:	6819      	ldreq	r1, [r3, #0]
 8006352:	685b      	ldreq	r3, [r3, #4]
 8006354:	1809      	addeq	r1, r1, r0
 8006356:	6021      	streq	r1, [r4, #0]
 8006358:	e7ed      	b.n	8006336 <_free_r+0x1e>
 800635a:	461a      	mov	r2, r3
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	b10b      	cbz	r3, 8006364 <_free_r+0x4c>
 8006360:	42a3      	cmp	r3, r4
 8006362:	d9fa      	bls.n	800635a <_free_r+0x42>
 8006364:	6811      	ldr	r1, [r2, #0]
 8006366:	1850      	adds	r0, r2, r1
 8006368:	42a0      	cmp	r0, r4
 800636a:	d10b      	bne.n	8006384 <_free_r+0x6c>
 800636c:	6820      	ldr	r0, [r4, #0]
 800636e:	4401      	add	r1, r0
 8006370:	1850      	adds	r0, r2, r1
 8006372:	4283      	cmp	r3, r0
 8006374:	6011      	str	r1, [r2, #0]
 8006376:	d1e0      	bne.n	800633a <_free_r+0x22>
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	6053      	str	r3, [r2, #4]
 800637e:	4408      	add	r0, r1
 8006380:	6010      	str	r0, [r2, #0]
 8006382:	e7da      	b.n	800633a <_free_r+0x22>
 8006384:	d902      	bls.n	800638c <_free_r+0x74>
 8006386:	230c      	movs	r3, #12
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	e7d6      	b.n	800633a <_free_r+0x22>
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	1821      	adds	r1, r4, r0
 8006390:	428b      	cmp	r3, r1
 8006392:	bf04      	itt	eq
 8006394:	6819      	ldreq	r1, [r3, #0]
 8006396:	685b      	ldreq	r3, [r3, #4]
 8006398:	6063      	str	r3, [r4, #4]
 800639a:	bf04      	itt	eq
 800639c:	1809      	addeq	r1, r1, r0
 800639e:	6021      	streq	r1, [r4, #0]
 80063a0:	6054      	str	r4, [r2, #4]
 80063a2:	e7ca      	b.n	800633a <_free_r+0x22>
 80063a4:	bd38      	pop	{r3, r4, r5, pc}
 80063a6:	bf00      	nop
 80063a8:	200007d4 	.word	0x200007d4

080063ac <sbrk_aligned>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	4e0f      	ldr	r6, [pc, #60]	@ (80063ec <sbrk_aligned+0x40>)
 80063b0:	460c      	mov	r4, r1
 80063b2:	6831      	ldr	r1, [r6, #0]
 80063b4:	4605      	mov	r5, r0
 80063b6:	b911      	cbnz	r1, 80063be <sbrk_aligned+0x12>
 80063b8:	f000 fd9e 	bl	8006ef8 <_sbrk_r>
 80063bc:	6030      	str	r0, [r6, #0]
 80063be:	4621      	mov	r1, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	f000 fd99 	bl	8006ef8 <_sbrk_r>
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	d103      	bne.n	80063d2 <sbrk_aligned+0x26>
 80063ca:	f04f 34ff 	mov.w	r4, #4294967295
 80063ce:	4620      	mov	r0, r4
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
 80063d2:	1cc4      	adds	r4, r0, #3
 80063d4:	f024 0403 	bic.w	r4, r4, #3
 80063d8:	42a0      	cmp	r0, r4
 80063da:	d0f8      	beq.n	80063ce <sbrk_aligned+0x22>
 80063dc:	1a21      	subs	r1, r4, r0
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 fd8a 	bl	8006ef8 <_sbrk_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d1f2      	bne.n	80063ce <sbrk_aligned+0x22>
 80063e8:	e7ef      	b.n	80063ca <sbrk_aligned+0x1e>
 80063ea:	bf00      	nop
 80063ec:	200007d0 	.word	0x200007d0

080063f0 <_malloc_r>:
 80063f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f4:	1ccd      	adds	r5, r1, #3
 80063f6:	f025 0503 	bic.w	r5, r5, #3
 80063fa:	3508      	adds	r5, #8
 80063fc:	2d0c      	cmp	r5, #12
 80063fe:	bf38      	it	cc
 8006400:	250c      	movcc	r5, #12
 8006402:	2d00      	cmp	r5, #0
 8006404:	4606      	mov	r6, r0
 8006406:	db01      	blt.n	800640c <_malloc_r+0x1c>
 8006408:	42a9      	cmp	r1, r5
 800640a:	d904      	bls.n	8006416 <_malloc_r+0x26>
 800640c:	230c      	movs	r3, #12
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	2000      	movs	r0, #0
 8006412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064ec <_malloc_r+0xfc>
 800641a:	f000 f869 	bl	80064f0 <__malloc_lock>
 800641e:	f8d8 3000 	ldr.w	r3, [r8]
 8006422:	461c      	mov	r4, r3
 8006424:	bb44      	cbnz	r4, 8006478 <_malloc_r+0x88>
 8006426:	4629      	mov	r1, r5
 8006428:	4630      	mov	r0, r6
 800642a:	f7ff ffbf 	bl	80063ac <sbrk_aligned>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	4604      	mov	r4, r0
 8006432:	d158      	bne.n	80064e6 <_malloc_r+0xf6>
 8006434:	f8d8 4000 	ldr.w	r4, [r8]
 8006438:	4627      	mov	r7, r4
 800643a:	2f00      	cmp	r7, #0
 800643c:	d143      	bne.n	80064c6 <_malloc_r+0xd6>
 800643e:	2c00      	cmp	r4, #0
 8006440:	d04b      	beq.n	80064da <_malloc_r+0xea>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	4639      	mov	r1, r7
 8006446:	4630      	mov	r0, r6
 8006448:	eb04 0903 	add.w	r9, r4, r3
 800644c:	f000 fd54 	bl	8006ef8 <_sbrk_r>
 8006450:	4581      	cmp	r9, r0
 8006452:	d142      	bne.n	80064da <_malloc_r+0xea>
 8006454:	6821      	ldr	r1, [r4, #0]
 8006456:	1a6d      	subs	r5, r5, r1
 8006458:	4629      	mov	r1, r5
 800645a:	4630      	mov	r0, r6
 800645c:	f7ff ffa6 	bl	80063ac <sbrk_aligned>
 8006460:	3001      	adds	r0, #1
 8006462:	d03a      	beq.n	80064da <_malloc_r+0xea>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	442b      	add	r3, r5
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	f8d8 3000 	ldr.w	r3, [r8]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	bb62      	cbnz	r2, 80064cc <_malloc_r+0xdc>
 8006472:	f8c8 7000 	str.w	r7, [r8]
 8006476:	e00f      	b.n	8006498 <_malloc_r+0xa8>
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	1b52      	subs	r2, r2, r5
 800647c:	d420      	bmi.n	80064c0 <_malloc_r+0xd0>
 800647e:	2a0b      	cmp	r2, #11
 8006480:	d917      	bls.n	80064b2 <_malloc_r+0xc2>
 8006482:	1961      	adds	r1, r4, r5
 8006484:	42a3      	cmp	r3, r4
 8006486:	6025      	str	r5, [r4, #0]
 8006488:	bf18      	it	ne
 800648a:	6059      	strne	r1, [r3, #4]
 800648c:	6863      	ldr	r3, [r4, #4]
 800648e:	bf08      	it	eq
 8006490:	f8c8 1000 	streq.w	r1, [r8]
 8006494:	5162      	str	r2, [r4, r5]
 8006496:	604b      	str	r3, [r1, #4]
 8006498:	4630      	mov	r0, r6
 800649a:	f000 f82f 	bl	80064fc <__malloc_unlock>
 800649e:	f104 000b 	add.w	r0, r4, #11
 80064a2:	1d23      	adds	r3, r4, #4
 80064a4:	f020 0007 	bic.w	r0, r0, #7
 80064a8:	1ac2      	subs	r2, r0, r3
 80064aa:	bf1c      	itt	ne
 80064ac:	1a1b      	subne	r3, r3, r0
 80064ae:	50a3      	strne	r3, [r4, r2]
 80064b0:	e7af      	b.n	8006412 <_malloc_r+0x22>
 80064b2:	6862      	ldr	r2, [r4, #4]
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	bf0c      	ite	eq
 80064b8:	f8c8 2000 	streq.w	r2, [r8]
 80064bc:	605a      	strne	r2, [r3, #4]
 80064be:	e7eb      	b.n	8006498 <_malloc_r+0xa8>
 80064c0:	4623      	mov	r3, r4
 80064c2:	6864      	ldr	r4, [r4, #4]
 80064c4:	e7ae      	b.n	8006424 <_malloc_r+0x34>
 80064c6:	463c      	mov	r4, r7
 80064c8:	687f      	ldr	r7, [r7, #4]
 80064ca:	e7b6      	b.n	800643a <_malloc_r+0x4a>
 80064cc:	461a      	mov	r2, r3
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d1fb      	bne.n	80064cc <_malloc_r+0xdc>
 80064d4:	2300      	movs	r3, #0
 80064d6:	6053      	str	r3, [r2, #4]
 80064d8:	e7de      	b.n	8006498 <_malloc_r+0xa8>
 80064da:	230c      	movs	r3, #12
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	4630      	mov	r0, r6
 80064e0:	f000 f80c 	bl	80064fc <__malloc_unlock>
 80064e4:	e794      	b.n	8006410 <_malloc_r+0x20>
 80064e6:	6005      	str	r5, [r0, #0]
 80064e8:	e7d6      	b.n	8006498 <_malloc_r+0xa8>
 80064ea:	bf00      	nop
 80064ec:	200007d4 	.word	0x200007d4

080064f0 <__malloc_lock>:
 80064f0:	4801      	ldr	r0, [pc, #4]	@ (80064f8 <__malloc_lock+0x8>)
 80064f2:	f7ff bf0e 	b.w	8006312 <__retarget_lock_acquire_recursive>
 80064f6:	bf00      	nop
 80064f8:	200007cc 	.word	0x200007cc

080064fc <__malloc_unlock>:
 80064fc:	4801      	ldr	r0, [pc, #4]	@ (8006504 <__malloc_unlock+0x8>)
 80064fe:	f7ff bf09 	b.w	8006314 <__retarget_lock_release_recursive>
 8006502:	bf00      	nop
 8006504:	200007cc 	.word	0x200007cc

08006508 <__ssputs_r>:
 8006508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800650c:	688e      	ldr	r6, [r1, #8]
 800650e:	461f      	mov	r7, r3
 8006510:	42be      	cmp	r6, r7
 8006512:	680b      	ldr	r3, [r1, #0]
 8006514:	4682      	mov	sl, r0
 8006516:	460c      	mov	r4, r1
 8006518:	4690      	mov	r8, r2
 800651a:	d82d      	bhi.n	8006578 <__ssputs_r+0x70>
 800651c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006520:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006524:	d026      	beq.n	8006574 <__ssputs_r+0x6c>
 8006526:	6965      	ldr	r5, [r4, #20]
 8006528:	6909      	ldr	r1, [r1, #16]
 800652a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800652e:	eba3 0901 	sub.w	r9, r3, r1
 8006532:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006536:	1c7b      	adds	r3, r7, #1
 8006538:	444b      	add	r3, r9
 800653a:	106d      	asrs	r5, r5, #1
 800653c:	429d      	cmp	r5, r3
 800653e:	bf38      	it	cc
 8006540:	461d      	movcc	r5, r3
 8006542:	0553      	lsls	r3, r2, #21
 8006544:	d527      	bpl.n	8006596 <__ssputs_r+0x8e>
 8006546:	4629      	mov	r1, r5
 8006548:	f7ff ff52 	bl	80063f0 <_malloc_r>
 800654c:	4606      	mov	r6, r0
 800654e:	b360      	cbz	r0, 80065aa <__ssputs_r+0xa2>
 8006550:	6921      	ldr	r1, [r4, #16]
 8006552:	464a      	mov	r2, r9
 8006554:	f000 fce0 	bl	8006f18 <memcpy>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800655e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006562:	81a3      	strh	r3, [r4, #12]
 8006564:	6126      	str	r6, [r4, #16]
 8006566:	6165      	str	r5, [r4, #20]
 8006568:	444e      	add	r6, r9
 800656a:	eba5 0509 	sub.w	r5, r5, r9
 800656e:	6026      	str	r6, [r4, #0]
 8006570:	60a5      	str	r5, [r4, #8]
 8006572:	463e      	mov	r6, r7
 8006574:	42be      	cmp	r6, r7
 8006576:	d900      	bls.n	800657a <__ssputs_r+0x72>
 8006578:	463e      	mov	r6, r7
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	4632      	mov	r2, r6
 800657e:	4641      	mov	r1, r8
 8006580:	f000 fc7e 	bl	8006e80 <memmove>
 8006584:	68a3      	ldr	r3, [r4, #8]
 8006586:	1b9b      	subs	r3, r3, r6
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	4433      	add	r3, r6
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	2000      	movs	r0, #0
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	462a      	mov	r2, r5
 8006598:	f000 fccc 	bl	8006f34 <_realloc_r>
 800659c:	4606      	mov	r6, r0
 800659e:	2800      	cmp	r0, #0
 80065a0:	d1e0      	bne.n	8006564 <__ssputs_r+0x5c>
 80065a2:	6921      	ldr	r1, [r4, #16]
 80065a4:	4650      	mov	r0, sl
 80065a6:	f7ff feb7 	bl	8006318 <_free_r>
 80065aa:	230c      	movs	r3, #12
 80065ac:	f8ca 3000 	str.w	r3, [sl]
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b6:	81a3      	strh	r3, [r4, #12]
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	e7e9      	b.n	8006592 <__ssputs_r+0x8a>
	...

080065c0 <_svfiprintf_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	4698      	mov	r8, r3
 80065c6:	898b      	ldrh	r3, [r1, #12]
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	b09d      	sub	sp, #116	@ 0x74
 80065cc:	4607      	mov	r7, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	d510      	bpl.n	80065f6 <_svfiprintf_r+0x36>
 80065d4:	690b      	ldr	r3, [r1, #16]
 80065d6:	b973      	cbnz	r3, 80065f6 <_svfiprintf_r+0x36>
 80065d8:	2140      	movs	r1, #64	@ 0x40
 80065da:	f7ff ff09 	bl	80063f0 <_malloc_r>
 80065de:	6028      	str	r0, [r5, #0]
 80065e0:	6128      	str	r0, [r5, #16]
 80065e2:	b930      	cbnz	r0, 80065f2 <_svfiprintf_r+0x32>
 80065e4:	230c      	movs	r3, #12
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	b01d      	add	sp, #116	@ 0x74
 80065ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f2:	2340      	movs	r3, #64	@ 0x40
 80065f4:	616b      	str	r3, [r5, #20]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80065fa:	2320      	movs	r3, #32
 80065fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006600:	f8cd 800c 	str.w	r8, [sp, #12]
 8006604:	2330      	movs	r3, #48	@ 0x30
 8006606:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067a4 <_svfiprintf_r+0x1e4>
 800660a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800660e:	f04f 0901 	mov.w	r9, #1
 8006612:	4623      	mov	r3, r4
 8006614:	469a      	mov	sl, r3
 8006616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800661a:	b10a      	cbz	r2, 8006620 <_svfiprintf_r+0x60>
 800661c:	2a25      	cmp	r2, #37	@ 0x25
 800661e:	d1f9      	bne.n	8006614 <_svfiprintf_r+0x54>
 8006620:	ebba 0b04 	subs.w	fp, sl, r4
 8006624:	d00b      	beq.n	800663e <_svfiprintf_r+0x7e>
 8006626:	465b      	mov	r3, fp
 8006628:	4622      	mov	r2, r4
 800662a:	4629      	mov	r1, r5
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff ff6b 	bl	8006508 <__ssputs_r>
 8006632:	3001      	adds	r0, #1
 8006634:	f000 80a7 	beq.w	8006786 <_svfiprintf_r+0x1c6>
 8006638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800663a:	445a      	add	r2, fp
 800663c:	9209      	str	r2, [sp, #36]	@ 0x24
 800663e:	f89a 3000 	ldrb.w	r3, [sl]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 809f 	beq.w	8006786 <_svfiprintf_r+0x1c6>
 8006648:	2300      	movs	r3, #0
 800664a:	f04f 32ff 	mov.w	r2, #4294967295
 800664e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006652:	f10a 0a01 	add.w	sl, sl, #1
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800665e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006660:	4654      	mov	r4, sl
 8006662:	2205      	movs	r2, #5
 8006664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006668:	484e      	ldr	r0, [pc, #312]	@ (80067a4 <_svfiprintf_r+0x1e4>)
 800666a:	f7f9 fdc1 	bl	80001f0 <memchr>
 800666e:	9a04      	ldr	r2, [sp, #16]
 8006670:	b9d8      	cbnz	r0, 80066aa <_svfiprintf_r+0xea>
 8006672:	06d0      	lsls	r0, r2, #27
 8006674:	bf44      	itt	mi
 8006676:	2320      	movmi	r3, #32
 8006678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800667c:	0711      	lsls	r1, r2, #28
 800667e:	bf44      	itt	mi
 8006680:	232b      	movmi	r3, #43	@ 0x2b
 8006682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006686:	f89a 3000 	ldrb.w	r3, [sl]
 800668a:	2b2a      	cmp	r3, #42	@ 0x2a
 800668c:	d015      	beq.n	80066ba <_svfiprintf_r+0xfa>
 800668e:	9a07      	ldr	r2, [sp, #28]
 8006690:	4654      	mov	r4, sl
 8006692:	2000      	movs	r0, #0
 8006694:	f04f 0c0a 	mov.w	ip, #10
 8006698:	4621      	mov	r1, r4
 800669a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800669e:	3b30      	subs	r3, #48	@ 0x30
 80066a0:	2b09      	cmp	r3, #9
 80066a2:	d94b      	bls.n	800673c <_svfiprintf_r+0x17c>
 80066a4:	b1b0      	cbz	r0, 80066d4 <_svfiprintf_r+0x114>
 80066a6:	9207      	str	r2, [sp, #28]
 80066a8:	e014      	b.n	80066d4 <_svfiprintf_r+0x114>
 80066aa:	eba0 0308 	sub.w	r3, r0, r8
 80066ae:	fa09 f303 	lsl.w	r3, r9, r3
 80066b2:	4313      	orrs	r3, r2
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	46a2      	mov	sl, r4
 80066b8:	e7d2      	b.n	8006660 <_svfiprintf_r+0xa0>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	1d19      	adds	r1, r3, #4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	9103      	str	r1, [sp, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bfbb      	ittet	lt
 80066c6:	425b      	neglt	r3, r3
 80066c8:	f042 0202 	orrlt.w	r2, r2, #2
 80066cc:	9307      	strge	r3, [sp, #28]
 80066ce:	9307      	strlt	r3, [sp, #28]
 80066d0:	bfb8      	it	lt
 80066d2:	9204      	strlt	r2, [sp, #16]
 80066d4:	7823      	ldrb	r3, [r4, #0]
 80066d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80066d8:	d10a      	bne.n	80066f0 <_svfiprintf_r+0x130>
 80066da:	7863      	ldrb	r3, [r4, #1]
 80066dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80066de:	d132      	bne.n	8006746 <_svfiprintf_r+0x186>
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	1d1a      	adds	r2, r3, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	9203      	str	r2, [sp, #12]
 80066e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066ec:	3402      	adds	r4, #2
 80066ee:	9305      	str	r3, [sp, #20]
 80066f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067b4 <_svfiprintf_r+0x1f4>
 80066f4:	7821      	ldrb	r1, [r4, #0]
 80066f6:	2203      	movs	r2, #3
 80066f8:	4650      	mov	r0, sl
 80066fa:	f7f9 fd79 	bl	80001f0 <memchr>
 80066fe:	b138      	cbz	r0, 8006710 <_svfiprintf_r+0x150>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	eba0 000a 	sub.w	r0, r0, sl
 8006706:	2240      	movs	r2, #64	@ 0x40
 8006708:	4082      	lsls	r2, r0
 800670a:	4313      	orrs	r3, r2
 800670c:	3401      	adds	r4, #1
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006714:	4824      	ldr	r0, [pc, #144]	@ (80067a8 <_svfiprintf_r+0x1e8>)
 8006716:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800671a:	2206      	movs	r2, #6
 800671c:	f7f9 fd68 	bl	80001f0 <memchr>
 8006720:	2800      	cmp	r0, #0
 8006722:	d036      	beq.n	8006792 <_svfiprintf_r+0x1d2>
 8006724:	4b21      	ldr	r3, [pc, #132]	@ (80067ac <_svfiprintf_r+0x1ec>)
 8006726:	bb1b      	cbnz	r3, 8006770 <_svfiprintf_r+0x1b0>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	3307      	adds	r3, #7
 800672c:	f023 0307 	bic.w	r3, r3, #7
 8006730:	3308      	adds	r3, #8
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006736:	4433      	add	r3, r6
 8006738:	9309      	str	r3, [sp, #36]	@ 0x24
 800673a:	e76a      	b.n	8006612 <_svfiprintf_r+0x52>
 800673c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006740:	460c      	mov	r4, r1
 8006742:	2001      	movs	r0, #1
 8006744:	e7a8      	b.n	8006698 <_svfiprintf_r+0xd8>
 8006746:	2300      	movs	r3, #0
 8006748:	3401      	adds	r4, #1
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	4619      	mov	r1, r3
 800674e:	f04f 0c0a 	mov.w	ip, #10
 8006752:	4620      	mov	r0, r4
 8006754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006758:	3a30      	subs	r2, #48	@ 0x30
 800675a:	2a09      	cmp	r2, #9
 800675c:	d903      	bls.n	8006766 <_svfiprintf_r+0x1a6>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0c6      	beq.n	80066f0 <_svfiprintf_r+0x130>
 8006762:	9105      	str	r1, [sp, #20]
 8006764:	e7c4      	b.n	80066f0 <_svfiprintf_r+0x130>
 8006766:	fb0c 2101 	mla	r1, ip, r1, r2
 800676a:	4604      	mov	r4, r0
 800676c:	2301      	movs	r3, #1
 800676e:	e7f0      	b.n	8006752 <_svfiprintf_r+0x192>
 8006770:	ab03      	add	r3, sp, #12
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	462a      	mov	r2, r5
 8006776:	4b0e      	ldr	r3, [pc, #56]	@ (80067b0 <_svfiprintf_r+0x1f0>)
 8006778:	a904      	add	r1, sp, #16
 800677a:	4638      	mov	r0, r7
 800677c:	f3af 8000 	nop.w
 8006780:	1c42      	adds	r2, r0, #1
 8006782:	4606      	mov	r6, r0
 8006784:	d1d6      	bne.n	8006734 <_svfiprintf_r+0x174>
 8006786:	89ab      	ldrh	r3, [r5, #12]
 8006788:	065b      	lsls	r3, r3, #25
 800678a:	f53f af2d 	bmi.w	80065e8 <_svfiprintf_r+0x28>
 800678e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006790:	e72c      	b.n	80065ec <_svfiprintf_r+0x2c>
 8006792:	ab03      	add	r3, sp, #12
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	462a      	mov	r2, r5
 8006798:	4b05      	ldr	r3, [pc, #20]	@ (80067b0 <_svfiprintf_r+0x1f0>)
 800679a:	a904      	add	r1, sp, #16
 800679c:	4638      	mov	r0, r7
 800679e:	f000 f9bb 	bl	8006b18 <_printf_i>
 80067a2:	e7ed      	b.n	8006780 <_svfiprintf_r+0x1c0>
 80067a4:	08007cf0 	.word	0x08007cf0
 80067a8:	08007cfa 	.word	0x08007cfa
 80067ac:	00000000 	.word	0x00000000
 80067b0:	08006509 	.word	0x08006509
 80067b4:	08007cf6 	.word	0x08007cf6

080067b8 <__sfputc_r>:
 80067b8:	6893      	ldr	r3, [r2, #8]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	b410      	push	{r4}
 80067c0:	6093      	str	r3, [r2, #8]
 80067c2:	da08      	bge.n	80067d6 <__sfputc_r+0x1e>
 80067c4:	6994      	ldr	r4, [r2, #24]
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	db01      	blt.n	80067ce <__sfputc_r+0x16>
 80067ca:	290a      	cmp	r1, #10
 80067cc:	d103      	bne.n	80067d6 <__sfputc_r+0x1e>
 80067ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067d2:	f7ff bc90 	b.w	80060f6 <__swbuf_r>
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	1c58      	adds	r0, r3, #1
 80067da:	6010      	str	r0, [r2, #0]
 80067dc:	7019      	strb	r1, [r3, #0]
 80067de:	4608      	mov	r0, r1
 80067e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <__sfputs_r>:
 80067e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	4614      	mov	r4, r2
 80067ee:	18d5      	adds	r5, r2, r3
 80067f0:	42ac      	cmp	r4, r5
 80067f2:	d101      	bne.n	80067f8 <__sfputs_r+0x12>
 80067f4:	2000      	movs	r0, #0
 80067f6:	e007      	b.n	8006808 <__sfputs_r+0x22>
 80067f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fc:	463a      	mov	r2, r7
 80067fe:	4630      	mov	r0, r6
 8006800:	f7ff ffda 	bl	80067b8 <__sfputc_r>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d1f3      	bne.n	80067f0 <__sfputs_r+0xa>
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800680c <_vfiprintf_r>:
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	460d      	mov	r5, r1
 8006812:	b09d      	sub	sp, #116	@ 0x74
 8006814:	4614      	mov	r4, r2
 8006816:	4698      	mov	r8, r3
 8006818:	4606      	mov	r6, r0
 800681a:	b118      	cbz	r0, 8006824 <_vfiprintf_r+0x18>
 800681c:	6a03      	ldr	r3, [r0, #32]
 800681e:	b90b      	cbnz	r3, 8006824 <_vfiprintf_r+0x18>
 8006820:	f7ff fb42 	bl	8005ea8 <__sinit>
 8006824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d405      	bmi.n	8006836 <_vfiprintf_r+0x2a>
 800682a:	89ab      	ldrh	r3, [r5, #12]
 800682c:	059a      	lsls	r2, r3, #22
 800682e:	d402      	bmi.n	8006836 <_vfiprintf_r+0x2a>
 8006830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006832:	f7ff fd6e 	bl	8006312 <__retarget_lock_acquire_recursive>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	071b      	lsls	r3, r3, #28
 800683a:	d501      	bpl.n	8006840 <_vfiprintf_r+0x34>
 800683c:	692b      	ldr	r3, [r5, #16]
 800683e:	b99b      	cbnz	r3, 8006868 <_vfiprintf_r+0x5c>
 8006840:	4629      	mov	r1, r5
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff fc96 	bl	8006174 <__swsetup_r>
 8006848:	b170      	cbz	r0, 8006868 <_vfiprintf_r+0x5c>
 800684a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800684c:	07dc      	lsls	r4, r3, #31
 800684e:	d504      	bpl.n	800685a <_vfiprintf_r+0x4e>
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	b01d      	add	sp, #116	@ 0x74
 8006856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	0598      	lsls	r0, r3, #22
 800685e:	d4f7      	bmi.n	8006850 <_vfiprintf_r+0x44>
 8006860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006862:	f7ff fd57 	bl	8006314 <__retarget_lock_release_recursive>
 8006866:	e7f3      	b.n	8006850 <_vfiprintf_r+0x44>
 8006868:	2300      	movs	r3, #0
 800686a:	9309      	str	r3, [sp, #36]	@ 0x24
 800686c:	2320      	movs	r3, #32
 800686e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006872:	f8cd 800c 	str.w	r8, [sp, #12]
 8006876:	2330      	movs	r3, #48	@ 0x30
 8006878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a28 <_vfiprintf_r+0x21c>
 800687c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006880:	f04f 0901 	mov.w	r9, #1
 8006884:	4623      	mov	r3, r4
 8006886:	469a      	mov	sl, r3
 8006888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688c:	b10a      	cbz	r2, 8006892 <_vfiprintf_r+0x86>
 800688e:	2a25      	cmp	r2, #37	@ 0x25
 8006890:	d1f9      	bne.n	8006886 <_vfiprintf_r+0x7a>
 8006892:	ebba 0b04 	subs.w	fp, sl, r4
 8006896:	d00b      	beq.n	80068b0 <_vfiprintf_r+0xa4>
 8006898:	465b      	mov	r3, fp
 800689a:	4622      	mov	r2, r4
 800689c:	4629      	mov	r1, r5
 800689e:	4630      	mov	r0, r6
 80068a0:	f7ff ffa1 	bl	80067e6 <__sfputs_r>
 80068a4:	3001      	adds	r0, #1
 80068a6:	f000 80a7 	beq.w	80069f8 <_vfiprintf_r+0x1ec>
 80068aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068ac:	445a      	add	r2, fp
 80068ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80068b0:	f89a 3000 	ldrb.w	r3, [sl]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 809f 	beq.w	80069f8 <_vfiprintf_r+0x1ec>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c4:	f10a 0a01 	add.w	sl, sl, #1
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	9307      	str	r3, [sp, #28]
 80068cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80068d2:	4654      	mov	r4, sl
 80068d4:	2205      	movs	r2, #5
 80068d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068da:	4853      	ldr	r0, [pc, #332]	@ (8006a28 <_vfiprintf_r+0x21c>)
 80068dc:	f7f9 fc88 	bl	80001f0 <memchr>
 80068e0:	9a04      	ldr	r2, [sp, #16]
 80068e2:	b9d8      	cbnz	r0, 800691c <_vfiprintf_r+0x110>
 80068e4:	06d1      	lsls	r1, r2, #27
 80068e6:	bf44      	itt	mi
 80068e8:	2320      	movmi	r3, #32
 80068ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068ee:	0713      	lsls	r3, r2, #28
 80068f0:	bf44      	itt	mi
 80068f2:	232b      	movmi	r3, #43	@ 0x2b
 80068f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068f8:	f89a 3000 	ldrb.w	r3, [sl]
 80068fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80068fe:	d015      	beq.n	800692c <_vfiprintf_r+0x120>
 8006900:	9a07      	ldr	r2, [sp, #28]
 8006902:	4654      	mov	r4, sl
 8006904:	2000      	movs	r0, #0
 8006906:	f04f 0c0a 	mov.w	ip, #10
 800690a:	4621      	mov	r1, r4
 800690c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006910:	3b30      	subs	r3, #48	@ 0x30
 8006912:	2b09      	cmp	r3, #9
 8006914:	d94b      	bls.n	80069ae <_vfiprintf_r+0x1a2>
 8006916:	b1b0      	cbz	r0, 8006946 <_vfiprintf_r+0x13a>
 8006918:	9207      	str	r2, [sp, #28]
 800691a:	e014      	b.n	8006946 <_vfiprintf_r+0x13a>
 800691c:	eba0 0308 	sub.w	r3, r0, r8
 8006920:	fa09 f303 	lsl.w	r3, r9, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	46a2      	mov	sl, r4
 800692a:	e7d2      	b.n	80068d2 <_vfiprintf_r+0xc6>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	1d19      	adds	r1, r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	9103      	str	r1, [sp, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	bfbb      	ittet	lt
 8006938:	425b      	neglt	r3, r3
 800693a:	f042 0202 	orrlt.w	r2, r2, #2
 800693e:	9307      	strge	r3, [sp, #28]
 8006940:	9307      	strlt	r3, [sp, #28]
 8006942:	bfb8      	it	lt
 8006944:	9204      	strlt	r2, [sp, #16]
 8006946:	7823      	ldrb	r3, [r4, #0]
 8006948:	2b2e      	cmp	r3, #46	@ 0x2e
 800694a:	d10a      	bne.n	8006962 <_vfiprintf_r+0x156>
 800694c:	7863      	ldrb	r3, [r4, #1]
 800694e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006950:	d132      	bne.n	80069b8 <_vfiprintf_r+0x1ac>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	1d1a      	adds	r2, r3, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	9203      	str	r2, [sp, #12]
 800695a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800695e:	3402      	adds	r4, #2
 8006960:	9305      	str	r3, [sp, #20]
 8006962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a38 <_vfiprintf_r+0x22c>
 8006966:	7821      	ldrb	r1, [r4, #0]
 8006968:	2203      	movs	r2, #3
 800696a:	4650      	mov	r0, sl
 800696c:	f7f9 fc40 	bl	80001f0 <memchr>
 8006970:	b138      	cbz	r0, 8006982 <_vfiprintf_r+0x176>
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	eba0 000a 	sub.w	r0, r0, sl
 8006978:	2240      	movs	r2, #64	@ 0x40
 800697a:	4082      	lsls	r2, r0
 800697c:	4313      	orrs	r3, r2
 800697e:	3401      	adds	r4, #1
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006986:	4829      	ldr	r0, [pc, #164]	@ (8006a2c <_vfiprintf_r+0x220>)
 8006988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800698c:	2206      	movs	r2, #6
 800698e:	f7f9 fc2f 	bl	80001f0 <memchr>
 8006992:	2800      	cmp	r0, #0
 8006994:	d03f      	beq.n	8006a16 <_vfiprintf_r+0x20a>
 8006996:	4b26      	ldr	r3, [pc, #152]	@ (8006a30 <_vfiprintf_r+0x224>)
 8006998:	bb1b      	cbnz	r3, 80069e2 <_vfiprintf_r+0x1d6>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	3307      	adds	r3, #7
 800699e:	f023 0307 	bic.w	r3, r3, #7
 80069a2:	3308      	adds	r3, #8
 80069a4:	9303      	str	r3, [sp, #12]
 80069a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a8:	443b      	add	r3, r7
 80069aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ac:	e76a      	b.n	8006884 <_vfiprintf_r+0x78>
 80069ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b2:	460c      	mov	r4, r1
 80069b4:	2001      	movs	r0, #1
 80069b6:	e7a8      	b.n	800690a <_vfiprintf_r+0xfe>
 80069b8:	2300      	movs	r3, #0
 80069ba:	3401      	adds	r4, #1
 80069bc:	9305      	str	r3, [sp, #20]
 80069be:	4619      	mov	r1, r3
 80069c0:	f04f 0c0a 	mov.w	ip, #10
 80069c4:	4620      	mov	r0, r4
 80069c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ca:	3a30      	subs	r2, #48	@ 0x30
 80069cc:	2a09      	cmp	r2, #9
 80069ce:	d903      	bls.n	80069d8 <_vfiprintf_r+0x1cc>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0c6      	beq.n	8006962 <_vfiprintf_r+0x156>
 80069d4:	9105      	str	r1, [sp, #20]
 80069d6:	e7c4      	b.n	8006962 <_vfiprintf_r+0x156>
 80069d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80069dc:	4604      	mov	r4, r0
 80069de:	2301      	movs	r3, #1
 80069e0:	e7f0      	b.n	80069c4 <_vfiprintf_r+0x1b8>
 80069e2:	ab03      	add	r3, sp, #12
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	462a      	mov	r2, r5
 80069e8:	4b12      	ldr	r3, [pc, #72]	@ (8006a34 <_vfiprintf_r+0x228>)
 80069ea:	a904      	add	r1, sp, #16
 80069ec:	4630      	mov	r0, r6
 80069ee:	f3af 8000 	nop.w
 80069f2:	4607      	mov	r7, r0
 80069f4:	1c78      	adds	r0, r7, #1
 80069f6:	d1d6      	bne.n	80069a6 <_vfiprintf_r+0x19a>
 80069f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069fa:	07d9      	lsls	r1, r3, #31
 80069fc:	d405      	bmi.n	8006a0a <_vfiprintf_r+0x1fe>
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	059a      	lsls	r2, r3, #22
 8006a02:	d402      	bmi.n	8006a0a <_vfiprintf_r+0x1fe>
 8006a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a06:	f7ff fc85 	bl	8006314 <__retarget_lock_release_recursive>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	065b      	lsls	r3, r3, #25
 8006a0e:	f53f af1f 	bmi.w	8006850 <_vfiprintf_r+0x44>
 8006a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a14:	e71e      	b.n	8006854 <_vfiprintf_r+0x48>
 8006a16:	ab03      	add	r3, sp, #12
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	462a      	mov	r2, r5
 8006a1c:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <_vfiprintf_r+0x228>)
 8006a1e:	a904      	add	r1, sp, #16
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f879 	bl	8006b18 <_printf_i>
 8006a26:	e7e4      	b.n	80069f2 <_vfiprintf_r+0x1e6>
 8006a28:	08007cf0 	.word	0x08007cf0
 8006a2c:	08007cfa 	.word	0x08007cfa
 8006a30:	00000000 	.word	0x00000000
 8006a34:	080067e7 	.word	0x080067e7
 8006a38:	08007cf6 	.word	0x08007cf6

08006a3c <_printf_common>:
 8006a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	4616      	mov	r6, r2
 8006a42:	4698      	mov	r8, r3
 8006a44:	688a      	ldr	r2, [r1, #8]
 8006a46:	690b      	ldr	r3, [r1, #16]
 8006a48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	bfb8      	it	lt
 8006a50:	4613      	movlt	r3, r2
 8006a52:	6033      	str	r3, [r6, #0]
 8006a54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a58:	4607      	mov	r7, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	b10a      	cbz	r2, 8006a62 <_printf_common+0x26>
 8006a5e:	3301      	adds	r3, #1
 8006a60:	6033      	str	r3, [r6, #0]
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	0699      	lsls	r1, r3, #26
 8006a66:	bf42      	ittt	mi
 8006a68:	6833      	ldrmi	r3, [r6, #0]
 8006a6a:	3302      	addmi	r3, #2
 8006a6c:	6033      	strmi	r3, [r6, #0]
 8006a6e:	6825      	ldr	r5, [r4, #0]
 8006a70:	f015 0506 	ands.w	r5, r5, #6
 8006a74:	d106      	bne.n	8006a84 <_printf_common+0x48>
 8006a76:	f104 0a19 	add.w	sl, r4, #25
 8006a7a:	68e3      	ldr	r3, [r4, #12]
 8006a7c:	6832      	ldr	r2, [r6, #0]
 8006a7e:	1a9b      	subs	r3, r3, r2
 8006a80:	42ab      	cmp	r3, r5
 8006a82:	dc26      	bgt.n	8006ad2 <_printf_common+0x96>
 8006a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	3b00      	subs	r3, #0
 8006a8c:	bf18      	it	ne
 8006a8e:	2301      	movne	r3, #1
 8006a90:	0692      	lsls	r2, r2, #26
 8006a92:	d42b      	bmi.n	8006aec <_printf_common+0xb0>
 8006a94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a98:	4641      	mov	r1, r8
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	47c8      	blx	r9
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d01e      	beq.n	8006ae0 <_printf_common+0xa4>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	6922      	ldr	r2, [r4, #16]
 8006aa6:	f003 0306 	and.w	r3, r3, #6
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	bf02      	ittt	eq
 8006aae:	68e5      	ldreq	r5, [r4, #12]
 8006ab0:	6833      	ldreq	r3, [r6, #0]
 8006ab2:	1aed      	subeq	r5, r5, r3
 8006ab4:	68a3      	ldr	r3, [r4, #8]
 8006ab6:	bf0c      	ite	eq
 8006ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006abc:	2500      	movne	r5, #0
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	bfc4      	itt	gt
 8006ac2:	1a9b      	subgt	r3, r3, r2
 8006ac4:	18ed      	addgt	r5, r5, r3
 8006ac6:	2600      	movs	r6, #0
 8006ac8:	341a      	adds	r4, #26
 8006aca:	42b5      	cmp	r5, r6
 8006acc:	d11a      	bne.n	8006b04 <_printf_common+0xc8>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	e008      	b.n	8006ae4 <_printf_common+0xa8>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	4641      	mov	r1, r8
 8006ad8:	4638      	mov	r0, r7
 8006ada:	47c8      	blx	r9
 8006adc:	3001      	adds	r0, #1
 8006ade:	d103      	bne.n	8006ae8 <_printf_common+0xac>
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae8:	3501      	adds	r5, #1
 8006aea:	e7c6      	b.n	8006a7a <_printf_common+0x3e>
 8006aec:	18e1      	adds	r1, r4, r3
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	2030      	movs	r0, #48	@ 0x30
 8006af2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006af6:	4422      	add	r2, r4
 8006af8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006afc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b00:	3302      	adds	r3, #2
 8006b02:	e7c7      	b.n	8006a94 <_printf_common+0x58>
 8006b04:	2301      	movs	r3, #1
 8006b06:	4622      	mov	r2, r4
 8006b08:	4641      	mov	r1, r8
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	47c8      	blx	r9
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d0e6      	beq.n	8006ae0 <_printf_common+0xa4>
 8006b12:	3601      	adds	r6, #1
 8006b14:	e7d9      	b.n	8006aca <_printf_common+0x8e>
	...

08006b18 <_printf_i>:
 8006b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	7e0f      	ldrb	r7, [r1, #24]
 8006b1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b20:	2f78      	cmp	r7, #120	@ 0x78
 8006b22:	4691      	mov	r9, r2
 8006b24:	4680      	mov	r8, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	469a      	mov	sl, r3
 8006b2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b2e:	d807      	bhi.n	8006b40 <_printf_i+0x28>
 8006b30:	2f62      	cmp	r7, #98	@ 0x62
 8006b32:	d80a      	bhi.n	8006b4a <_printf_i+0x32>
 8006b34:	2f00      	cmp	r7, #0
 8006b36:	f000 80d1 	beq.w	8006cdc <_printf_i+0x1c4>
 8006b3a:	2f58      	cmp	r7, #88	@ 0x58
 8006b3c:	f000 80b8 	beq.w	8006cb0 <_printf_i+0x198>
 8006b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b48:	e03a      	b.n	8006bc0 <_printf_i+0xa8>
 8006b4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b4e:	2b15      	cmp	r3, #21
 8006b50:	d8f6      	bhi.n	8006b40 <_printf_i+0x28>
 8006b52:	a101      	add	r1, pc, #4	@ (adr r1, 8006b58 <_printf_i+0x40>)
 8006b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b58:	08006bb1 	.word	0x08006bb1
 8006b5c:	08006bc5 	.word	0x08006bc5
 8006b60:	08006b41 	.word	0x08006b41
 8006b64:	08006b41 	.word	0x08006b41
 8006b68:	08006b41 	.word	0x08006b41
 8006b6c:	08006b41 	.word	0x08006b41
 8006b70:	08006bc5 	.word	0x08006bc5
 8006b74:	08006b41 	.word	0x08006b41
 8006b78:	08006b41 	.word	0x08006b41
 8006b7c:	08006b41 	.word	0x08006b41
 8006b80:	08006b41 	.word	0x08006b41
 8006b84:	08006cc3 	.word	0x08006cc3
 8006b88:	08006bef 	.word	0x08006bef
 8006b8c:	08006c7d 	.word	0x08006c7d
 8006b90:	08006b41 	.word	0x08006b41
 8006b94:	08006b41 	.word	0x08006b41
 8006b98:	08006ce5 	.word	0x08006ce5
 8006b9c:	08006b41 	.word	0x08006b41
 8006ba0:	08006bef 	.word	0x08006bef
 8006ba4:	08006b41 	.word	0x08006b41
 8006ba8:	08006b41 	.word	0x08006b41
 8006bac:	08006c85 	.word	0x08006c85
 8006bb0:	6833      	ldr	r3, [r6, #0]
 8006bb2:	1d1a      	adds	r2, r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6032      	str	r2, [r6, #0]
 8006bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e09c      	b.n	8006cfe <_printf_i+0x1e6>
 8006bc4:	6833      	ldr	r3, [r6, #0]
 8006bc6:	6820      	ldr	r0, [r4, #0]
 8006bc8:	1d19      	adds	r1, r3, #4
 8006bca:	6031      	str	r1, [r6, #0]
 8006bcc:	0606      	lsls	r6, r0, #24
 8006bce:	d501      	bpl.n	8006bd4 <_printf_i+0xbc>
 8006bd0:	681d      	ldr	r5, [r3, #0]
 8006bd2:	e003      	b.n	8006bdc <_printf_i+0xc4>
 8006bd4:	0645      	lsls	r5, r0, #25
 8006bd6:	d5fb      	bpl.n	8006bd0 <_printf_i+0xb8>
 8006bd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bdc:	2d00      	cmp	r5, #0
 8006bde:	da03      	bge.n	8006be8 <_printf_i+0xd0>
 8006be0:	232d      	movs	r3, #45	@ 0x2d
 8006be2:	426d      	negs	r5, r5
 8006be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006be8:	4858      	ldr	r0, [pc, #352]	@ (8006d4c <_printf_i+0x234>)
 8006bea:	230a      	movs	r3, #10
 8006bec:	e011      	b.n	8006c12 <_printf_i+0xfa>
 8006bee:	6821      	ldr	r1, [r4, #0]
 8006bf0:	6833      	ldr	r3, [r6, #0]
 8006bf2:	0608      	lsls	r0, r1, #24
 8006bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bf8:	d402      	bmi.n	8006c00 <_printf_i+0xe8>
 8006bfa:	0649      	lsls	r1, r1, #25
 8006bfc:	bf48      	it	mi
 8006bfe:	b2ad      	uxthmi	r5, r5
 8006c00:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c02:	4852      	ldr	r0, [pc, #328]	@ (8006d4c <_printf_i+0x234>)
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	bf14      	ite	ne
 8006c08:	230a      	movne	r3, #10
 8006c0a:	2308      	moveq	r3, #8
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c12:	6866      	ldr	r6, [r4, #4]
 8006c14:	60a6      	str	r6, [r4, #8]
 8006c16:	2e00      	cmp	r6, #0
 8006c18:	db05      	blt.n	8006c26 <_printf_i+0x10e>
 8006c1a:	6821      	ldr	r1, [r4, #0]
 8006c1c:	432e      	orrs	r6, r5
 8006c1e:	f021 0104 	bic.w	r1, r1, #4
 8006c22:	6021      	str	r1, [r4, #0]
 8006c24:	d04b      	beq.n	8006cbe <_printf_i+0x1a6>
 8006c26:	4616      	mov	r6, r2
 8006c28:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c2c:	fb03 5711 	mls	r7, r3, r1, r5
 8006c30:	5dc7      	ldrb	r7, [r0, r7]
 8006c32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c36:	462f      	mov	r7, r5
 8006c38:	42bb      	cmp	r3, r7
 8006c3a:	460d      	mov	r5, r1
 8006c3c:	d9f4      	bls.n	8006c28 <_printf_i+0x110>
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d10b      	bne.n	8006c5a <_printf_i+0x142>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	07df      	lsls	r7, r3, #31
 8006c46:	d508      	bpl.n	8006c5a <_printf_i+0x142>
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	6861      	ldr	r1, [r4, #4]
 8006c4c:	4299      	cmp	r1, r3
 8006c4e:	bfde      	ittt	le
 8006c50:	2330      	movle	r3, #48	@ 0x30
 8006c52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c5a:	1b92      	subs	r2, r2, r6
 8006c5c:	6122      	str	r2, [r4, #16]
 8006c5e:	f8cd a000 	str.w	sl, [sp]
 8006c62:	464b      	mov	r3, r9
 8006c64:	aa03      	add	r2, sp, #12
 8006c66:	4621      	mov	r1, r4
 8006c68:	4640      	mov	r0, r8
 8006c6a:	f7ff fee7 	bl	8006a3c <_printf_common>
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d14a      	bne.n	8006d08 <_printf_i+0x1f0>
 8006c72:	f04f 30ff 	mov.w	r0, #4294967295
 8006c76:	b004      	add	sp, #16
 8006c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	f043 0320 	orr.w	r3, r3, #32
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	4832      	ldr	r0, [pc, #200]	@ (8006d50 <_printf_i+0x238>)
 8006c86:	2778      	movs	r7, #120	@ 0x78
 8006c88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	6831      	ldr	r1, [r6, #0]
 8006c90:	061f      	lsls	r7, r3, #24
 8006c92:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c96:	d402      	bmi.n	8006c9e <_printf_i+0x186>
 8006c98:	065f      	lsls	r7, r3, #25
 8006c9a:	bf48      	it	mi
 8006c9c:	b2ad      	uxthmi	r5, r5
 8006c9e:	6031      	str	r1, [r6, #0]
 8006ca0:	07d9      	lsls	r1, r3, #31
 8006ca2:	bf44      	itt	mi
 8006ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ca8:	6023      	strmi	r3, [r4, #0]
 8006caa:	b11d      	cbz	r5, 8006cb4 <_printf_i+0x19c>
 8006cac:	2310      	movs	r3, #16
 8006cae:	e7ad      	b.n	8006c0c <_printf_i+0xf4>
 8006cb0:	4826      	ldr	r0, [pc, #152]	@ (8006d4c <_printf_i+0x234>)
 8006cb2:	e7e9      	b.n	8006c88 <_printf_i+0x170>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	f023 0320 	bic.w	r3, r3, #32
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	e7f6      	b.n	8006cac <_printf_i+0x194>
 8006cbe:	4616      	mov	r6, r2
 8006cc0:	e7bd      	b.n	8006c3e <_printf_i+0x126>
 8006cc2:	6833      	ldr	r3, [r6, #0]
 8006cc4:	6825      	ldr	r5, [r4, #0]
 8006cc6:	6961      	ldr	r1, [r4, #20]
 8006cc8:	1d18      	adds	r0, r3, #4
 8006cca:	6030      	str	r0, [r6, #0]
 8006ccc:	062e      	lsls	r6, r5, #24
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	d501      	bpl.n	8006cd6 <_printf_i+0x1be>
 8006cd2:	6019      	str	r1, [r3, #0]
 8006cd4:	e002      	b.n	8006cdc <_printf_i+0x1c4>
 8006cd6:	0668      	lsls	r0, r5, #25
 8006cd8:	d5fb      	bpl.n	8006cd2 <_printf_i+0x1ba>
 8006cda:	8019      	strh	r1, [r3, #0]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	e7bc      	b.n	8006c5e <_printf_i+0x146>
 8006ce4:	6833      	ldr	r3, [r6, #0]
 8006ce6:	1d1a      	adds	r2, r3, #4
 8006ce8:	6032      	str	r2, [r6, #0]
 8006cea:	681e      	ldr	r6, [r3, #0]
 8006cec:	6862      	ldr	r2, [r4, #4]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7f9 fa7d 	bl	80001f0 <memchr>
 8006cf6:	b108      	cbz	r0, 8006cfc <_printf_i+0x1e4>
 8006cf8:	1b80      	subs	r0, r0, r6
 8006cfa:	6060      	str	r0, [r4, #4]
 8006cfc:	6863      	ldr	r3, [r4, #4]
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	2300      	movs	r3, #0
 8006d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d06:	e7aa      	b.n	8006c5e <_printf_i+0x146>
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4640      	mov	r0, r8
 8006d10:	47d0      	blx	sl
 8006d12:	3001      	adds	r0, #1
 8006d14:	d0ad      	beq.n	8006c72 <_printf_i+0x15a>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	079b      	lsls	r3, r3, #30
 8006d1a:	d413      	bmi.n	8006d44 <_printf_i+0x22c>
 8006d1c:	68e0      	ldr	r0, [r4, #12]
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	4298      	cmp	r0, r3
 8006d22:	bfb8      	it	lt
 8006d24:	4618      	movlt	r0, r3
 8006d26:	e7a6      	b.n	8006c76 <_printf_i+0x15e>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4640      	mov	r0, r8
 8006d30:	47d0      	blx	sl
 8006d32:	3001      	adds	r0, #1
 8006d34:	d09d      	beq.n	8006c72 <_printf_i+0x15a>
 8006d36:	3501      	adds	r5, #1
 8006d38:	68e3      	ldr	r3, [r4, #12]
 8006d3a:	9903      	ldr	r1, [sp, #12]
 8006d3c:	1a5b      	subs	r3, r3, r1
 8006d3e:	42ab      	cmp	r3, r5
 8006d40:	dcf2      	bgt.n	8006d28 <_printf_i+0x210>
 8006d42:	e7eb      	b.n	8006d1c <_printf_i+0x204>
 8006d44:	2500      	movs	r5, #0
 8006d46:	f104 0619 	add.w	r6, r4, #25
 8006d4a:	e7f5      	b.n	8006d38 <_printf_i+0x220>
 8006d4c:	08007d01 	.word	0x08007d01
 8006d50:	08007d12 	.word	0x08007d12

08006d54 <__swhatbuf_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	460c      	mov	r4, r1
 8006d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	b096      	sub	sp, #88	@ 0x58
 8006d60:	4615      	mov	r5, r2
 8006d62:	461e      	mov	r6, r3
 8006d64:	da0d      	bge.n	8006d82 <__swhatbuf_r+0x2e>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d6c:	f04f 0100 	mov.w	r1, #0
 8006d70:	bf14      	ite	ne
 8006d72:	2340      	movne	r3, #64	@ 0x40
 8006d74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d78:	2000      	movs	r0, #0
 8006d7a:	6031      	str	r1, [r6, #0]
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	b016      	add	sp, #88	@ 0x58
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	466a      	mov	r2, sp
 8006d84:	f000 f896 	bl	8006eb4 <_fstat_r>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	dbec      	blt.n	8006d66 <__swhatbuf_r+0x12>
 8006d8c:	9901      	ldr	r1, [sp, #4]
 8006d8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d96:	4259      	negs	r1, r3
 8006d98:	4159      	adcs	r1, r3
 8006d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d9e:	e7eb      	b.n	8006d78 <__swhatbuf_r+0x24>

08006da0 <__smakebuf_r>:
 8006da0:	898b      	ldrh	r3, [r1, #12]
 8006da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006da4:	079d      	lsls	r5, r3, #30
 8006da6:	4606      	mov	r6, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	d507      	bpl.n	8006dbc <__smakebuf_r+0x1c>
 8006dac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	2301      	movs	r3, #1
 8006db6:	6163      	str	r3, [r4, #20]
 8006db8:	b003      	add	sp, #12
 8006dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dbc:	ab01      	add	r3, sp, #4
 8006dbe:	466a      	mov	r2, sp
 8006dc0:	f7ff ffc8 	bl	8006d54 <__swhatbuf_r>
 8006dc4:	9f00      	ldr	r7, [sp, #0]
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f7ff fb10 	bl	80063f0 <_malloc_r>
 8006dd0:	b948      	cbnz	r0, 8006de6 <__smakebuf_r+0x46>
 8006dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd6:	059a      	lsls	r2, r3, #22
 8006dd8:	d4ee      	bmi.n	8006db8 <__smakebuf_r+0x18>
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	f043 0302 	orr.w	r3, r3, #2
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	e7e2      	b.n	8006dac <__smakebuf_r+0xc>
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	6020      	str	r0, [r4, #0]
 8006dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	9b01      	ldr	r3, [sp, #4]
 8006df2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006df6:	b15b      	cbz	r3, 8006e10 <__smakebuf_r+0x70>
 8006df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f000 f86b 	bl	8006ed8 <_isatty_r>
 8006e02:	b128      	cbz	r0, 8006e10 <__smakebuf_r+0x70>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	431d      	orrs	r5, r3
 8006e14:	81a5      	strh	r5, [r4, #12]
 8006e16:	e7cf      	b.n	8006db8 <__smakebuf_r+0x18>

08006e18 <_putc_r>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	4606      	mov	r6, r0
 8006e20:	b118      	cbz	r0, 8006e2a <_putc_r+0x12>
 8006e22:	6a03      	ldr	r3, [r0, #32]
 8006e24:	b90b      	cbnz	r3, 8006e2a <_putc_r+0x12>
 8006e26:	f7ff f83f 	bl	8005ea8 <__sinit>
 8006e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e2c:	07d8      	lsls	r0, r3, #31
 8006e2e:	d405      	bmi.n	8006e3c <_putc_r+0x24>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	0599      	lsls	r1, r3, #22
 8006e34:	d402      	bmi.n	8006e3c <_putc_r+0x24>
 8006e36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e38:	f7ff fa6b 	bl	8006312 <__retarget_lock_acquire_recursive>
 8006e3c:	68a3      	ldr	r3, [r4, #8]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	60a3      	str	r3, [r4, #8]
 8006e44:	da05      	bge.n	8006e52 <_putc_r+0x3a>
 8006e46:	69a2      	ldr	r2, [r4, #24]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	db12      	blt.n	8006e72 <_putc_r+0x5a>
 8006e4c:	b2eb      	uxtb	r3, r5
 8006e4e:	2b0a      	cmp	r3, #10
 8006e50:	d00f      	beq.n	8006e72 <_putc_r+0x5a>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	701d      	strb	r5, [r3, #0]
 8006e5a:	b2ed      	uxtb	r5, r5
 8006e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e5e:	07da      	lsls	r2, r3, #31
 8006e60:	d405      	bmi.n	8006e6e <_putc_r+0x56>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	059b      	lsls	r3, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_putc_r+0x56>
 8006e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e6a:	f7ff fa53 	bl	8006314 <__retarget_lock_release_recursive>
 8006e6e:	4628      	mov	r0, r5
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	4629      	mov	r1, r5
 8006e74:	4622      	mov	r2, r4
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff f93d 	bl	80060f6 <__swbuf_r>
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	e7ed      	b.n	8006e5c <_putc_r+0x44>

08006e80 <memmove>:
 8006e80:	4288      	cmp	r0, r1
 8006e82:	b510      	push	{r4, lr}
 8006e84:	eb01 0402 	add.w	r4, r1, r2
 8006e88:	d902      	bls.n	8006e90 <memmove+0x10>
 8006e8a:	4284      	cmp	r4, r0
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	d807      	bhi.n	8006ea0 <memmove+0x20>
 8006e90:	1e43      	subs	r3, r0, #1
 8006e92:	42a1      	cmp	r1, r4
 8006e94:	d008      	beq.n	8006ea8 <memmove+0x28>
 8006e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e9e:	e7f8      	b.n	8006e92 <memmove+0x12>
 8006ea0:	4402      	add	r2, r0
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	428a      	cmp	r2, r1
 8006ea6:	d100      	bne.n	8006eaa <memmove+0x2a>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eb2:	e7f7      	b.n	8006ea4 <memmove+0x24>

08006eb4 <_fstat_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	@ (8006ed4 <_fstat_r+0x20>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	f7fa faa0 	bl	8001406 <_fstat>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d102      	bne.n	8006ed0 <_fstat_r+0x1c>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	b103      	cbz	r3, 8006ed0 <_fstat_r+0x1c>
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
 8006ed2:	bf00      	nop
 8006ed4:	200007c8 	.word	0x200007c8

08006ed8 <_isatty_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	@ (8006ef4 <_isatty_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa fa9f 	bl	8001426 <_isatty>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_isatty_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_isatty_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	200007c8 	.word	0x200007c8

08006ef8 <_sbrk_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d06      	ldr	r5, [pc, #24]	@ (8006f14 <_sbrk_r+0x1c>)
 8006efc:	2300      	movs	r3, #0
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	602b      	str	r3, [r5, #0]
 8006f04:	f7fa faa8 	bl	8001458 <_sbrk>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_sbrk_r+0x1a>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_sbrk_r+0x1a>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	200007c8 	.word	0x200007c8

08006f18 <memcpy>:
 8006f18:	440a      	add	r2, r1
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f20:	d100      	bne.n	8006f24 <memcpy+0xc>
 8006f22:	4770      	bx	lr
 8006f24:	b510      	push	{r4, lr}
 8006f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2e:	4291      	cmp	r1, r2
 8006f30:	d1f9      	bne.n	8006f26 <memcpy+0xe>
 8006f32:	bd10      	pop	{r4, pc}

08006f34 <_realloc_r>:
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	4607      	mov	r7, r0
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	b921      	cbnz	r1, 8006f4a <_realloc_r+0x16>
 8006f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f44:	4611      	mov	r1, r2
 8006f46:	f7ff ba53 	b.w	80063f0 <_malloc_r>
 8006f4a:	b92a      	cbnz	r2, 8006f58 <_realloc_r+0x24>
 8006f4c:	f7ff f9e4 	bl	8006318 <_free_r>
 8006f50:	4625      	mov	r5, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f58:	f000 f81a 	bl	8006f90 <_malloc_usable_size_r>
 8006f5c:	4284      	cmp	r4, r0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	d802      	bhi.n	8006f68 <_realloc_r+0x34>
 8006f62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f66:	d8f4      	bhi.n	8006f52 <_realloc_r+0x1e>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f7ff fa40 	bl	80063f0 <_malloc_r>
 8006f70:	4680      	mov	r8, r0
 8006f72:	b908      	cbnz	r0, 8006f78 <_realloc_r+0x44>
 8006f74:	4645      	mov	r5, r8
 8006f76:	e7ec      	b.n	8006f52 <_realloc_r+0x1e>
 8006f78:	42b4      	cmp	r4, r6
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	bf28      	it	cs
 8006f80:	4632      	movcs	r2, r6
 8006f82:	f7ff ffc9 	bl	8006f18 <memcpy>
 8006f86:	4629      	mov	r1, r5
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff f9c5 	bl	8006318 <_free_r>
 8006f8e:	e7f1      	b.n	8006f74 <_realloc_r+0x40>

08006f90 <_malloc_usable_size_r>:
 8006f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f94:	1f18      	subs	r0, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfbc      	itt	lt
 8006f9a:	580b      	ldrlt	r3, [r1, r0]
 8006f9c:	18c0      	addlt	r0, r0, r3
 8006f9e:	4770      	bx	lr

08006fa0 <_init>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	bf00      	nop
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr

08006fac <_fini>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr
